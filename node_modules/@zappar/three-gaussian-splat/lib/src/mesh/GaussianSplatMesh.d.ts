import { GaussianSplatGeometry } from '../geometry/GaussianSplatGeometry';
import * as THREE from 'three';
import { GaussianSplatMaterial } from '../materials/GaussianSplatMaterial';
import { MaskingSphere } from './MaskingSphere';
import { MaskingPlane } from './MaskingPlane';
export declare class GaussianSplatMesh extends THREE.Mesh<GaussianSplatGeometry, GaussianSplatMaterial> {
  private url;
  private _maskMeshSphere?;
  private _maskMeshPlane?;
  private currentCamera?;
  private renderer?;
  // frustumCulled = false;
  constructor(url: string, maxSplats?: number);
  load(config?: Parameters<GaussianSplatGeometry['load']>[1]): Promise<void>;
  private _normal;
  update(camera: THREE.PerspectiveCamera | THREE.Camera, renderer: THREE.WebGLRenderer): void;
  addMaskMesh(object: MaskingSphere | MaskingPlane): this;
}
