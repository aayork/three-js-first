import * as THREE from 'three';
export class SplatLoader extends THREE.Loader {
    constructor(processDataCallback, manager) {
        super(manager);
        this.processDataCallback = processDataCallback;
    }
    load(url, onLoad, onProgress, onError) {
        const path = this.path === '' ? url : this.path + url;
        fetch(path, {
            mode: 'cors',
            credentials: this.withCredentials ? 'include' : 'omit',
        })
            .then(req => {
            if (req.status !== 200) {
                if (onError) {
                    onError(new ErrorEvent('NetworkError', { message: `${req.status} Unable to load ${req.url}` }));
                }
                this.manager.itemError(url);
                return;
            }
            return req.arrayBuffer();
        })
            .then(buffer => {
            if (!buffer) {
                return;
            }
            const data = new Uint8Array(buffer);
            this._processData(data, data.length, true);
            if (onLoad) {
                onLoad(data);
            }
            this.manager.itemEnd(url);
        })
            .catch(error => {
            if (onError) {
                onError(new ErrorEvent('NetworkError', { message: error.message }));
            }
            this.manager.itemError(url);
        });
        this.manager.itemStart(url);
    }
    loadAsync(url, onProgress) {
        return new Promise((resolve, reject) => {
            this.load(url, data => {
                resolve({ data, bytesRead: data.length });
            }, onProgress, reject);
        });
    }
    _processData(data, bytesRead, isComplete = false) {
        this.processDataCallback?.(data, bytesRead, isComplete);
    }
}
