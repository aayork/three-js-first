{
  "version": 3,
  "sources": ["../../@mkkellogg/gaussian-splats-3d/src/AbortablePromise.js", "../../@mkkellogg/gaussian-splats-3d/src/Util.js", "../../@mkkellogg/gaussian-splats-3d/src/loaders/UncompressedSplatArray.js", "../../@mkkellogg/gaussian-splats-3d/src/Constants.js", "../../@mkkellogg/gaussian-splats-3d/src/loaders/SplatBuffer.js", "../../@mkkellogg/gaussian-splats-3d/src/loaders/ply/CompressedPlyParser.js", "../../@mkkellogg/gaussian-splats-3d/src/loaders/ply/PlyParser.js", "../../@mkkellogg/gaussian-splats-3d/src/loaders/SplatPartitioner.js", "../../@mkkellogg/gaussian-splats-3d/src/loaders/SplatBufferGenerator.js", "../../@mkkellogg/gaussian-splats-3d/src/loaders/LoaderStatus.js", "../../@mkkellogg/gaussian-splats-3d/src/loaders/ply/PlyLoader.js", "../../@mkkellogg/gaussian-splats-3d/src/loaders/splat/SplatParser.js", "../../@mkkellogg/gaussian-splats-3d/src/loaders/splat/SplatLoader.js", "../../@mkkellogg/gaussian-splats-3d/src/loaders/ksplat/KSplatLoader.js", "../../@mkkellogg/gaussian-splats-3d/src/loaders/SceneFormat.js", "../../@mkkellogg/gaussian-splats-3d/src/loaders/Utils.js", "../../@mkkellogg/gaussian-splats-3d/src/OrbitControls.js", "../../@mkkellogg/gaussian-splats-3d/src/ui/Util.js", "../../@mkkellogg/gaussian-splats-3d/src/ui/LoadingSpinner.js", "../../@mkkellogg/gaussian-splats-3d/src/ui/LoadingProgressBar.js", "../../@mkkellogg/gaussian-splats-3d/src/ui/InfoPanel.js", "../../@mkkellogg/gaussian-splats-3d/src/ArrowHelper.js", "../../@mkkellogg/gaussian-splats-3d/src/SceneHelper.js", "../../@mkkellogg/gaussian-splats-3d/src/raycaster/Ray.js", "../../@mkkellogg/gaussian-splats-3d/src/raycaster/Hit.js", "../../@mkkellogg/gaussian-splats-3d/src/raycaster/Raycaster.js", "../../@mkkellogg/gaussian-splats-3d/src/SplatScene.js", "../../@mkkellogg/gaussian-splats-3d/src/splattree/SplatTree.js", "../../@mkkellogg/gaussian-splats-3d/src/three-shim/WebGLExtensions.js", "../../@mkkellogg/gaussian-splats-3d/src/three-shim/WebGLCapabilities.js", "../../@mkkellogg/gaussian-splats-3d/src/SceneRevealMode.js", "../../@mkkellogg/gaussian-splats-3d/src/LogLevel.js", "../../@mkkellogg/gaussian-splats-3d/src/SplatMesh.js", "../../@mkkellogg/gaussian-splats-3d/src/worker/sorter.wasm", "../../@mkkellogg/gaussian-splats-3d/src/worker/SortWorker.js", "../../@mkkellogg/gaussian-splats-3d/src/webxr/WebXRMode.js", "../../@mkkellogg/gaussian-splats-3d/src/webxr/VRButton.js", "../../@mkkellogg/gaussian-splats-3d/src/webxr/ARButton.js", "../../@mkkellogg/gaussian-splats-3d/src/RenderMode.js", "../../@mkkellogg/gaussian-splats-3d/src/Viewer.js", "../../@mkkellogg/gaussian-splats-3d/src/DropInViewer.js"],
  "sourcesContent": ["/**\n * AbortablePromise: A quick & dirty wrapper for JavaScript's Promise class that allows the underlying\n * asynchronous operation to be cancelled. It is only meant for simple situations where no complex promise\n * chaining or merging occurs. It needs a significant amount of work to truly replicate the full\n * functionality of JavaScript's Promise class. Look at Util.fetchWithProgress() for example usage.\n *\n * This class was primarily added to allow splat scene downloads to be cancelled. It has not been tested\n * very thoroughly and the implementation is kinda janky. If you can at all help it, please avoid using it :)\n */\nexport class AbortablePromise {\n\n    static idGen = 0;\n\n    constructor(promiseFunc, abortHandler) {\n\n        let promiseResolve;\n        let promiseReject;\n        this.promise = new Promise((resolve, reject) => {\n            promiseResolve = resolve.bind(this);\n            promiseReject = reject.bind(this);\n        });\n\n        const resolve = (...args) => {\n            promiseResolve(...args);\n        };\n\n        const reject = (error) => {\n            promiseReject(error);\n        };\n\n        promiseFunc(resolve.bind(this), reject.bind(this));\n        this.abortHandler = abortHandler;\n        this.id = AbortablePromise.idGen++;\n    }\n\n    then(onResolve) {\n        return new AbortablePromise((resolve, reject) => {\n            this.promise = this.promise\n            .then((...args) => {\n                const onResolveResult = onResolve(...args);\n                if (onResolveResult instanceof Promise || onResolveResult instanceof AbortablePromise) {\n                    onResolveResult.then((...args2) => {\n                        resolve(...args2);\n                    });\n                } else {\n                    resolve(onResolveResult);\n                }\n            })\n            .catch((error) => {\n                reject(error);\n            });\n        }, this.abortHandler);\n    }\n\n    catch(onFail) {\n        return new AbortablePromise((resolve) => {\n            this.promise = this.promise.then((...args) => {\n                resolve(...args);\n            })\n            .catch(onFail);\n        }, this.abortHandler);\n    }\n\n    abort() {\n        if (this.abortHandler) this.abortHandler();\n    }\n\n}\n\nexport class AbortedPromiseError extends Error {\n\n    constructor(msg) {\n        super(msg);\n    }\n\n}\n", "import { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\n\nexport const floatToHalf = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(val) {\n        floatView[0] = val;\n        const x = int32View[0];\n\n        let bits = (x >> 16) & 0x8000;\n        let m = (x >> 12) & 0x07ff;\n        const e = (x >> 23) & 0xff;\n\n        if (e < 103) return bits;\n\n        if (e > 142) {\n            bits |= 0x7c00;\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\n            return bits;\n        }\n\n        if (e < 113) {\n            m |= 0x0800;\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\n            return bits;\n        }\n\n        bits |= (( e - 112) << 10) | (m >> 1);\n        bits += m & 1;\n        return bits;\n    };\n\n}();\n\nexport const uintEncodedFloat = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(f) {\n        floatView[0] = f;\n        return int32View[0];\n    };\n\n}();\n\nexport const rgbaToInteger = function(r, g, b, a) {\n    return r + (g << 8) + (b << 16) + (a << 24);\n};\n\nexport const rgbaArrayToInteger = function(arr, offset) {\n    return arr[offset] + (arr[offset + 1] << 8) + (arr[offset + 2] << 16) + (arr[offset + 3] << 24);\n};\n\nexport const fetchWithProgress = function(path, onProgress, saveChunks = true) {\n\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    let aborted = false;\n    let rejectFunc = null;\n    const abortHandler = () => {\n        abortController.abort();\n        rejectFunc(new AbortedPromiseError('Fetch aborted.'));\n        aborted = true;\n    };\n\n    return new AbortablePromise((resolve, reject) => {\n        rejectFunc = reject;\n        fetch(path, { signal })\n        .then(async (data) => {\n            const reader = data.body.getReader();\n            let bytesDownloaded = 0;\n            let _fileSize = data.headers.get('Content-Length');\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\n\n            const chunks = [];\n\n            while (!aborted) {\n                try {\n                    const { value: chunk, done } = await reader.read();\n                    if (done) {\n                        if (onProgress) {\n                            onProgress(100, '100%', chunk, fileSize);\n                        }\n                        if (saveChunks) {\n                            const buffer = new Blob(chunks).arrayBuffer();\n                            resolve(buffer);\n                        } else {\n                            resolve();\n                        }\n                        break;\n                    }\n                    bytesDownloaded += chunk.length;\n                    let percent;\n                    let percentLabel;\n                    if (fileSize !== undefined) {\n                        percent = bytesDownloaded / fileSize * 100;\n                        percentLabel = `${percent.toFixed(2)}%`;\n                    }\n                    if (saveChunks) chunks.push(chunk);\n                    if (onProgress) {\n                        const cancelSaveChucnks = onProgress(percent, percentLabel, chunk, fileSize);\n                        if (cancelSaveChucnks) saveChunks = false;\n                    }\n                } catch (error) {\n                    reject(error);\n                    break;\n                }\n            }\n        });\n    }, abortHandler);\n\n};\n\nexport const clamp = function(val, min, max) {\n    return Math.max(Math.min(val, max), min);\n};\n\nexport const getCurrentTime = function() {\n    return performance.now() / 1000;\n};\n\nexport const disposeAllMeshes = (object3D) => {\n    if (object3D.geometry) {\n        object3D.geometry.dispose();\n        object3D.geometry = null;\n    }\n    if (object3D.material) {\n        object3D.material.dispose();\n        object3D.material = null;\n    }\n    if (object3D.children) {\n        for (let child of object3D.children) {\n            disposeAllMeshes(child);\n        }\n    }\n};\n\nexport const delayedExecute = (func, fast) => {\n    return new Promise((resolve) => {\n        window.setTimeout(() => {\n            resolve(func());\n        }, fast ? 1 : 50);\n    });\n};\n\n\nexport const getSphericalHarmonicsComponentCountForDegree = (sphericalHarmonicsDegree = 0) => {\n    switch (sphericalHarmonicsDegree) {\n        case 1:\n            return 9;\n        case 2:\n            return 24;\n    }\n    return 0;\n};\n", "import { getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\n\nconst BASE_COMPONENT_COUNT = 14;\n\nexport class UncompressedSplatArray {\n\n    static OFFSET = {\n        X: 0,\n        Y: 1,\n        Z: 2,\n        SCALE0: 3,\n        SCALE1: 4,\n        SCALE2: 5,\n        ROTATION0: 6,\n        ROTATION1: 7,\n        ROTATION2: 8,\n        ROTATION3: 9,\n        FDC0: 10,\n        FDC1: 11,\n        FDC2: 12,\n        OPACITY: 13,\n        FRC0: 14,\n        FRC1: 15,\n        FRC2: 16,\n        FRC3: 17,\n        FRC4: 18,\n        FRC5: 19,\n        FRC6: 20,\n        FRC7: 21,\n        FRC8: 22,\n        FRC9: 23,\n        FRC10: 24,\n        FRC11: 25,\n        FRC12: 26,\n        FRC13: 27,\n        FRC14: 28,\n        FRC15: 29,\n        FRC16: 30,\n        FRC17: 31,\n        FRC18: 32,\n        FRC19: 33,\n        FRC20: 34,\n        FRC21: 35,\n        FRC22: 36,\n        FRC23: 37,\n    };\n\n    constructor(sphericalHarmonicsDegree = 0) {\n        this.sphericalHarmonicsDegree = sphericalHarmonicsDegree;\n        this.sphericalHarmonicsCount = getSphericalHarmonicsComponentCountForDegree(this.sphericalHarmonicsDegree);\n        this.componentCount = this.sphericalHarmonicsCount + BASE_COMPONENT_COUNT;\n        this.defaultSphericalHarmonics = new Array(this.sphericalHarmonicsCount).fill(0);\n        this.splats = [];\n        this.splatCount = 0;\n    }\n\n    static createSplat(sphericalHarmonicsDegree = 0) {\n        const baseSplat = [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\n        let shEntries = getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\n        for (let i = 0; i < shEntries; i++) baseSplat.push(0);\n        return baseSplat;\n    }\n\n    addSplat(splat) {\n        this.splats.push(splat);\n        this.splatCount++;\n    }\n\n    getSplat(index) {\n        return this.splats[index];\n    }\n\n    addDefaultSplat() {\n        const newSplat = UncompressedSplatArray.createSplat(this.sphericalHarmonicsDegree);\n        this.addSplat(newSplat);\n        return newSplat;\n    }\n\n    addSplatFromComonents(x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity, ...rest) {\n        const newSplat = [x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity, ...this.defaultSphericalHarmonics];\n        for (let i = 0; i < rest.length && i < this.sphericalHarmonicsCount; i++) {\n            newSplat[i] = rest[i];\n        }\n        this.addSplat(newSplat);\n        return newSplat;\n    }\n\n    addSplatFromArray(src, srcIndex) {\n        const srcSplat = src.splats[srcIndex];\n        const newSplat = UncompressedSplatArray.createSplat(this.sphericalHarmonicsDegree);\n        for (let i = 0; i < this.componentCount && i < srcSplat.length; i++) {\n            newSplat[i] = srcSplat[i];\n        }\n        this.addSplat(newSplat);\n    }\n}\n", "export class Constants {\n\n    static DepthMapRange = 1 << 16;\n    static MemoryPageSize = 65536;\n    static BytesPerFloat = 4;\n    static BytesPerInt = 4;\n    static MaxScenes = 32;\n    static StreamingSectionSize = 524288;\n    static SphericalHarmonics8BitCompressionRange = 3;\n}\n", "import * as THREE from 'three';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\nimport { clamp, getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\nimport { Constants } from '../Constants.js';\n\nconst SphericalHarmonics8BitCompressionHalfRange = Constants.SphericalHarmonics8BitCompressionRange / 2.0;\n\nconst toHalfFloat = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\n\nconst toUint8 = (v) => {\n    v = clamp(v, -SphericalHarmonics8BitCompressionHalfRange, SphericalHarmonics8BitCompressionHalfRange);\n    return clamp(Math.floor((v * (0.5 / SphericalHarmonics8BitCompressionHalfRange) + 0.5) * 255), 0, 255);\n};\n\nconst fromUint8 = (v) => {\n    return (v / 255) * Constants.SphericalHarmonics8BitCompressionRange - SphericalHarmonics8BitCompressionHalfRange;\n};\n\nconst fromHalfFloat = THREE.DataUtils.fromHalfFloat.bind(THREE.DataUtils);\n\nconst fromHalfFloatToUint8 = (v) => {\n    return toUint8(fromHalfFloat(v));\n};\n\nconst toUncompressedFloat = (f, compressionLevel, isSH = false) => {\n    if (compressionLevel === 0) {\n        return f;\n    } else if (compressionLevel === 1 || compressionLevel === 2 && !isSH) {\n        return THREE.DataUtils.fromHalfFloat(f);\n    } else if (compressionLevel === 2) {\n        return fromUint8(f);\n    }\n};\n\nconst dataViewFloatForCompressionLevel = (dataView, floatIndex, compressionLevel, isSH = false) => {\n    if (compressionLevel === 0) {\n        return dataView.getFloat32(floatIndex * 4, true);\n    } else if (compressionLevel === 1 || compressionLevel === 2 && !isSH) {\n        return dataView.getUint16(floatIndex * 2, true);\n    } else {\n        return dataView.getUint8(floatIndex, true);\n    }\n};\n\n/**\n * SplatBuffer: Container for splat data from a single scene/file and capable of (mediocre) compression.\n */\nexport class SplatBuffer {\n\n    static CurrentMajorVersion = 0;\n    static CurrentMinorVersion = 1;\n\n    static CenterComponentCount = 3;\n    static ScaleComponentCount = 3;\n    static RotationComponentCount = 4;\n    static ColorComponentCount = 4;\n    static CovarianceComponentCount = 6;\n\n    static SplatScaleOffsetFloat = 3;\n    static SplatRotationOffsetFloat = 6;\n\n    static CompressionLevels = {\n        0: {\n            BytesPerCenter: 12,\n            BytesPerScale: 12,\n            BytesPerRotation: 16,\n            BytesPerColor: 4,\n            ScaleOffsetBytes: 12,\n            RotationffsetBytes: 24,\n            ColorOffsetBytes: 40,\n            SphericalHarmonicsOffsetBytes: 44,\n            ScaleRange: 1,\n            BytesPerSphericalHarmonicsComponent: 4,\n            SphericalHarmonicsOffsetFloat: 11,\n            SphericalHarmonicsDegrees: {\n                0: { BytesPerSplat: 44 },\n                1: { BytesPerSplat: 80 },\n                2: { BytesPerSplat: 140 }\n            },\n        },\n        1: {\n            BytesPerCenter: 6,\n            BytesPerScale: 6,\n            BytesPerRotation: 8,\n            BytesPerColor: 4,\n            ScaleOffsetBytes: 6,\n            RotationffsetBytes: 12,\n            ColorOffsetBytes: 20,\n            SphericalHarmonicsOffsetBytes: 24,\n            ScaleRange: 32767,\n            BytesPerSphericalHarmonicsComponent: 2,\n            SphericalHarmonicsOffsetFloat: 12,\n            SphericalHarmonicsDegrees: {\n                0: { BytesPerSplat: 24 },\n                1: { BytesPerSplat: 42 },\n                2: { BytesPerSplat: 72 }\n            },\n        },\n        2: {\n            BytesPerCenter: 6,\n            BytesPerScale: 6,\n            BytesPerRotation: 8,\n            BytesPerColor: 4,\n            ScaleOffsetBytes: 6,\n            RotationffsetBytes: 12,\n            ColorOffsetBytes: 20,\n            SphericalHarmonicsOffsetBytes: 24,\n            ScaleRange: 32767,\n            BytesPerSphericalHarmonicsComponent: 1,\n            SphericalHarmonicsOffsetFloat: 12,\n            SphericalHarmonicsDegrees: {\n                0: { BytesPerSplat: 24 },\n                1: { BytesPerSplat: 33 },\n                2: { BytesPerSplat: 48 }\n            },\n        }\n    };\n\n    static CovarianceSizeFloats = 6;\n\n    static HeaderSizeBytes = 4096;\n    static SectionHeaderSizeBytes = 1024;\n\n    static BucketStorageSizeBytes = 12;\n    static BucketStorageSizeFloats = 3;\n\n    static BucketBlockSize = 5.0;\n    static BucketSize = 256;\n\n    constructor(bufferData, secLoadedCountsToMax = true) {\n        this.constructFromBuffer(bufferData, secLoadedCountsToMax);\n    }\n\n    getSplatCount() {\n        return this.splatCount;\n    }\n\n    getMaxSplatCount() {\n        return this.maxSplatCount;\n    }\n\n    getMinSphericalHarmonicsDegree() {\n        let minSphericalHarmonicsDegree = 0;\n        for (let i = 0; i < this.sections.length; i++) {\n            const section = this.sections[i];\n            if (i === 0 || section.sphericalHarmonicsDegree < minSphericalHarmonicsDegree) {\n                minSphericalHarmonicsDegree = section.sphericalHarmonicsDegree;\n            }\n        }\n        return minSphericalHarmonicsDegree;\n    }\n\n    getBucketIndex(section, localSplatIndex) {\n        let bucketIndex;\n        const maxSplatIndexInFullBuckets = section.fullBucketCount * section.bucketSize;\n        if (localSplatIndex < maxSplatIndexInFullBuckets) {\n            bucketIndex = Math.floor(localSplatIndex / section.bucketSize);\n        } else {\n            let bucketSplatIndex = maxSplatIndexInFullBuckets;\n            bucketIndex = section.fullBucketCount;\n            let partiallyFullBucketIndex = 0;\n            while (bucketSplatIndex < section.splatCount) {\n                let currentPartiallyFilledBucketSize = section.partiallyFilledBucketLengths[partiallyFullBucketIndex];\n                if (localSplatIndex >= bucketSplatIndex && localSplatIndex < bucketSplatIndex + currentPartiallyFilledBucketSize) {\n                    break;\n                }\n                bucketSplatIndex += currentPartiallyFilledBucketSize;\n                bucketIndex++;\n                partiallyFullBucketIndex++;\n            }\n        }\n        return bucketIndex;\n    }\n\n    getSplatCenter(globalSplatIndex, outCenter, transform) {\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n        const section = this.sections[sectionIndex];\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n\n        const srcSplatCentersBase = section.bytesPerSplat * localSplatIndex;\n        const dataView = new DataView(this.bufferData, section.dataBase + srcSplatCentersBase);\n\n        const x = dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel);\n        const y = dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel);\n        const z = dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel);\n        if (this.compressionLevel >= 1) {\n            const bucketIndex = this.getBucketIndex(section, localSplatIndex);\n            const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\n            const sf = section.compressionScaleFactor;\n            const sr = section.compressionScaleRange;\n            outCenter.x = (x - sr) * sf + section.bucketArray[bucketBase];\n            outCenter.y = (y - sr) * sf + section.bucketArray[bucketBase + 1];\n            outCenter.z = (z - sr) * sf + section.bucketArray[bucketBase + 2];\n        } else {\n            outCenter.x = x;\n            outCenter.y = y;\n            outCenter.z = z;\n        }\n        if (transform) outCenter.applyMatrix4(transform);\n    }\n\n    getSplatScaleAndRotation = function() {\n\n        const scaleMatrix = new THREE.Matrix4();\n        const rotationMatrix = new THREE.Matrix4();\n        const tempMatrix = new THREE.Matrix4();\n        const tempPosition = new THREE.Vector3();\n        const scale = new THREE.Vector3();\n        const rotation = new THREE.Quaternion();\n\n        return function(index, outScale, outRotation, transform) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[index];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = index - section.splatCountOffset;\n\n            const srcSplatScalesBase = section.bytesPerSplat * localSplatIndex +\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\n\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatScalesBase);\n\n            scale.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel), this.compressionLevel),\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel), this.compressionLevel),\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel), this.compressionLevel));\n\n            rotation.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel), this.compressionLevel));\n\n            if (transform) {\n                scaleMatrix.makeScale(scale.x, scale.y, scale.z);\n                rotationMatrix.makeRotationFromQuaternion(rotation);\n                tempMatrix.copy(scaleMatrix).multiply(rotationMatrix).multiply(transform);\n                tempMatrix.decompose(tempPosition, outRotation, outScale);\n            } else {\n                outScale.copy(scale);\n                outRotation.copy(rotation);\n            }\n        };\n\n    }();\n\n    getSplatColor(globalSplatIndex, outColor) {\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n        const section = this.sections[sectionIndex];\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n\n        const srcSplatColorsBase = section.bytesPerSplat * localSplatIndex +\n                                   SplatBuffer.CompressionLevels[this.compressionLevel].ColorOffsetBytes;\n        const splatColorsArray = new Uint8Array(this.bufferData, section.dataBase + srcSplatColorsBase, 4);\n\n        outColor.set(splatColorsArray[0], splatColorsArray[1],\n                     splatColorsArray[2], splatColorsArray[3]);\n    }\n\n    fillSplatCenterArray(outCenterArray, transform, srcFrom, srcTo, destFrom) {\n        const splatCount = this.splatCount;\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n\n        const center = new THREE.Vector3();\n        for (let i = srcFrom; i <= srcTo; i++) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n            const centerDestBase = (i - srcFrom + destFrom) * SplatBuffer.CenterComponentCount;\n\n            const srcSplatCentersBase = section.bytesPerSplat * localSplatIndex;\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatCentersBase);\n\n            const x = dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel);\n            const y = dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel);\n            const z = dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel);\n            if (this.compressionLevel >= 1) {\n                const bucketIndex = this.getBucketIndex(section, localSplatIndex);\n                const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\n                const sf = section.compressionScaleFactor;\n                const sr = section.compressionScaleRange;\n                center.x = (x - sr) * sf + section.bucketArray[bucketBase];\n                center.y = (y - sr) * sf + section.bucketArray[bucketBase + 1];\n                center.z = (z - sr) * sf + section.bucketArray[bucketBase + 2];\n            } else {\n                center.x = x;\n                center.y = y;\n                center.z = z;\n            }\n            if (transform) {\n                center.applyMatrix4(transform);\n            }\n            outCenterArray[centerDestBase] = center.x;\n            outCenterArray[centerDestBase + 1] = center.y;\n            outCenterArray[centerDestBase + 2] = center.z;\n        }\n    }\n\n    static computeCovariance = function() {\n\n        const tempMatrix4 = new THREE.Matrix4();\n        const scaleMatrix = new THREE.Matrix3();\n        const rotationMatrix = new THREE.Matrix3();\n        const covarianceMatrix = new THREE.Matrix3();\n        const transformedCovariance = new THREE.Matrix3();\n        const transform3x3 = new THREE.Matrix3();\n        const transform3x3Transpose = new THREE.Matrix3();\n\n        return function(scale, rotation, transform, outCovariance, outOffset = 0, desiredOutputCompressionLevel) {\n\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\n            scaleMatrix.setFromMatrix4(tempMatrix4);\n\n            tempMatrix4.makeRotationFromQuaternion(rotation);\n            rotationMatrix.setFromMatrix4(tempMatrix4);\n\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\n            transformedCovariance.copy(covarianceMatrix).transpose().premultiply(covarianceMatrix);\n\n            if (transform) {\n                transform3x3.setFromMatrix4(transform);\n                transform3x3Transpose.copy(transform3x3).transpose();\n                transformedCovariance.multiply(transform3x3Transpose);\n                transformedCovariance.premultiply(transform3x3);\n            }\n\n            if (desiredOutputCompressionLevel >= 1) {\n                outCovariance[outOffset] = toHalfFloat(transformedCovariance.elements[0]);\n                outCovariance[outOffset + 1] = toHalfFloat(transformedCovariance.elements[3]);\n                outCovariance[outOffset + 2] = toHalfFloat(transformedCovariance.elements[6]);\n                outCovariance[outOffset + 3] = toHalfFloat(transformedCovariance.elements[4]);\n                outCovariance[outOffset + 4] = toHalfFloat(transformedCovariance.elements[7]);\n                outCovariance[outOffset + 5] = toHalfFloat(transformedCovariance.elements[8]);\n            } else {\n                outCovariance[outOffset] = transformedCovariance.elements[0];\n                outCovariance[outOffset + 1] = transformedCovariance.elements[3];\n                outCovariance[outOffset + 2] = transformedCovariance.elements[6];\n                outCovariance[outOffset + 3] = transformedCovariance.elements[4];\n                outCovariance[outOffset + 4] = transformedCovariance.elements[7];\n                outCovariance[outOffset + 5] = transformedCovariance.elements[8];\n            }\n\n        };\n\n    }();\n\n    fillSplatCovarianceArray(covarianceArray, transform, srcFrom, srcTo, destFrom, desiredOutputCompressionLevel) {\n        const splatCount = this.splatCount;\n\n        const scale = new THREE.Vector3();\n        const rotation = new THREE.Quaternion();\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n\n        for (let i = srcFrom; i <= srcTo; i++) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n\n            const covarianceDestBase = (i - srcFrom + destFrom) * SplatBuffer.CovarianceComponentCount;\n            const srcSplatScalesBase = section.bytesPerSplat * localSplatIndex +\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\n\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatScalesBase);\n\n            scale.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel), this.compressionLevel),\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel), this.compressionLevel),\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel), this.compressionLevel));\n            rotation.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel), this.compressionLevel));\n\n            SplatBuffer.computeCovariance(scale, rotation, transform, covarianceArray, covarianceDestBase, desiredOutputCompressionLevel);\n        }\n    }\n\n    fillSplatColorArray(outColorArray, minimumAlpha, srcFrom, srcTo, destFrom) {\n        const splatCount = this.splatCount;\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n\n        for (let i = srcFrom; i <= srcTo; i++) {\n\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n\n            const colorDestBase = (i - srcFrom + destFrom) * SplatBuffer.ColorComponentCount;\n            const srcSplatColorsBase = section.bytesPerSplat * localSplatIndex +\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ColorOffsetBytes;\n\n            const dataView = new Uint8Array(this.bufferData, section.dataBase + srcSplatColorsBase);\n\n            let alpha = dataView[3];\n            alpha = (alpha >= minimumAlpha) ? alpha : 0;\n\n            outColorArray[colorDestBase] = dataView[0];\n            outColorArray[colorDestBase + 1] = dataView[1];\n            outColorArray[colorDestBase + 2] = dataView[2];\n            outColorArray[colorDestBase + 3] = alpha;\n        }\n    }\n\n    fillSphericalHarmonicsArray = function() {\n\n        const sphericalHarmonicVectors = [];\n        for (let i = 0; i < 15; i++) {\n            sphericalHarmonicVectors[i] = new THREE.Vector3();\n        }\n\n        const tempMatrix3 = new THREE.Matrix3();\n\n        const sh11 = [];\n        const sh12 = [];\n        const sh13 = [];\n\n        const sh21 = [];\n        const sh22 = [];\n        const sh23 = [];\n        const sh24 = [];\n        const sh25 = [];\n\n        const shIn1 = [];\n        const shIn2 = [];\n        const shIn3 = [];\n        const shIn4 = [];\n        const shIn5 = [];\n\n        const shOut1 = [];\n        const shOut2 = [];\n        const shOut3 = [];\n        const shOut4 = [];\n        const shOut5 = [];\n\n        const noop = (v) => v;\n\n        const set3 = (array, val1, val2, val3) => {\n            array[0] = val1;\n            array[1] = val2;\n            array[2] = val3;\n        };\n\n        const set3FromArray = (array, srcDestView, stride, srcBase, compressionLevel) => {\n            array[0] = dataViewFloatForCompressionLevel(srcDestView, srcBase, compressionLevel, true);\n            array[1] = dataViewFloatForCompressionLevel(srcDestView, srcBase + stride, compressionLevel, true);\n            array[2] = dataViewFloatForCompressionLevel(srcDestView, srcBase + stride + stride, compressionLevel, true);\n        };\n\n        const copy3 = (srcArray, destArray) => {\n            destArray[0] = srcArray[0];\n            destArray[1] = srcArray[1];\n            destArray[2] = srcArray[2];\n        };\n\n        const setOutput3 = (srcArray, destArray, destBase, conversionFunc) => {\n            destArray[destBase] = conversionFunc(srcArray[0]);\n            destArray[destBase + 1] = conversionFunc(srcArray[1]);\n            destArray[destBase + 2] = conversionFunc(srcArray[2]);\n        };\n\n        const toUncompressedFloatArray3 = (src, dest, compressionLevel) => {\n            dest[0] = toUncompressedFloat(src[0], compressionLevel, true);\n            dest[1] = toUncompressedFloat(src[1], compressionLevel, true);\n            dest[2] = toUncompressedFloat(src[2], compressionLevel, true);\n            return dest;\n        };\n\n        return function(outSphericalHarmonicsArray, outSphericalHarmonicsDegree, transform,\n                        srcFrom, srcTo, destFrom, desiredOutputCompressionLevel) {\n            const splatCount = this.splatCount;\n\n            srcFrom = srcFrom || 0;\n            srcTo = srcTo || splatCount - 1;\n            if (destFrom === undefined) destFrom = srcFrom;\n\n            if (transform && outSphericalHarmonicsDegree >= 1) {\n                tempMatrix3.setFromMatrix4(transform);\n                set3(sh11, tempMatrix3.elements[4], -tempMatrix3.elements[7], tempMatrix3.elements[1]);\n                set3(sh12, -tempMatrix3.elements[5], tempMatrix3.elements[8], -tempMatrix3.elements[2]);\n                set3(sh13, tempMatrix3.elements[3], -tempMatrix3.elements[6], tempMatrix3.elements[0]);\n            }\n\n            for (let i = srcFrom; i <= srcTo; i++) {\n\n                const sectionIndex = this.globalSplatIndexToSectionMap[i];\n                const section = this.sections[sectionIndex];\n                outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, section.sphericalHarmonicsDegree);\n                const outSphericalHarmonicsComponentsCount = getSphericalHarmonicsComponentCountForDegree(outSphericalHarmonicsDegree);\n\n                const localSplatIndex = i - section.splatCountOffset;\n\n                const srcSplatSHBase = section.bytesPerSplat * localSplatIndex +\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].SphericalHarmonicsOffsetBytes;\n\n                const dataView = new DataView(this.bufferData, section.dataBase + srcSplatSHBase);\n\n                const shDestBase = (i - srcFrom + destFrom) * outSphericalHarmonicsComponentsCount;\n\n                let compressionLevelForOutputConversion = transform ? 0 : this.compressionLevel;\n                let outputConversionFunc = noop;\n                if (compressionLevelForOutputConversion !== desiredOutputCompressionLevel) {\n                    if (compressionLevelForOutputConversion === 1) {\n                        if (desiredOutputCompressionLevel === 0) outputConversionFunc = fromHalfFloat;\n                        else if (desiredOutputCompressionLevel == 2) outputConversionFunc = fromHalfFloatToUint8;\n                    } else if (compressionLevelForOutputConversion === 0) {\n                        if (desiredOutputCompressionLevel === 1) outputConversionFunc = toHalfFloat;\n                        else if (desiredOutputCompressionLevel == 2) outputConversionFunc = toUint8;\n                    }\n                }\n\n                if (outSphericalHarmonicsDegree >= 1) {\n\n                    set3FromArray(shIn1, dataView, 3, 0, this.compressionLevel);\n                    set3FromArray(shIn2, dataView, 3, 1, this.compressionLevel);\n                    set3FromArray(shIn3, dataView, 3, 2, this.compressionLevel);\n\n                    if (transform) {\n                        toUncompressedFloatArray3(shIn1, shIn1, this.compressionLevel);\n                        toUncompressedFloatArray3(shIn2, shIn2, this.compressionLevel);\n                        toUncompressedFloatArray3(shIn3, shIn3, this.compressionLevel);\n                        SplatBuffer.rotateSphericalHarmonics3(shIn1, shIn2, shIn3, sh11, sh12, sh13, shOut1, shOut2, shOut3);\n                    } else {\n                        copy3(shIn1, shOut1);\n                        copy3(shIn2, shOut2);\n                        copy3(shIn3, shOut3);\n                    }\n\n                    setOutput3(shOut1, outSphericalHarmonicsArray, shDestBase, outputConversionFunc);\n                    setOutput3(shOut2, outSphericalHarmonicsArray, shDestBase + 3, outputConversionFunc);\n                    setOutput3(shOut3, outSphericalHarmonicsArray, shDestBase + 6, outputConversionFunc);\n\n                    if (outSphericalHarmonicsDegree >= 2) {\n\n                        set3FromArray(shIn1, dataView, 5, 9, this.compressionLevel);\n                        set3FromArray(shIn2, dataView, 5, 10, this.compressionLevel);\n                        set3FromArray(shIn3, dataView, 5, 11, this.compressionLevel);\n                        set3FromArray(shIn4, dataView, 5, 12, this.compressionLevel);\n                        set3FromArray(shIn5, dataView, 5, 13, this.compressionLevel);\n\n                        if (transform) {\n                            toUncompressedFloatArray3(shIn1, shIn1, this.compressionLevel);\n                            toUncompressedFloatArray3(shIn2, shIn2, this.compressionLevel);\n                            toUncompressedFloatArray3(shIn3, shIn3, this.compressionLevel);\n                            toUncompressedFloatArray3(shIn4, shIn4, this.compressionLevel);\n                            toUncompressedFloatArray3(shIn5, shIn5, this.compressionLevel);\n                            SplatBuffer.rotateSphericalHarmonics5(shIn1, shIn2, shIn3, shIn4, shIn5,\n                                                                  sh11, sh12, sh13, sh21, sh22, sh23, sh24, sh25,\n                                                                  shOut1, shOut2, shOut3, shOut4, shOut5);\n                        } else {\n                            copy3(shIn1, shOut1);\n                            copy3(shIn2, shOut2);\n                            copy3(shIn3, shOut3);\n                            copy3(shIn4, shOut4);\n                            copy3(shIn5, shOut5);\n                        }\n\n                        setOutput3(shOut1, outSphericalHarmonicsArray, shDestBase + 9, outputConversionFunc);\n                        setOutput3(shOut2, outSphericalHarmonicsArray, shDestBase + 12, outputConversionFunc);\n                        setOutput3(shOut3, outSphericalHarmonicsArray, shDestBase + 15, outputConversionFunc);\n                        setOutput3(shOut4, outSphericalHarmonicsArray, shDestBase + 18, outputConversionFunc);\n                        setOutput3(shOut5, outSphericalHarmonicsArray, shDestBase + 21, outputConversionFunc);\n                    }\n                }\n            }\n        };\n\n    }();\n\n    static dot3 = (v1, v2, v3, transformRow, outArray) => {\n        outArray[0] = outArray[1] = outArray[2] = 0;\n        const t0 = transformRow[0];\n        const t1 = transformRow[1];\n        const t2 = transformRow[2];\n        SplatBuffer.addInto3(v1[0] * t0, v1[1] * t0, v1[2] * t0, outArray);\n        SplatBuffer.addInto3(v2[0] * t1, v2[1] * t1, v2[2] * t1, outArray);\n        SplatBuffer.addInto3(v3[0] * t2, v3[1] * t2, v3[2] * t2, outArray);\n    };\n\n    static addInto3 = (val1, val2, val3, destArray) => {\n        destArray[0] = destArray[0] + val1;\n        destArray[1] = destArray[1] + val2;\n        destArray[2] = destArray[2] + val3;\n    };\n\n    static dot5 = (v1, v2, v3, v4, v5, transformRow, outArray) => {\n        outArray[0] = outArray[1] = outArray[2] = 0;\n        const t0 = transformRow[0];\n        const t1 = transformRow[1];\n        const t2 = transformRow[2];\n        const t3 = transformRow[3];\n        const t4 = transformRow[4];\n        SplatBuffer.addInto3(v1[0] * t0, v1[1] * t0, v1[2] * t0, outArray);\n        SplatBuffer.addInto3(v2[0] * t1, v2[1] * t1, v2[2] * t1, outArray);\n        SplatBuffer.addInto3(v3[0] * t2, v3[1] * t2, v3[2] * t2, outArray);\n        SplatBuffer.addInto3(v4[0] * t3, v4[1] * t3, v4[2] * t3, outArray);\n        SplatBuffer.addInto3(v5[0] * t4, v5[1] * t4, v5[2] * t4, outArray);\n    };\n\n    static rotateSphericalHarmonics3 = (in1, in2, in3, tsh11, tsh12, tsh13, out1, out2, out3) => {\n        SplatBuffer.dot3(in1, in2, in3, tsh11, out1);\n        SplatBuffer.dot3(in1, in2, in3, tsh12, out2);\n        SplatBuffer.dot3(in1, in2, in3, tsh13, out3);\n    };\n\n    static rotateSphericalHarmonics5 = (in1, in2, in3, in4, in5, tsh11, tsh12, tsh13,\n                                        tsh21, tsh22, tsh23, tsh24, tsh25, out1, out2, out3, out4, out5) => {\n\n        const kSqrt0104 = Math.sqrt(1.0 / 4.0);\n        const kSqrt0304 = Math.sqrt(3.0 / 4.0);\n        const kSqrt0103 = Math.sqrt(1.0 / 3.0);\n        const kSqrt0403 = Math.sqrt(4.0 / 3.0);\n        const kSqrt0112 = Math.sqrt(1.0 / 12.0);\n\n        tsh21[0] = kSqrt0104 * ((tsh13[2] * tsh11[0] + tsh13[0] * tsh11[2]) + (tsh11[2] * tsh13[0] + tsh11[0] * tsh13[2]));\n        tsh21[1] = (tsh13[1] * tsh11[0] + tsh11[1] * tsh13[0]);\n        tsh21[2] = kSqrt0304 * (tsh13[1] * tsh11[1] + tsh11[1] * tsh13[1]);\n        tsh21[3] = (tsh13[1] * tsh11[2] + tsh11[1] * tsh13[2]);\n        tsh21[4] = kSqrt0104 * ((tsh13[2] * tsh11[2] - tsh13[0] * tsh11[0]) + (tsh11[2] * tsh13[2] - tsh11[0] * tsh13[0]));\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh21, out1);\n\n        tsh22[0] = kSqrt0104 * ((tsh12[2] * tsh11[0] + tsh12[0] * tsh11[2]) + (tsh11[2] * tsh12[0] + tsh11[0] * tsh12[2]));\n        tsh22[1] = tsh12[1] * tsh11[0] + tsh11[1] * tsh12[0];\n        tsh22[2] = kSqrt0304 * (tsh12[1] * tsh11[1] + tsh11[1] * tsh12[1]);\n        tsh22[3] = tsh12[1] * tsh11[2] + tsh11[1] * tsh12[2];\n        tsh22[4] = kSqrt0104 * ((tsh12[2] * tsh11[2] - tsh12[0] * tsh11[0]) + (tsh11[2] * tsh12[2] - tsh11[0] * tsh12[0]));\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh22, out2);\n\n        tsh23[0] = kSqrt0103 * (tsh12[2] * tsh12[0] + tsh12[0] * tsh12[2]) + -kSqrt0112 *\n                   ((tsh13[2] * tsh13[0] + tsh13[0] * tsh13[2]) + (tsh11[2] * tsh11[0] + tsh11[0] * tsh11[2]));\n        tsh23[1] = kSqrt0403 * tsh12[1] * tsh12[0] + -kSqrt0103 * (tsh13[1] * tsh13[0] + tsh11[1] * tsh11[0]);\n        tsh23[2] = tsh12[1] * tsh12[1] + -kSqrt0104 * (tsh13[1] * tsh13[1] + tsh11[1] * tsh11[1]);\n        tsh23[3] = kSqrt0403 * tsh12[1] * tsh12[2] + -kSqrt0103 * (tsh13[1] * tsh13[2] + tsh11[1] * tsh11[2]);\n        tsh23[4] = kSqrt0103 * (tsh12[2] * tsh12[2] - tsh12[0] * tsh12[0]) + -kSqrt0112 *\n                   ((tsh13[2] * tsh13[2] - tsh13[0] * tsh13[0]) + (tsh11[2] * tsh11[2] - tsh11[0] * tsh11[0]));\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh23, out3);\n\n        tsh24[0] = kSqrt0104 * ((tsh12[2] * tsh13[0] + tsh12[0] * tsh13[2]) + (tsh13[2] * tsh12[0] + tsh13[0] * tsh12[2]));\n        tsh24[1] = tsh12[1] * tsh13[0] + tsh13[1] * tsh12[0];\n        tsh24[2] = kSqrt0304 * (tsh12[1] * tsh13[1] + tsh13[1] * tsh12[1]);\n        tsh24[3] = tsh12[1] * tsh13[2] + tsh13[1] * tsh12[2];\n        tsh24[4] = kSqrt0104 * ((tsh12[2] * tsh13[2] - tsh12[0] * tsh13[0]) + (tsh13[2] * tsh12[2] - tsh13[0] * tsh12[0]));\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh24, out4);\n\n        tsh25[0] = kSqrt0104 * ((tsh13[2] * tsh13[0] + tsh13[0] * tsh13[2]) - (tsh11[2] * tsh11[0] + tsh11[0] * tsh11[2]));\n        tsh25[1] = (tsh13[1] * tsh13[0] - tsh11[1] * tsh11[0]);\n        tsh25[2] = kSqrt0304 * (tsh13[1] * tsh13[1] - tsh11[1] * tsh11[1]);\n        tsh25[3] = (tsh13[1] * tsh13[2] - tsh11[1] * tsh11[2]);\n        tsh25[4] = kSqrt0104 * ((tsh13[2] * tsh13[2] - tsh13[0] * tsh13[0]) - (tsh11[2] * tsh11[2] - tsh11[0] * tsh11[0]));\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh25, out5);\n    };\n\n    static parseHeader(buffer) {\n        const headerArrayUint8 = new Uint8Array(buffer, 0, SplatBuffer.HeaderSizeBytes);\n        const headerArrayUint16 = new Uint16Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 2);\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        const headerArrayFloat32 = new Float32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        const versionMajor = headerArrayUint8[0];\n        const versionMinor = headerArrayUint8[1];\n        const maxSectionCount = headerArrayUint32[1];\n        const sectionCount = headerArrayUint32[2];\n        const maxSplatCount = headerArrayUint32[3];\n        const splatCount = headerArrayUint32[4];\n        const compressionLevel = headerArrayUint16[10];\n        const sceneCenter = new THREE.Vector3(headerArrayFloat32[6], headerArrayFloat32[7], headerArrayFloat32[8]);\n\n        return {\n            versionMajor,\n            versionMinor,\n            maxSectionCount,\n            sectionCount,\n            maxSplatCount,\n            splatCount,\n            compressionLevel,\n            sceneCenter\n        };\n    }\n\n    static writeHeaderCountsToBuffer(sectionCount, splatCount, buffer) {\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        headerArrayUint32[2] = sectionCount;\n        headerArrayUint32[4] = splatCount;\n    }\n\n    static writeHeaderToBuffer(header, buffer) {\n        const headerArrayUint8 = new Uint8Array(buffer, 0, SplatBuffer.HeaderSizeBytes);\n        const headerArrayUint16 = new Uint16Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 2);\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        const headerArrayFloat32 = new Float32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        headerArrayUint8[0] = header.versionMajor;\n        headerArrayUint8[1] = header.versionMinor;\n        headerArrayUint8[2] = 0; // unused for now\n        headerArrayUint8[3] = 0; // unused for now\n        headerArrayUint32[1] = header.maxSectionCount;\n        headerArrayUint32[2] = header.sectionCount;\n        headerArrayUint32[3] = header.maxSplatCount;\n        headerArrayUint32[4] = header.splatCount;\n        headerArrayUint16[10] = header.compressionLevel;\n        headerArrayFloat32[6] = header.sceneCenter.x;\n        headerArrayFloat32[7] = header.sceneCenter.y;\n        headerArrayFloat32[8] = header.sceneCenter.z;\n    }\n\n    static parseSectionHeaders(header, buffer, offset = 0, secLoadedCountsToMax) {\n        const compressionLevel = header.compressionLevel;\n\n        const maxSectionCount = header.maxSectionCount;\n        const sectionHeaderArrayUint16 = new Uint16Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 2);\n        const sectionHeaderArrayUint32 = new Uint32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\n        const sectionHeaderArrayFloat32 = new Float32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\n\n        const sectionHeaders = [];\n        let sectionHeaderBase = 0;\n        let sectionHeaderBaseUint16 = sectionHeaderBase / 2;\n        let sectionHeaderBaseUint32 = sectionHeaderBase / 4;\n        let sectionBase = SplatBuffer.HeaderSizeBytes + header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes;\n        let splatCountOffset = 0;\n        for (let i = 0; i < maxSectionCount; i++) {\n            const maxSplatCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 1];\n            const bucketSize = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 2];\n            const bucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 3];\n            const bucketBlockSize = sectionHeaderArrayFloat32[sectionHeaderBaseUint32 + 4];\n            const halfBucketBlockSize = bucketBlockSize / 2.0;\n            const bucketStorageSizeBytes = sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 10];\n            const compressionScaleRange = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 6] ||\n                                          SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n            const fullBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 8];\n            const partiallyFilledBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 9];\n            const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n            const bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;\n\n            const sphericalHarmonicsDegree = sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 20];\n            const { bytesPerSplat } = SplatBuffer.calculateComponentStorage(compressionLevel, sphericalHarmonicsDegree);\n\n            const splatDataStorageSizeBytes = bytesPerSplat * maxSplatCount;\n            const storageSizeBytes = splatDataStorageSizeBytes + bucketsStorageSizeBytes;\n            const sectionHeader = {\n                bytesPerSplat: bytesPerSplat,\n                splatCountOffset: splatCountOffset,\n                splatCount: secLoadedCountsToMax ? maxSplatCount : 0,\n                maxSplatCount: maxSplatCount,\n                bucketSize: bucketSize,\n                bucketCount: bucketCount,\n                bucketBlockSize: bucketBlockSize,\n                halfBucketBlockSize: halfBucketBlockSize,\n                bucketStorageSizeBytes: bucketStorageSizeBytes,\n                bucketsStorageSizeBytes: bucketsStorageSizeBytes,\n                splatDataStorageSizeBytes: splatDataStorageSizeBytes,\n                storageSizeBytes: storageSizeBytes,\n                compressionScaleRange: compressionScaleRange,\n                compressionScaleFactor: halfBucketBlockSize / compressionScaleRange,\n                base: sectionBase,\n                bucketsBase: sectionBase + bucketsMetaDataSizeBytes,\n                dataBase: sectionBase + bucketsStorageSizeBytes,\n                fullBucketCount: fullBucketCount,\n                partiallyFilledBucketCount: partiallyFilledBucketCount,\n                sphericalHarmonicsDegree: sphericalHarmonicsDegree\n            };\n            sectionHeaders[i] = sectionHeader;\n            sectionBase += storageSizeBytes;\n            sectionHeaderBase += SplatBuffer.SectionHeaderSizeBytes;\n            sectionHeaderBaseUint16 = sectionHeaderBase / 2;\n            sectionHeaderBaseUint32 = sectionHeaderBase / 4;\n            splatCountOffset += maxSplatCount;\n        }\n\n        return sectionHeaders;\n    }\n\n\n    static writeSectionHeaderToBuffer(sectionHeader, compressionLevel, buffer, offset = 0) {\n        const sectionHeadeArrayUint16 = new Uint16Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 2);\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n        const sectionHeadeArrayFloat32 = new Float32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n\n        sectionHeadeArrayUint32[0] = sectionHeader.splatCount;\n        sectionHeadeArrayUint32[1] = sectionHeader.maxSplatCount;\n        sectionHeadeArrayUint32[2] = compressionLevel >= 1 ? sectionHeader.bucketSize : 0;\n        sectionHeadeArrayUint32[3] = compressionLevel >= 1 ? sectionHeader.bucketCount : 0;\n        sectionHeadeArrayFloat32[4] = compressionLevel >= 1 ? sectionHeader.bucketBlockSize : 0.0;\n        sectionHeadeArrayUint16[10] = compressionLevel >= 1 ? SplatBuffer.BucketStorageSizeBytes : 0;\n        sectionHeadeArrayUint32[6] = compressionLevel >= 1 ? sectionHeader.compressionScaleRange : 0;\n        sectionHeadeArrayUint32[7] = sectionHeader.storageSizeBytes;\n        sectionHeadeArrayUint32[8] = compressionLevel >= 1 ? sectionHeader.fullBucketCount : 0;\n        sectionHeadeArrayUint32[9] = compressionLevel >= 1 ? sectionHeader.partiallyFilledBucketCount : 0;\n        sectionHeadeArrayUint16[20] = sectionHeader.sphericalHarmonicsDegree;\n\n    }\n\n    static writeSectionHeaderSplatCountToBuffer(splatCount, buffer, offset = 0) {\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n        sectionHeadeArrayUint32[0] = splatCount;\n    }\n\n    constructFromBuffer(bufferData, secLoadedCountsToMax) {\n        this.bufferData = bufferData;\n\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSectionMap = [];\n\n        const header = SplatBuffer.parseHeader(this.bufferData);\n        this.versionMajor = header.versionMajor;\n        this.versionMinor = header.versionMinor;\n        this.maxSectionCount = header.maxSectionCount;\n        this.sectionCount = secLoadedCountsToMax ? header.maxSectionCount : 0;\n        this.maxSplatCount = header.maxSplatCount;\n        this.splatCount = secLoadedCountsToMax ? header.maxSplatCount : 0;\n        this.compressionLevel = header.compressionLevel;\n        this.sceneCenter = new THREE.Vector3().copy(header.sceneCenter);\n\n        this.sections = SplatBuffer.parseSectionHeaders(header, this.bufferData, SplatBuffer.HeaderSizeBytes, secLoadedCountsToMax);\n\n        this.linkBufferArrays();\n        this.buildMaps();\n    }\n\n    static calculateComponentStorage(compressionLevel, sphericalHarmonicsDegree) {\n        const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\n        const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n        const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n        const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n        const sphericalHarmonicsComponentsPerSplat = getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\n        const sphericalHarmonicsBytesPerSplat = SplatBuffer.CompressionLevels[compressionLevel].BytesPerSphericalHarmonicsComponent *\n                                                sphericalHarmonicsComponentsPerSplat;\n        const bytesPerSplat = bytesPerCenter + bytesPerScale + bytesPerRotation +\n                              bytesPerColor + sphericalHarmonicsBytesPerSplat;\n        return {\n            bytesPerCenter,\n            bytesPerScale,\n            bytesPerRotation,\n            bytesPerColor,\n            sphericalHarmonicsComponentsPerSplat,\n            sphericalHarmonicsBytesPerSplat,\n            bytesPerSplat\n        };\n    }\n\n    linkBufferArrays() {\n        for (let i = 0; i < this.maxSectionCount; i++) {\n            const section = this.sections[i];\n            section.bucketArray = new Float32Array(this.bufferData, section.bucketsBase,\n                                                   section.bucketCount * SplatBuffer.BucketStorageSizeFloats);\n            if (section.partiallyFilledBucketCount > 0) {\n                section.partiallyFilledBucketLengths = new Uint32Array(this.bufferData, section.base,\n                                                                       section.partiallyFilledBucketCount);\n            }\n        }\n    }\n\n    buildMaps() {\n        let cumulativeSplatCount = 0;\n        for (let i = 0; i < this.maxSectionCount; i++) {\n            const section = this.sections[i];\n            for (let j = 0; j < section.maxSplatCount; j++) {\n                const globalSplatIndex = cumulativeSplatCount + j;\n                this.globalSplatIndexToLocalSplatIndexMap[globalSplatIndex] = j;\n                this.globalSplatIndexToSectionMap[globalSplatIndex] = i;\n            }\n            cumulativeSplatCount += section.maxSplatCount;\n        }\n    }\n\n    updateLoadedCounts(newSectionCount, newSplatCount) {\n        SplatBuffer.writeHeaderCountsToBuffer(newSectionCount, newSplatCount, this.bufferData);\n        this.sectionCount = newSectionCount;\n        this.splatCount = newSplatCount;\n    }\n\n    updateSectionLoadedCounts(sectionIndex, newSplatCount) {\n        const sectionHeaderOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * sectionIndex;\n        SplatBuffer.writeSectionHeaderSplatCountToBuffer(newSplatCount, this.bufferData, sectionHeaderOffset);\n        this.sections[sectionIndex].splatCount = newSplatCount;\n    }\n\n    static generateFromUncompressedSplatArrays(splatArrays, minimumAlpha, compressionLevel,\n                                               sceneCenter, blockSize, bucketSize, options = []) {\n\n        const copyBetweenBuffers = (srcBuffer, srcOffset, destBuffer, destOffset, byteCount = 0) => {\n            const src = new Uint8Array(srcBuffer, srcOffset);\n            const dest = new Uint8Array(destBuffer, destOffset);\n            for (let i = 0; i < byteCount; i++) {\n                dest[i] = src[i];\n            }\n        };\n\n        let sphericalHarmonicsDegree = 0;\n\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\n            const splatArray = splatArrays[sa];\n            if (sa === 0 || splatArray.sphericalHarmonicsDegree < sphericalHarmonicsDegree) {\n                if (sa > 0 && splatArray.sphericalHarmonicsDegree !== sphericalHarmonicsDegree) {\n                    const msg = 'SplatBuffer::generateFromUncompressedSplatArrays() -> ' +\n                                'all splat arrays must have the same spherical harmonics degree.';\n                    throw new Error(msg);\n                }\n                sphericalHarmonicsDegree = splatArray.sphericalHarmonicsDegree;\n            }\n        }\n\n        const {bytesPerCenter, bytesPerScale, bytesPerRotation, bytesPerColor, sphericalHarmonicsComponentsPerSplat,\n              sphericalHarmonicsBytesPerSplat, bytesPerSplat} =\n              SplatBuffer.calculateComponentStorage(compressionLevel, sphericalHarmonicsDegree);\n\n        const compressionScaleRange = SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n\n        const sectionBuffers = [];\n        const sectionHeaderBuffers = [];\n        let totalSplatCount = 0;\n\n        const tempRotation = new THREE.Quaternion();\n\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\n            const splatArray = splatArrays[sa];\n\n            const sectionOptions = options[sa] || {};\n\n            const sectionBlockSize = (sectionOptions.blockSizeFactor || 1) * (blockSize || SplatBuffer.BucketBlockSize);\n            const sectionBucketSize = Math.ceil((sectionOptions.bucketSizeFactor || 1) * (bucketSize || SplatBuffer.BucketSize));\n\n            const validSplats = new UncompressedSplatArray(sphericalHarmonicsDegree);\n\n            for (let i = 0; i < splatArray.splatCount; i++) {\n                const targetSplat = splatArray.splats[i];\n                let alpha;\n                if (targetSplat[UncompressedSplatArray.OFFSET.OPACITY]) {\n                    alpha = targetSplat[UncompressedSplatArray.OFFSET.OPACITY];\n                } else {\n                    alpha = 255;\n                }\n                if (alpha >= minimumAlpha) {\n                    validSplats.addSplat(targetSplat);\n                }\n            }\n\n            const bucketInfo = SplatBuffer.computeBucketsForUncompressedSplatArray(validSplats, sectionBlockSize, sectionBucketSize);\n            const fullBucketCount = bucketInfo.fullBuckets.length;\n            const partiallyFullBucketLengths = bucketInfo.partiallyFullBuckets.map((bucket) => bucket.splats.length);\n            const partiallyFilledBucketCount = partiallyFullBucketLengths.length;\n            const buckets = [...bucketInfo.fullBuckets, ...bucketInfo.partiallyFullBuckets];\n\n            const sectionDataSizeBytes = validSplats.splats.length * bytesPerSplat;\n            const bucketMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n            const bucketDataBytes = compressionLevel >= 1 ? buckets.length *\n                                                            SplatBuffer.BucketStorageSizeBytes + bucketMetaDataSizeBytes : 0;\n            const sectionSizeBytes = sectionDataSizeBytes + bucketDataBytes;\n            const sectionBuffer = new ArrayBuffer(sectionSizeBytes);\n\n            const blockHalfSize = sectionBlockSize / 2.0;\n            const compressionScaleFactor = compressionScaleRange / blockHalfSize;\n            const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\n\n            const tempCenterBuffer = new ArrayBuffer(bytesPerCenter);\n            const tempScaleBuffer = new ArrayBuffer(bytesPerScale);\n            const tempRotationBuffer = new ArrayBuffer(bytesPerRotation);\n            const tempColorBuffer = new ArrayBuffer(bytesPerColor);\n            const tempSHBuffer = new ArrayBuffer(sphericalHarmonicsBytesPerSplat);\n\n            const bucketCenter = new THREE.Vector3();\n            const bucketCenterDelta = new THREE.Vector3();\n            let outSplatCount = 0;\n            for (let b = 0; b < buckets.length; b++) {\n                const bucket = buckets[b];\n                bucketCenter.fromArray(bucket.center);\n                for (let i = 0; i < bucket.splats.length; i++) {\n                    let row = bucket.splats[i];\n                    const targetSplat = validSplats.splats[row];\n\n                    const centerBase = bucketDataBytes + outSplatCount * bytesPerSplat;\n                    const scaleBase = centerBase + bytesPerCenter;\n                    const rotationBase = scaleBase + bytesPerScale;\n                    const colorBase = rotationBase + bytesPerRotation;\n                    const sphericalHarmonicsBase = colorBase + bytesPerColor;\n                    if (compressionLevel === 0) {\n                        const center = new Float32Array(sectionBuffer, centerBase, SplatBuffer.CenterComponentCount);\n                        const rot = new Float32Array(sectionBuffer, rotationBase, SplatBuffer.RotationComponentCount);\n                        const scale = new Float32Array(sectionBuffer, scaleBase, SplatBuffer.ScaleComponentCount);\n                        if (targetSplat[UncompressedSplatArray.OFFSET.SCALE0] !== undefined) {\n                            tempRotation.set(targetSplat[UncompressedSplatArray.OFFSET.ROTATION0],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION1],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION2],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION3]);\n                            tempRotation.normalize();\n                            rot.set([tempRotation.x, tempRotation.y, tempRotation.z, tempRotation.w]);\n                            scale.set([targetSplat[UncompressedSplatArray.OFFSET.SCALE0],\n                                       targetSplat[UncompressedSplatArray.OFFSET.SCALE1],\n                                       targetSplat[UncompressedSplatArray.OFFSET.SCALE2]]);\n                        } else {\n                            rot.set([1.0, 0.0, 0.0, 0.0]);\n                            scale.set([0.01, 0.01, 0.01]);\n                        }\n                        center.set([targetSplat[UncompressedSplatArray.OFFSET.X],\n                                    targetSplat[UncompressedSplatArray.OFFSET.Y],\n                                    targetSplat[UncompressedSplatArray.OFFSET.Z]]);\n                        if (sphericalHarmonicsDegree > 0) {\n                           const shOut = new Float32Array(sectionBuffer, sphericalHarmonicsBase, sphericalHarmonicsComponentsPerSplat);\n                           if (sphericalHarmonicsDegree >= 1) {\n                                for (let s = 0; s < 9; s++) shOut[s] = targetSplat[UncompressedSplatArray.OFFSET.FRC0 + s];\n                                if (sphericalHarmonicsDegree >= 2) {\n                                    for (let s = 0; s < 15; s++) shOut[s + 9] = targetSplat[UncompressedSplatArray.OFFSET.FRC9 + s];\n                                }\n                           }\n                        }\n                    } else {\n                        const center = new Uint16Array(tempCenterBuffer, 0, SplatBuffer.CenterComponentCount);\n                        const rot = new Uint16Array(tempRotationBuffer, 0, SplatBuffer.RotationComponentCount);\n                        const scale = new Uint16Array(tempScaleBuffer, 0, SplatBuffer.ScaleComponentCount);\n\n                        if (targetSplat[UncompressedSplatArray.OFFSET.SCALE0] !== undefined) {\n                            tempRotation.set(targetSplat[UncompressedSplatArray.OFFSET.ROTATION0],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION1],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION2],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION3]);\n                            tempRotation.normalize();\n                            rot.set([toHalfFloat(tempRotation.x), toHalfFloat(tempRotation.y),\n                                     toHalfFloat(tempRotation.z), toHalfFloat(tempRotation.w)]);\n                            scale.set([toHalfFloat(targetSplat[UncompressedSplatArray.OFFSET.SCALE0]),\n                                       toHalfFloat(targetSplat[UncompressedSplatArray.OFFSET.SCALE1]),\n                                       toHalfFloat(targetSplat[UncompressedSplatArray.OFFSET.SCALE2])]);\n                        } else {\n                            rot.set([toHalfFloat(1.), 0, 0, 0]);\n                            scale.set([toHalfFloat(0.01), toHalfFloat(0.01), toHalfFloat(0.01)]);\n                        }\n                        bucketCenterDelta.set(targetSplat[UncompressedSplatArray.OFFSET.X],\n                                              targetSplat[UncompressedSplatArray.OFFSET.Y],\n                                              targetSplat[UncompressedSplatArray.OFFSET.Z]).sub(bucketCenter);\n                        bucketCenterDelta.x = Math.round(bucketCenterDelta.x * compressionScaleFactor) + compressionScaleRange;\n                        bucketCenterDelta.x = clamp(bucketCenterDelta.x, 0, doubleCompressionScaleRange);\n                        bucketCenterDelta.y = Math.round(bucketCenterDelta.y * compressionScaleFactor) + compressionScaleRange;\n                        bucketCenterDelta.y = clamp(bucketCenterDelta.y, 0, doubleCompressionScaleRange);\n                        bucketCenterDelta.z = Math.round(bucketCenterDelta.z * compressionScaleFactor) + compressionScaleRange;\n                        bucketCenterDelta.z = clamp(bucketCenterDelta.z, 0, doubleCompressionScaleRange);\n                        center.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\n                        if (sphericalHarmonicsDegree > 0) {\n                            const SHArrayType = compressionLevel === 1 ? Uint16Array : Uint8Array;\n                            const bytesPerSHComponent = compressionLevel === 1 ? 2 : 1;\n                            const shOut = new SHArrayType(tempSHBuffer, 0, sphericalHarmonicsComponentsPerSplat);\n                            if (sphericalHarmonicsDegree >= 1) {\n                                for (let s = 0; s < 9; s++) {\n                                    const srcVal = targetSplat[UncompressedSplatArray.OFFSET.FRC0 + s];\n                                    shOut[s] = compressionLevel === 1 ? toHalfFloat(srcVal) : toUint8(srcVal);\n                                }\n                                const degree1ByteCount = 9 * bytesPerSHComponent;\n                                copyBetweenBuffers(shOut.buffer, 0, sectionBuffer, sphericalHarmonicsBase, degree1ByteCount);\n                                if (sphericalHarmonicsDegree >= 2) {\n                                    for (let s = 0; s < 15; s++) {\n                                        const srcVal = targetSplat[UncompressedSplatArray.OFFSET.FRC9 + s];\n                                        shOut[s + 9] = compressionLevel === 1 ? toHalfFloat(srcVal) : toUint8(srcVal);\n                                    }\n                                    const degree2ByteCount = 15 * bytesPerSHComponent;\n                                    copyBetweenBuffers(shOut.buffer, degree1ByteCount, sectionBuffer,\n                                                       sphericalHarmonicsBase + degree1ByteCount, degree2ByteCount);\n                                }\n                            }\n                        }\n\n                        copyBetweenBuffers(center.buffer, 0, sectionBuffer, centerBase, 6);\n                        copyBetweenBuffers(scale.buffer, 0, sectionBuffer, scaleBase, 6);\n                        copyBetweenBuffers(rot.buffer, 0, sectionBuffer, rotationBase, 8);\n                    }\n\n                    const rgba = new Uint8ClampedArray(tempColorBuffer, 0, 4);\n\n                    if (targetSplat[UncompressedSplatArray.OFFSET.FDC0] !== undefined) {\n                        rgba.set([targetSplat[UncompressedSplatArray.OFFSET.FDC0],\n                                  targetSplat[UncompressedSplatArray.OFFSET.FDC1],\n                                  targetSplat[UncompressedSplatArray.OFFSET.FDC2]]);\n                    } else {\n                        rgba.set([255, 0, 0]);\n                    }\n                    if (targetSplat[UncompressedSplatArray.OFFSET.OPACITY] !== undefined) {\n                        rgba[3] = targetSplat[UncompressedSplatArray.OFFSET.OPACITY];\n                    } else {\n                        rgba[3] = 255;\n                    }\n\n                    copyBetweenBuffers(rgba.buffer, 0, sectionBuffer, colorBase, 4);\n\n                    outSplatCount++;\n                }\n            }\n            totalSplatCount += outSplatCount;\n\n            if (compressionLevel >= 1) {\n                const bucketMetaDataArray = new Uint32Array(sectionBuffer, 0, partiallyFullBucketLengths.length * 4);\n                for (let pfb = 0; pfb < partiallyFullBucketLengths.length; pfb ++) {\n                    bucketMetaDataArray[pfb] = partiallyFullBucketLengths[pfb];\n                }\n                const bucketArray = new Float32Array(sectionBuffer, bucketMetaDataSizeBytes,\n                                                     buckets.length * SplatBuffer.BucketStorageSizeFloats);\n                for (let b = 0; b < buckets.length; b++) {\n                    const bucket = buckets[b];\n                    const base = b * 3;\n                    bucketArray[base] = bucket.center[0];\n                    bucketArray[base + 1] = bucket.center[1];\n                    bucketArray[base + 2] = bucket.center[2];\n                }\n            }\n            sectionBuffers.push(sectionBuffer);\n\n            const sectionHeaderBuffer = new ArrayBuffer(SplatBuffer.SectionHeaderSizeBytes);\n            SplatBuffer.writeSectionHeaderToBuffer({\n                maxSplatCount: outSplatCount,\n                splatCount: outSplatCount,\n                bucketSize: sectionBucketSize,\n                bucketCount: buckets.length,\n                bucketBlockSize: sectionBlockSize,\n                compressionScaleRange: compressionScaleRange,\n                storageSizeBytes: sectionSizeBytes,\n                fullBucketCount: fullBucketCount,\n                partiallyFilledBucketCount: partiallyFilledBucketCount,\n                sphericalHarmonicsDegree: sphericalHarmonicsDegree\n            }, compressionLevel, sectionHeaderBuffer, 0);\n            sectionHeaderBuffers.push(sectionHeaderBuffer);\n\n        }\n\n        let sectionsCumulativeSizeBytes = 0;\n        for (let sectionBuffer of sectionBuffers) sectionsCumulativeSizeBytes += sectionBuffer.byteLength;\n        const unifiedBufferSize = SplatBuffer.HeaderSizeBytes +\n                                  SplatBuffer.SectionHeaderSizeBytes * sectionBuffers.length + sectionsCumulativeSizeBytes;\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\n\n        SplatBuffer.writeHeaderToBuffer({\n            versionMajor: 0,\n            versionMinor: 1,\n            maxSectionCount: sectionBuffers.length,\n            sectionCount: sectionBuffers.length,\n            maxSplatCount: totalSplatCount,\n            splatCount: totalSplatCount,\n            compressionLevel: compressionLevel,\n            sceneCenter: sceneCenter\n        }, unifiedBuffer);\n\n        let currentUnifiedBase = SplatBuffer.HeaderSizeBytes;\n        for (let sectionHeaderBuffer of sectionHeaderBuffers) {\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, SplatBuffer.SectionHeaderSizeBytes).set(new Uint8Array(sectionHeaderBuffer));\n            currentUnifiedBase += SplatBuffer.SectionHeaderSizeBytes;\n        }\n\n        for (let sectionBuffer of sectionBuffers) {\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, sectionBuffer.byteLength).set(new Uint8Array(sectionBuffer));\n            currentUnifiedBase += sectionBuffer.byteLength;\n        }\n\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\n        return splatBuffer;\n    }\n\n    static computeBucketsForUncompressedSplatArray(splatArray, blockSize, bucketSize) {\n        let splatCount = splatArray.splatCount;\n        const halfBlockSize = blockSize / 2.0;\n\n        const min = new THREE.Vector3();\n        const max = new THREE.Vector3();\n\n        for (let i = 0; i < splatCount; i++) {\n            const targetSplat = splatArray.splats[i];\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\n            if (i === 0 || center[0] < min.x) min.x = center[0];\n            if (i === 0 || center[0] > max.x) max.x = center[0];\n            if (i === 0 || center[1] < min.y) min.y = center[1];\n            if (i === 0 || center[1] > max.y) max.y = center[1];\n            if (i === 0 || center[2] < min.z) min.z = center[2];\n            if (i === 0 || center[2] > max.z) max.z = center[2];\n        }\n\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\n\n        const blockCenter = new THREE.Vector3();\n        const fullBuckets = [];\n        const partiallyFullBuckets = {};\n\n        for (let i = 0; i < splatCount; i++) {\n            const targetSplat = splatArray.splats[i];\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\n            const xBlock = Math.floor((center[0] - min.x) / blockSize);\n            const yBlock = Math.floor((center[1] - min.y) / blockSize);\n            const zBlock = Math.floor((center[2] - min.z) / blockSize);\n\n            blockCenter.x = xBlock * blockSize + min.x + halfBlockSize;\n            blockCenter.y = yBlock * blockSize + min.y + halfBlockSize;\n            blockCenter.z = zBlock * blockSize + min.z + halfBlockSize;\n\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\n            let bucket = partiallyFullBuckets[bucketId];\n            if (!bucket) {\n                partiallyFullBuckets[bucketId] = bucket = {\n                    'splats': [],\n                    'center': blockCenter.toArray()\n                };\n            }\n\n            bucket.splats.push(i);\n            if (bucket.splats.length >= bucketSize) {\n                fullBuckets.push(bucket);\n                partiallyFullBuckets[bucketId] = null;\n            }\n        }\n\n        const partiallyFullBucketArray = [];\n        for (let bucketId in partiallyFullBuckets) {\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\n                const bucket = partiallyFullBuckets[bucketId];\n                if (bucket) {\n                    partiallyFullBucketArray.push(bucket);\n                }\n            }\n        }\n\n        return {\n            'fullBuckets': fullBuckets,\n            'partiallyFullBuckets': partiallyFullBucketArray,\n        };\n    }\n\n}\n", "import { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { clamp } from '../../Util.js';\nimport * as THREE from 'three';\n\nconst HeaderMagicBytes = new Uint8Array([112, 108, 121, 10]);\nconst HeaderEndTokenBytes = new Uint8Array([10, 101, 110, 100, 95, 104, 101, 97, 100, 101, 114, 10]);\nconst HeaderEndToken = 'end_header';\n\nconst DataTypeMap = new Map([\n  ['char', Int8Array],\n  ['uchar', Uint8Array],\n  ['short', Int16Array],\n  ['ushort', Uint16Array],\n  ['int', Int32Array],\n  ['uint', Uint32Array],\n  ['float', Float32Array],\n  ['double', Float64Array],\n]);\n\nconst unpackUnorm = (value, bits) => {\n  const t = (1 << bits) - 1;\n  return (value & t) / t;\n};\n\nconst unpack111011 = (result, value) => {\n  result.x = unpackUnorm(value >>> 21, 11);\n  result.y = unpackUnorm(value >>> 11, 10);\n  result.z = unpackUnorm(value, 11);\n};\n\nconst unpack8888 = (result, value) => {\n  result.x = unpackUnorm(value >>> 24, 8);\n  result.y = unpackUnorm(value >>> 16, 8);\n  result.z = unpackUnorm(value >>> 8, 8);\n  result.w = unpackUnorm(value, 8);\n};\n\n// unpack quaternion with 2,10,10,10 format (largest element, 3x10bit element)\nconst unpackRot = (result, value) => {\n  const norm = 1.0 / (Math.sqrt(2) * 0.5);\n  const a = (unpackUnorm(value >>> 20, 10) - 0.5) * norm;\n  const b = (unpackUnorm(value >>> 10, 10) - 0.5) * norm;\n  const c = (unpackUnorm(value, 10) - 0.5) * norm;\n  const m = Math.sqrt(1.0 - (a * a + b * b + c * c));\n\n  switch (value >>> 30) {\n    case 0:\n      result.set(m, a, b, c);\n      break;\n    case 1:\n      result.set(a, m, b, c);\n      break;\n    case 2:\n      result.set(a, b, m, c);\n      break;\n    case 3:\n      result.set(a, b, c, m);\n      break;\n  }\n};\n\nconst lerp = (a, b, t) => {\n  return a * (1 - t) + b * t;\n};\n\nconst getElementPropStorage = (element, name) => {\n  return element.properties.find((p) => p.name === name && p.storage)\n    ?.storage;\n};\n\nexport class CompressedPlyParser {\n\n  static decodeHeaderText(headerText) {\n\n    let element;\n    let chunkElement;\n    let vertexElement;\n\n    const headerLines = headerText.split('\\n').filter((line) => !line.startsWith('comment '));\n\n    let bytesPerSplat = 0;\n    let done = false;\n    for (let i = 1; i < headerLines.length; ++i) {\n      const words = headerLines[i].split(' ');\n\n      switch (words[0]) {\n        case 'format':\n          if (words[1] !== 'binary_little_endian') {\n            throw new Error('Unsupported ply format');\n          }\n          break;\n        case 'element':\n          element = {\n            name: words[1],\n            count: parseInt(words[2], 10),\n            properties: [],\n            storageSizeBytes: 0\n          };\n          if (element.name === 'chunk') chunkElement = element;\n          else if (element.name === 'vertex') vertexElement = element;\n          break;\n        case 'property': {\n          if (!DataTypeMap.has(words[1])) {\n            throw new Error(\n              `Unrecognized property data type '${words[1]}' in ply header`\n            );\n          }\n          const StorageType = DataTypeMap.get(words[1]);\n          const storageSizeByes = StorageType.BYTES_PER_ELEMENT * element.count;\n          if (element.name === 'vertex') bytesPerSplat += StorageType.BYTES_PER_ELEMENT;\n          element.properties.push({\n            type: words[1],\n            name: words[2],\n            storage: null,\n            byteSize: StorageType.BYTES_PER_ELEMENT,\n            storageSizeByes: storageSizeByes\n          });\n          element.storageSizeBytes += storageSizeByes;\n          break;\n        }\n        case HeaderEndToken:\n          done = true;\n        break;\n        default:\n          throw new Error(\n            `Unrecognized header value '${words[0]}' in ply header`\n          );\n      }\n      if (done) break;\n    }\n\n    return {\n      'chunkElement': chunkElement,\n      'vertexElement': vertexElement,\n      'bytesPerSplat': bytesPerSplat,\n      'headerSizeBytes': headerText.indexOf(HeaderEndToken) + HeaderEndToken.length + 1,\n    };\n  }\n\n  static decodeHeader(plyBuffer) {\n\n    /**\n     * Searches for the first occurrence of a sequence within a buffer.\n     * @example\n     * find(new Uint8Array([1, 2, 3, 4]), new Uint8Array([3, 4])); // 2\n     * @param {Uint8Array} buf - The buffer in which to search.\n     * @param {Uint8Array} search - The sequence to search for.\n     * @return {number} The index of the first occurrence of the search sequence in the buffer, or -1 if not found.\n     */\n    const find = (buf, search) => {\n      const endIndex = buf.length - search.length;\n      let i;\n      let j;\n      for (i = 0; i <= endIndex; ++i) {\n        for (j = 0; j < search.length; ++j) {\n          if (buf[i + j] !== search[j]) {\n            break;\n          }\n        }\n        if (j === search.length) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n    /**\n     * Checks if array 'a' starts with the same elements as array 'b'.\n     * @example\n     * startsWith(new Uint8Array([1, 2, 3, 4]), new Uint8Array([1, 2])); // true\n     * @param {Uint8Array} a - The array to check against.\n     * @param {Uint8Array} b - The array of elements to look for at the start of 'a'.\n     * @return {boolean} - True if 'a' starts with all elements of 'b', otherwise false.\n     */\n    const startsWith = (a, b) => {\n      if (a.length < b.length) {\n        return false;\n      }\n\n      for (let i = 0; i < b.length; ++i) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    let buf = new Uint8Array(plyBuffer);\n    let endHeaderTokenOffset;\n\n    if (buf.length >= HeaderMagicBytes.length && !startsWith(buf, HeaderMagicBytes)) {\n      throw new Error('Invalid PLY header');\n    }\n\n    endHeaderTokenOffset = find(buf, HeaderEndTokenBytes);\n    if (endHeaderTokenOffset === -1) {\n      throw new Error('End of PLY header not found');\n    }\n\n    const headerText = new TextDecoder('ascii').decode(\n      buf.slice(0, endHeaderTokenOffset)\n    );\n\n    const {chunkElement, vertexElement, bytesPerSplat} = CompressedPlyParser.decodeHeaderText(headerText);\n\n    return {\n      'headerSizeBytes': endHeaderTokenOffset + HeaderEndTokenBytes.length,\n      'bytesPerSplat': bytesPerSplat,\n      'chunkElement': chunkElement,\n      'vertexElement': vertexElement\n    };\n  }\n\n  static readElementData(element, readBuffer, readOffset, fromIndex, toIndex, propertyFilter = null) {\n\n    let dataView = readBuffer instanceof DataView ? readBuffer : new DataView(readBuffer);\n\n    fromIndex = fromIndex || 0;\n    toIndex = toIndex || element.count - 1;\n    for (let e = fromIndex; e <= toIndex; ++e) {\n      for (let j = 0; j < element.properties.length; ++j) {\n        const property = element.properties[j];\n\n        const StorageType = DataTypeMap.get(property.type);\n        const requiredStorageSizeBytes = StorageType.BYTES_PER_ELEMENT * element.count;\n        if ((!property.storage || property.storage.byteLength < requiredStorageSizeBytes) &&\n            (!propertyFilter || propertyFilter(property.name))) {\n          property.storage = new StorageType(element.count);\n        }\n\n        if (property.storage) {\n          switch (property.type) {\n            case 'char':\n              property.storage[e] = dataView.getInt8(readOffset);\n              break;\n            case 'uchar':\n              property.storage[e] = dataView.getUint8(readOffset);\n              break;\n            case 'short':\n              property.storage[e] = dataView.getInt16(readOffset, true);\n              break;\n            case 'ushort':\n              property.storage[e] = dataView.getUint16(readOffset, true);\n              break;\n            case 'int':\n              property.storage[e] = dataView.getInt32(readOffset, true);\n              break;\n            case 'uint':\n              property.storage[e] = dataView.getUint32(readOffset, true);\n              break;\n            case 'float':\n              property.storage[e] = dataView.getFloat32(readOffset, true);\n              break;\n            case 'double':\n              property.storage[e] = dataView.getFloat64(readOffset, true);\n              break;\n          }\n        }\n\n        readOffset += property.byteSize;\n      }\n    }\n\n    return readOffset;\n  }\n\n  static readPly(plyBuffer, propertyFilter = null) {\n\n    const header = CompressedPlyParser.decodeHeader(plyBuffer);\n\n    let readIndex = CompressedPlyParser.readElementData(header.chunkElement, plyBuffer, header.headerSizeBytes, null, null, propertyFilter);\n    CompressedPlyParser.readElementData(header.vertexElement, plyBuffer, readIndex, null, null, propertyFilter);\n\n    return {\n      'chunkElement': header.chunkElement,\n      'vertexElement': header.vertexElement\n    };\n  }\n\n  static getElementStorageArrays(chunkElement, vertexElement) {\n    const minX = getElementPropStorage(chunkElement, 'min_x');\n    const minY = getElementPropStorage(chunkElement, 'min_y');\n    const minZ = getElementPropStorage(chunkElement, 'min_z');\n    const maxX = getElementPropStorage(chunkElement, 'max_x');\n    const maxY = getElementPropStorage(chunkElement, 'max_y');\n    const maxZ = getElementPropStorage(chunkElement, 'max_z');\n    const minScaleX = getElementPropStorage(chunkElement, 'min_scale_x');\n    const minScaleY = getElementPropStorage(chunkElement, 'min_scale_y');\n    const minScaleZ = getElementPropStorage(chunkElement, 'min_scale_z');\n    const maxScaleX = getElementPropStorage(chunkElement, 'max_scale_x');\n    const maxScaleY = getElementPropStorage(chunkElement, 'max_scale_y');\n    const maxScaleZ = getElementPropStorage(chunkElement, 'max_scale_z');\n    const position = getElementPropStorage(vertexElement, 'packed_position');\n    const rotation = getElementPropStorage(vertexElement, 'packed_rotation');\n    const scale = getElementPropStorage(vertexElement, 'packed_scale');\n    const color = getElementPropStorage(vertexElement, 'packed_color');\n    return {\n      positionExtremes: {\n        minX, maxX,\n        minY, maxY,\n        minZ, maxZ\n      },\n      scaleExtremes: {\n        minScaleX, maxScaleX, minScaleY,\n        maxScaleY, minScaleZ, maxScaleZ\n      },\n      position,\n      rotation,\n      scale,\n      color\n    };\n  }\n\n  static decompressSplat = function() {\n\n    const p = new THREE.Vector3();\n    const r = new THREE.Quaternion();\n    const s = new THREE.Vector3();\n    const c = new THREE.Vector4();\n\n    const OFFSET = UncompressedSplatArray.OFFSET;\n\n    return function(index, chunkSplatIndexOffset, positionArray, positionExtremes, scaleArray, scaleExtremes,\n                    rotationArray, colorArray, outSplat) {\n      outSplat = outSplat || UncompressedSplatArray.createSplat();\n\n      const chunkIndex = Math.floor((chunkSplatIndexOffset + index) / 256);\n\n      unpack111011(p, positionArray[index]);\n      unpackRot(r, rotationArray[index]);\n      unpack111011(s, scaleArray[index]);\n      unpack8888(c, colorArray[index]);\n\n      outSplat[OFFSET.X] = lerp(positionExtremes.minX[chunkIndex], positionExtremes.maxX[chunkIndex], p.x);\n      outSplat[OFFSET.Y] = lerp(positionExtremes.minY[chunkIndex], positionExtremes.maxY[chunkIndex], p.y);\n      outSplat[OFFSET.Z] = lerp(positionExtremes.minZ[chunkIndex], positionExtremes.maxZ[chunkIndex], p.z);\n\n      outSplat[OFFSET.ROTATION0] = r.x;\n      outSplat[OFFSET.ROTATION1] = r.y;\n      outSplat[OFFSET.ROTATION2] = r.z;\n      outSplat[OFFSET.ROTATION3] = r.w;\n\n      outSplat[OFFSET.SCALE0] = Math.exp(lerp(scaleExtremes.minScaleX[chunkIndex], scaleExtremes.maxScaleX[chunkIndex], s.x));\n      outSplat[OFFSET.SCALE1] = Math.exp(lerp(scaleExtremes.minScaleY[chunkIndex], scaleExtremes.maxScaleY[chunkIndex], s.y));\n      outSplat[OFFSET.SCALE2] = Math.exp(lerp(scaleExtremes.minScaleZ[chunkIndex], scaleExtremes.maxScaleZ[chunkIndex], s.z));\n\n      outSplat[OFFSET.FDC0] = clamp(Math.floor(c.x * 255), 0, 255);\n      outSplat[OFFSET.FDC1] = clamp(Math.floor(c.y * 255), 0, 255);\n      outSplat[OFFSET.FDC2] = clamp(Math.floor(c.z * 255), 0, 255);\n      outSplat[OFFSET.OPACITY] = clamp(Math.floor(c.w * 255), 0, 255);\n\n      return outSplat;\n    };\n\n  }();\n\n  static parseToUncompressedSplatBufferSection(chunkElement, vertexElement, fromIndex, toIndex, chunkSplatIndexOffset,\n                                               vertexDataBuffer, veretxReadOffset, outBuffer, outOffset, propertyFilter = null) {\n\n    CompressedPlyParser.readElementData(vertexElement, vertexDataBuffer, veretxReadOffset, fromIndex, toIndex, propertyFilter);\n\n    const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\n    const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\n    const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\n    const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\n\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\n      CompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\n\n    const OFFSET = UncompressedSplatArray.OFFSET;\n    const tempSplat = UncompressedSplatArray.createSplat();\n\n    for (let i = fromIndex; i <= toIndex; ++i) {\n\n      CompressedPlyParser.decompressSplat(i, chunkSplatIndexOffset, position, positionExtremes,\n                                          scale, scaleExtremes, rotation, color, tempSplat);\n\n      const outBase = i * outBytesPerSplat + outOffset;\n      const outCenter = new Float32Array(outBuffer, outBase, 3);\n      const outScale = new Float32Array(outBuffer, outBase + outBytesPerCenter, 3);\n      const outRotation = new Float32Array(outBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\n      const outColor = new Uint8Array(outBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\n\n      outCenter[0] = tempSplat[OFFSET.X];\n      outCenter[1] = tempSplat[OFFSET.Y];\n      outCenter[2] = tempSplat[OFFSET.Z];\n\n      outScale[0] = tempSplat[OFFSET.SCALE0];\n      outScale[1] = tempSplat[OFFSET.SCALE1];\n      outScale[2] = tempSplat[OFFSET.SCALE2];\n\n      outRotation[0] = tempSplat[OFFSET.ROTATION0];\n      outRotation[1] = tempSplat[OFFSET.ROTATION1];\n      outRotation[2] = tempSplat[OFFSET.ROTATION2];\n      outRotation[3] = tempSplat[OFFSET.ROTATION3];\n\n      outColor[0] = tempSplat[OFFSET.FDC0];\n      outColor[1] = tempSplat[OFFSET.FDC1];\n      outColor[2] = tempSplat[OFFSET.FDC2];\n      outColor[3] = tempSplat[OFFSET.OPACITY];\n    }\n  }\n\n  static parseToUncompressedSplatArray(plyBuffer) {\n    const { chunkElement, vertexElement } = CompressedPlyParser.readPly(plyBuffer);\n\n    const splatArray = new UncompressedSplatArray();\n\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\n      CompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\n\n    for (let i = 0; i < vertexElement.count; ++i) {\n\n      splatArray.addDefaultSplat();\n      const newSplat = splatArray.getSplat(splatArray.splatCount - 1);\n\n      CompressedPlyParser.decompressSplat(i, 0, position, positionExtremes, scale, scaleExtremes, rotation, color, newSplat);\n    }\n\n    const mat = new THREE.Matrix4();\n    mat.identity();\n\n    return splatArray;\n  }\n\n}\n", "import * as THREE from 'three';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { CompressedPlyParser } from './CompressedPlyParser.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { clamp } from '../../Util.js';\n\nexport class PlyParser {\n\n    static HeaderEndToken = 'end_header';\n\n    static BaseFields = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\n                         'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'red', 'green', 'blue', 'opacity'];\n\n    static SphericalHarmonicsFields = Array.from(Array(45)).map((e, i) => (`f_rest_${i}`));\n\n    static Fields = [[...PlyParser.BaseFields], [...PlyParser.BaseFields, ...PlyParser.SphericalHarmonicsFields]];\n\n    static checkTextForEndHeader(endHeaderTestText) {\n        if (endHeaderTestText.includes(PlyParser.HeaderEndToken)) {\n            return true;\n        }\n        return false;\n    }\n\n    static checkBufferForEndHeader(buffer, searchOfset, chunkSize, decoder) {\n        const endHeaderTestChunk = new Uint8Array(buffer, Math.max(0, searchOfset - chunkSize), chunkSize);\n        const endHeaderTestText = decoder.decode(endHeaderTestChunk);\n        return PlyParser.checkTextForEndHeader(endHeaderTestText);\n    }\n\n    static decodeHeaderText(headerText) {\n        const headerLines = headerText.split('\\n');\n\n        const prunedLines = [];\n\n        let splatCount = 0;\n        let propertyTypes = {};\n        let compressed = false;\n\n        for (let i = 0; i < headerLines.length; i++) {\n            const line = headerLines[i].trim();\n            prunedLines.push(line);\n            if (line.startsWith('element chunk') || line.match(/[A-Za-z]*packed_[A-Za-z]*/)) {\n                compressed = true;\n            } else if (line.startsWith('element vertex')) {\n                const splatCountMatch = line.match(/\\d+/);\n                if (splatCountMatch) {\n                    splatCount = parseInt(splatCountMatch[0]);\n                }\n            } else if (line.startsWith('property')) {\n                const propertyMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n                if (propertyMatch) {\n                    const propertyType = propertyMatch[2];\n                    const propertyName = propertyMatch[3];\n                    propertyTypes[propertyName] = propertyType;\n                }\n            } else if (line === PlyParser.HeaderEndToken) {\n                break;\n            }\n        }\n\n        let bytesPerSplat = 0;\n        let fieldOffsets = {};\n        const fieldSize = {\n            'double': 8,\n            'int': 4,\n            'uint': 4,\n            'float': 4,\n            'short': 2,\n            'ushort': 2,\n            'uchar': 1,\n        };\n\n        const fieldNames = [];\n        for (let fieldName in propertyTypes) {\n            if (propertyTypes.hasOwnProperty(fieldName)) {\n                fieldNames.push(fieldName);\n                const type = propertyTypes[fieldName];\n                fieldOffsets[fieldName] = bytesPerSplat;\n                bytesPerSplat += fieldSize[type];\n            }\n        }\n\n        let sphericalHarmonicsFieldCount = 0;\n        let sphericalHarmonicsCoefficientsPerChannel = 0;\n        for (let fieldName of fieldNames) {\n            if (fieldName.startsWith('f_rest')) sphericalHarmonicsFieldCount++;\n        }\n        sphericalHarmonicsCoefficientsPerChannel = sphericalHarmonicsFieldCount / 3;\n        let sphericalHarmonicsDegree = 0;\n        if (sphericalHarmonicsCoefficientsPerChannel >= 3) sphericalHarmonicsDegree = 1;\n        if (sphericalHarmonicsCoefficientsPerChannel >= 8) sphericalHarmonicsDegree = 2;\n\n        let sphericalHarmonicsDegree1Fields = [];\n        if (sphericalHarmonicsDegree >= 1) {\n            for (let rgb = 0; rgb < 3; rgb++) {\n                for (let i = 0; i < 3; i++) {\n                    sphericalHarmonicsDegree1Fields.push('f_rest_' + (i + sphericalHarmonicsCoefficientsPerChannel * rgb));\n                }\n            }\n        }\n\n        let sphericalHarmonicsDegree2Fields = [];\n        if (sphericalHarmonicsDegree >= 2) {\n            for (let rgb = 0; rgb < 3; rgb++) {\n                for (let i = 0; i < 5; i++) {\n                    sphericalHarmonicsDegree2Fields.push('f_rest_' + (i + sphericalHarmonicsCoefficientsPerChannel * rgb + 3));\n                }\n            }\n        }\n\n        return {\n            'splatCount': splatCount,\n            'propertyTypes': propertyTypes,\n            'compressed': compressed,\n            'headerText': headerText,\n            'headerLines': prunedLines,\n            'headerSizeBytes': headerText.indexOf(PlyParser.HeaderEndToken) + PlyParser.HeaderEndToken.length + 1,\n            'bytesPerSplat': bytesPerSplat,\n            'fieldOffsets': fieldOffsets,\n            'sphericalHarmonicsDegree': sphericalHarmonicsDegree,\n            'sphericalHarmonicsCoefficientsPerChannel': sphericalHarmonicsCoefficientsPerChannel,\n            'sphericalHarmonicsDegree1Fields': sphericalHarmonicsDegree1Fields,\n            'sphericalHarmonicsDegree2Fields': sphericalHarmonicsDegree2Fields\n        };\n    }\n\n    static decodeHeadeFromBuffer(plyBuffer) {\n        const decoder = new TextDecoder();\n        let headerOffset = 0;\n        let headerText = '';\n        const readChunkSize = 100;\n\n        while (true) {\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\n                throw new Error('End of file reached while searching for end of header');\n            }\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\n            headerText += decoder.decode(headerChunk);\n            headerOffset += readChunkSize;\n\n            if (PlyParser.checkBufferForEndHeader(plyBuffer, headerOffset, readChunkSize * 2, decoder)) {\n                break;\n            }\n        }\n\n        return PlyParser.decodeHeaderText(headerText);\n\n    }\n\n    static findVertexData(plyBuffer, header) {\n        return new DataView(plyBuffer, header.headerSizeBytes);\n    }\n\n    static readRawVertexFast(vertexData, offset, fieldOffsets, propertiesToRead, propertyTypes, outVertex) {\n        let rawVertex = outVertex || {};\n        for (let property of propertiesToRead) {\n            const propertyType = propertyTypes[property];\n            if (propertyType === 'float') {\n                rawVertex[property] = vertexData.getFloat32(offset + fieldOffsets[property], true);\n            } else if (propertyType === 'uchar') {\n                rawVertex[property] = vertexData.getUint8(offset + fieldOffsets[property]) / 255.0;\n            }\n        }\n    }\n\n    static parseToUncompressedSplatBufferSection(header, fromSplat, toSplat, vertexData, vertexDataOffset,\n                                                 toBuffer, toOffset, outSphericalHarmonicsDegree = 0) {\n        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\n        const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\n        const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\n        const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\n        const outBytesPerColor = SplatBuffer.CompressionLevels[0].BytesPerColor;\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree].BytesPerSplat;\n\n        for (let i = fromSplat; i <= toSplat; i++) {\n\n            const parsedSplat = PlyParser.parseToUncompressedSplat(vertexData, i, header, vertexDataOffset, outSphericalHarmonicsDegree);\n\n            const outBase = i * outBytesPerSplat + toOffset;\n            const outCenter = new Float32Array(toBuffer, outBase, 3);\n            const outScale = new Float32Array(toBuffer, outBase + outBytesPerCenter, 3);\n            const outRotation = new Float32Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\n            const outColor = new Uint8Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\n\n            outCenter[0] = parsedSplat[UncompressedSplatArray.OFFSET.X];\n            outCenter[1] = parsedSplat[UncompressedSplatArray.OFFSET.Y];\n            outCenter[2] = parsedSplat[UncompressedSplatArray.OFFSET.Z];\n\n            outScale[0] = parsedSplat[UncompressedSplatArray.OFFSET.SCALE0];\n            outScale[1] = parsedSplat[UncompressedSplatArray.OFFSET.SCALE1];\n            outScale[2] = parsedSplat[UncompressedSplatArray.OFFSET.SCALE2];\n\n            outRotation[0] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION0];\n            outRotation[1] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION1];\n            outRotation[2] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION2];\n            outRotation[3] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION3];\n\n            outColor[0] = parsedSplat[UncompressedSplatArray.OFFSET.FDC0];\n            outColor[1] = parsedSplat[UncompressedSplatArray.OFFSET.FDC1];\n            outColor[2] = parsedSplat[UncompressedSplatArray.OFFSET.FDC2];\n            outColor[3] = parsedSplat[UncompressedSplatArray.OFFSET.OPACITY];\n\n            if (outSphericalHarmonicsDegree >= 1) {\n                const outSphericalHarmonics = new Float32Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale +\n                                                               outBytesPerRotation + outBytesPerColor,\n                                                               parsedSplat.sphericalHarmonicsCount);\n                for (let i = 0; i <= 8; i++) {\n                    outSphericalHarmonics[i] = parsedSplat[UncompressedSplatArray.OFFSET.FRC0 + i];\n                }\n                if (outSphericalHarmonicsDegree >= 2) {\n                    for (let i = 9; i <= 23; i++) {\n                        outSphericalHarmonics[i] = parsedSplat[UncompressedSplatArray.OFFSET.FRC0 + i];\n                    }\n                }\n            }\n        }\n    }\n\n    static parseToUncompressedSplat = function() {\n\n        let rawVertex = {};\n        const tempRotation = new THREE.Quaternion();\n\n        return function(vertexData, row, header, vertexDataOffset = 0, outSphericalHarmonicsDegree = 0) {\n            outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\n            PlyParser.readRawVertexFast(vertexData, row * header.bytesPerSplat + vertexDataOffset, header.fieldOffsets,\n                                        PlyParser.Fields[outSphericalHarmonicsDegree > 0 ? 1 : 0], header.propertyTypes, rawVertex);\n            const newSplat = UncompressedSplatArray.createSplat(outSphericalHarmonicsDegree);\n            if (rawVertex['scale_0'] !== undefined) {\n                newSplat[UncompressedSplatArray.OFFSET.SCALE0] = Math.exp(rawVertex['scale_0']);\n                newSplat[UncompressedSplatArray.OFFSET.SCALE1] = Math.exp(rawVertex['scale_1']);\n                newSplat[UncompressedSplatArray.OFFSET.SCALE2] = Math.exp(rawVertex['scale_2']);\n            } else {\n                newSplat[UncompressedSplatArray.OFFSET.SCALE0] = 0.01;\n                newSplat[UncompressedSplatArray.OFFSET.SCALE1] = 0.01;\n                newSplat[UncompressedSplatArray.OFFSET.SCALE2] = 0.01;\n            }\n\n            if (rawVertex['f_dc_0'] !== undefined) {\n                const SH_C0 = 0.28209479177387814;\n                newSplat[UncompressedSplatArray.OFFSET.FDC0] = (0.5 + SH_C0 * rawVertex['f_dc_0']) * 255;\n                newSplat[UncompressedSplatArray.OFFSET.FDC1] = (0.5 + SH_C0 * rawVertex['f_dc_1']) * 255;\n                newSplat[UncompressedSplatArray.OFFSET.FDC2] = (0.5 + SH_C0 * rawVertex['f_dc_2']) * 255;\n            } else if (rawVertex['red'] !== undefined) {\n                newSplat[UncompressedSplatArray.OFFSET.FDC0] = rawVertex['red'] * 255;\n                newSplat[UncompressedSplatArray.OFFSET.FDC1] = rawVertex['green'] * 255;\n                newSplat[UncompressedSplatArray.OFFSET.FDC2] = rawVertex['blue'] * 255;\n            } else {\n                newSplat[UncompressedSplatArray.OFFSET.FDC0] = 0;\n                newSplat[UncompressedSplatArray.OFFSET.FDC1] = 0;\n                newSplat[UncompressedSplatArray.OFFSET.FDC2] = 0;\n            }\n\n            if (rawVertex['opacity'] !== undefined) {\n                newSplat[UncompressedSplatArray.OFFSET.OPACITY] = (1 / (1 + Math.exp(-rawVertex['opacity']))) * 255;\n            }\n\n            newSplat[UncompressedSplatArray.OFFSET.FDC0] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.FDC0]), 0, 255);\n            newSplat[UncompressedSplatArray.OFFSET.FDC1] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.FDC1]), 0, 255);\n            newSplat[UncompressedSplatArray.OFFSET.FDC2] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.FDC2]), 0, 255);\n            newSplat[UncompressedSplatArray.OFFSET.OPACITY] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.OPACITY]), 0, 255);\n\n            if (outSphericalHarmonicsDegree >= 1) {\n                if (rawVertex['f_rest_0'] !== undefined) {\n                    for (let i = 0; i < 9; i++) {\n                        newSplat[UncompressedSplatArray.OFFSET.FRC0 + i] = rawVertex[header.sphericalHarmonicsDegree1Fields[i]];\n                    }\n                    if (outSphericalHarmonicsDegree >= 2) {\n                        for (let i = 0; i < 15; i++) {\n                            newSplat[UncompressedSplatArray.OFFSET.FRC9 + i] = rawVertex[header.sphericalHarmonicsDegree2Fields[i]];\n                        }\n                    }\n                } else {\n                    newSplat[UncompressedSplatArray.OFFSET.FRC0] = 0;\n                    newSplat[UncompressedSplatArray.OFFSET.FRC1] = 0;\n                    newSplat[UncompressedSplatArray.OFFSET.FRC2] = 0;\n                }\n            }\n\n            tempRotation.set(rawVertex['rot_0'], rawVertex['rot_1'], rawVertex['rot_2'], rawVertex['rot_3']);\n            tempRotation.normalize();\n\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION0] = tempRotation.x;\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION1] = tempRotation.y;\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION2] = tempRotation.z;\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION3] = tempRotation.w;\n\n            newSplat[UncompressedSplatArray.OFFSET.X] = rawVertex['x'];\n            newSplat[UncompressedSplatArray.OFFSET.Y] = rawVertex['y'];\n            newSplat[UncompressedSplatArray.OFFSET.Z] = rawVertex['z'];\n\n            return newSplat;\n        };\n\n    }();\n\n    static parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\n\n        const header = PlyParser.decodeHeadeFromBuffer(plyBuffer);\n\n        if (header.compressed) {\n\n            return CompressedPlyParser.parseToUncompressedSplatArray(plyBuffer);\n\n        } else {\n\n            const splatCount = header.splatCount;\n\n            const vertexData = PlyParser.findVertexData(plyBuffer, header);\n\n            // TODO: Eventually properly support multiple degree spherical harmonics\n            // figure out the SH degree from the number of coefficients\n            /* let nRestCoeffs = 0;\n            for (const propertyName in header.propertyTypes) {\n                if (propertyName.startsWith('f_rest_')) {\n                    nRestCoeffs += 1;\n                }\n            }\n            const nCoeffsPerColor = nRestCoeffs / 3;*/\n\n            // const sphericalHarmonicsDegree = Math.sqrt(nCoeffsPerColor + 1) - 1;\n            // const sphericalHarmonicsDegree = 0;\n            // console.log('Detected degree', sphericalHarmonicsDegree, 'with ', nCoeffsPerColor, 'coefficients per color');\n\n            // figure out the order in which spherical harmonics should be read\n            /* const shFeatureOrder = [];\n            for (let rgb = 0; rgb < 3; ++rgb) {\n                shFeatureOrder.push(`f_dc_${rgb}`);\n            }\n            for (let i = 0; i < nCoeffsPerColor; ++i) {\n                for (let rgb = 0; rgb < 3; ++rgb) {\n                    shFeatureOrder.push(`f_rest_${rgb * nCoeffsPerColor + i}`);\n                }\n            }*/\n\n            const splatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\n\n            for (let row = 0; row < splatCount; row++) {\n                const newSplat = PlyParser.parseToUncompressedSplat(vertexData, row, header, 0, outSphericalHarmonicsDegree);\n                splatArray.addSplat(newSplat);\n            }\n\n            return splatArray;\n        }\n    }\n\n}\n", "import * as THREE from 'three';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\nimport { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatPartitioner {\n\n    constructor(sectionCount, sectionFilters, groupingParameters, partitionGenerator) {\n        this.sectionCount = sectionCount;\n        this.sectionFilters = sectionFilters;\n        this.groupingParameters = groupingParameters;\n        this.partitionGenerator = partitionGenerator;\n    }\n\n    partitionUncompressedSplatArray(splatArray) {\n        let groupingParameters;\n        let sectionCount;\n        let sectionFilters;\n        if (this.partitionGenerator) {\n            const results = this.partitionGenerator(splatArray);\n            groupingParameters = results.groupingParameters;\n            sectionCount = results.sectionCount;\n            sectionFilters = results.sectionFilters;\n        } else {\n            groupingParameters = this.groupingParameters;\n            sectionCount = this.sectionCount;\n            sectionFilters = this.sectionFilters;\n        }\n\n        const newArrays = [];\n        for (let s = 0; s < sectionCount; s++) {\n            const sectionSplats = new UncompressedSplatArray(splatArray.sphericalHarmonicsDegree);\n            const sectionFilter = sectionFilters[s];\n            for (let i = 0; i < splatArray.splatCount; i++) {\n                if (sectionFilter(i)) {\n                    sectionSplats.addSplatFromArray(splatArray, i);\n                }\n            }\n            newArrays.push(sectionSplats);\n        }\n        return {\n            splatArrays: newArrays,\n            parameters: groupingParameters\n        };\n    }\n\n    static getStandardPartitioner(partitionSize = 0, sceneCenter = new THREE.Vector3(),\n                                  blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\n        const partitionGenerator = (splatArray) => {\n\n            if (partitionSize <= 0) partitionSize = splatArray.splatCount;\n\n            const centerA = new THREE.Vector3();\n            const centerB = new THREE.Vector3();\n            const clampDistance = 0.5;\n            const clampPoint = (point) => {\n                point.x = Math.floor(point.x / clampDistance) * clampDistance;\n                point.y = Math.floor(point.y / clampDistance) * clampDistance;\n                point.z = Math.floor(point.z / clampDistance) * clampDistance;\n            };\n            splatArray.splats.sort((a, b) => {\n                centerA.set(a[UncompressedSplatArray.OFFSET.X],\n                            a[UncompressedSplatArray.OFFSET.Y],\n                            a[UncompressedSplatArray.OFFSET.Z]).sub(sceneCenter);\n                clampPoint(centerA);\n                const centerADist = centerA.lengthSq();\n                centerB.set(b[UncompressedSplatArray.OFFSET.X],\n                            b[UncompressedSplatArray.OFFSET.Y],\n                            b[UncompressedSplatArray.OFFSET.Z]).sub(sceneCenter);\n                clampPoint(centerB);\n                const centerBDist = centerB.lengthSq();\n                if (centerADist > centerBDist) return 1;\n                else return -1;\n            });\n\n            const sectionFilters = [];\n            const groupingParameters = [];\n            partitionSize = Math.min(splatArray.splatCount, partitionSize);\n            const patitionCount = Math.ceil(splatArray.splatCount / partitionSize);\n            let currentStartSplat = 0;\n            for (let i = 0; i < patitionCount; i ++) {\n                let startSplat = currentStartSplat;\n                sectionFilters.push((splatIndex) => {\n                    return splatIndex >= startSplat && splatIndex < startSplat + partitionSize;\n                });\n                groupingParameters.push({\n                    'blocksSize': blockSize,\n                    'bucketSize': bucketSize,\n                });\n                currentStartSplat += partitionSize;\n            }\n            return {\n                'sectionCount': sectionFilters.length,\n                sectionFilters,\n                groupingParameters\n            };\n        };\n        return new SplatPartitioner(undefined, undefined, undefined, partitionGenerator);\n    }\n}\n", "import * as THREE from 'three';\nimport { SplatPartitioner } from './SplatPartitioner.js';\nimport { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatBufferGenerator {\n\n    constructor(splatPartitioner, alphaRemovalThreshold, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\n        this.splatPartitioner = splatPartitioner;\n        this.alphaRemovalThreshold = alphaRemovalThreshold;\n        this.compressionLevel = compressionLevel;\n        this.sectionSize = sectionSize;\n        this.sceneCenter = sceneCenter ? new THREE.Vector3().copy(sceneCenter) : undefined;\n        this.blockSize = blockSize;\n        this.bucketSize = bucketSize;\n    }\n\n    generateFromUncompressedSplatArray(splatArray) {\n        const partitionResults = this.splatPartitioner.partitionUncompressedSplatArray(splatArray);\n        return SplatBuffer.generateFromUncompressedSplatArrays(partitionResults.splatArrays,\n                                                               this.alphaRemovalThreshold, this.compressionLevel,\n                                                               this.sceneCenter, this.blockSize, this.bucketSize,\n                                                               partitionResults.parameters);\n    }\n\n    static getStandardGenerator(alphaRemovalThreshold = 1, compressionLevel = 1, sectionSize = 0, sceneCenter = new THREE.Vector3(),\n                                blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\n        const splatPartitioner = SplatPartitioner.getStandardPartitioner(sectionSize, sceneCenter, blockSize, bucketSize);\n        return new SplatBufferGenerator(splatPartitioner, alphaRemovalThreshold, compressionLevel,\n                                        sectionSize, sceneCenter, blockSize, bucketSize);\n    }\n}\n", "export const LoaderStatus = {\n    'Downloading': 0,\n    'Processing': 1,\n    'Done': 2\n};\n", "import * as THREE from 'three';\nimport { PlyParser } from './PlyParser.js';\nimport { CompressedPlyParser } from './CompressedPlyParser.js';\nimport { fetchWithProgress, delayedExecute } from '../../Util.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { Constants } from '../../Constants.js';\n\nfunction storeChunksInBuffer(chunks, buffer) {\n    let inBytes = 0;\n    for (let chunk of chunks) inBytes += chunk.sizeBytes;\n\n    if (!buffer || buffer.byteLength < inBytes) {\n        buffer = new ArrayBuffer(inBytes);\n    }\n\n    let offset = 0;\n    for (let chunk of chunks) {\n        new Uint8Array(buffer, offset, chunk.sizeBytes).set(chunk.data);\n        offset += chunk.sizeBytes;\n    }\n\n    return buffer;\n}\n\nexport class PlyLoader {\n\n    static loadFromURL(fileName, onProgress, streamLoadData, onStreamedSectionProgress, minimumAlpha, compressionLevel,\n                       outSphericalHarmonicsDegree = 0, sectionSize, sceneCenter, blockSize, bucketSize) {\n\n        const streamedSectionSizeBytes = Constants.StreamingSectionSize;\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\n        const sectionCount = 1;\n\n        let streamBufferIn;\n        let streamBufferOut;\n        let streamedSplatBuffer;\n        let compressedPlyHeaderChunksBuffer;\n        let maxSplatCount = 0;\n        let splatCount = 0;\n\n        let headerLoaded = false;\n        let readyToLoadSplatData = false;\n        let compressed = false;\n\n        let streamLoadCompleteResolver;\n        let streamLoadPromise = new Promise((resolve) => {\n            streamLoadCompleteResolver = resolve;\n        });\n\n        let numBytesStreamed = 0;\n        let numBytesParsed = 0;\n        let numBytesDownloaded = 0;\n        let headerText = '';\n        let header = null;\n        let chunks = [];\n\n        const textDecoder = new TextDecoder();\n\n        const localOnProgress = (percent, percentLabel, chunkData) => {\n            const loadComplete = percent >= 100;\n            if (streamLoadData) {\n\n                if (chunkData) {\n                    chunks.push({\n                        'data': chunkData,\n                        'sizeBytes': chunkData.byteLength,\n                        'startBytes': numBytesDownloaded,\n                        'endBytes': numBytesDownloaded + chunkData.byteLength\n                    });\n                    numBytesDownloaded += chunkData.byteLength;\n                }\n\n                if (!headerLoaded) {\n                    headerText += textDecoder.decode(chunkData);\n                    if (PlyParser.checkTextForEndHeader(headerText)) {\n                        header = PlyParser.decodeHeaderText(headerText);\n                        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\n                        compressed = header.compressed;\n\n                        if (compressed) {\n                            header = CompressedPlyParser.decodeHeaderText(headerText);\n                            maxSplatCount = header.vertexElement.count;\n                        } else {\n                            maxSplatCount = header.splatCount;\n                            readyToLoadSplatData = true;\n                        }\n\n                        const shDescriptor = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree];\n                        const splatBufferSizeBytes = splatDataOffsetBytes + shDescriptor.BytesPerSplat * maxSplatCount;\n                        streamBufferOut = new ArrayBuffer(splatBufferSizeBytes);\n                        SplatBuffer.writeHeaderToBuffer({\n                            versionMajor: SplatBuffer.CurrentMajorVersion,\n                            versionMinor: SplatBuffer.CurrentMinorVersion,\n                            maxSectionCount: sectionCount,\n                            sectionCount: sectionCount,\n                            maxSplatCount: maxSplatCount,\n                            splatCount: splatCount,\n                            compressionLevel: 0,\n                            sceneCenter: new THREE.Vector3()\n                        }, streamBufferOut);\n\n                        numBytesStreamed = header.headerSizeBytes;\n                        numBytesParsed = header.headerSizeBytes;\n                        headerLoaded = true;\n                    }\n                } else if (compressed && !readyToLoadSplatData) {\n                    const sizeRequiredForHeaderAndChunks = header.headerSizeBytes + header.chunkElement.storageSizeBytes;\n                    compressedPlyHeaderChunksBuffer = storeChunksInBuffer(chunks, compressedPlyHeaderChunksBuffer);\n                    if (compressedPlyHeaderChunksBuffer.byteLength >= sizeRequiredForHeaderAndChunks) {\n                        CompressedPlyParser.readElementData(header.chunkElement, compressedPlyHeaderChunksBuffer, header.headerSizeBytes);\n                        numBytesStreamed = sizeRequiredForHeaderAndChunks;\n                        numBytesParsed = sizeRequiredForHeaderAndChunks;\n                        readyToLoadSplatData = true;\n                    }\n                }\n\n                if (headerLoaded && readyToLoadSplatData) {\n\n                    if (chunks.length > 0) {\n\n                        streamBufferIn = storeChunksInBuffer(chunks, streamBufferIn);\n\n                        const bytesLoadedSinceLastStreamedSection = numBytesDownloaded - numBytesStreamed;\n                        if (bytesLoadedSinceLastStreamedSection > streamedSectionSizeBytes || loadComplete) {\n                            const numBytesToProcess = numBytesDownloaded - numBytesParsed;\n                            const addedSplatCount = Math.floor(numBytesToProcess / header.bytesPerSplat);\n                            const numBytesToParse = addedSplatCount * header.bytesPerSplat;\n                            const numBytesLeftOver = numBytesToProcess - numBytesToParse;\n                            const newSplatCount = splatCount + addedSplatCount;\n                            const parsedDataViewOffset = numBytesParsed - chunks[0].startBytes;\n                            const dataToParse = new DataView(streamBufferIn, parsedDataViewOffset, numBytesToParse);\n\n                            const shDescriptor = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree];\n                            const outOffset = splatCount * shDescriptor.BytesPerSplat + splatDataOffsetBytes;\n\n                            if (compressed) {\n                                CompressedPlyParser.parseToUncompressedSplatBufferSection(header.chunkElement, header.vertexElement, 0,\n                                                                                          addedSplatCount - 1, splatCount,\n                                                                                          dataToParse, 0, streamBufferOut, outOffset);\n                            } else {\n                                PlyParser.parseToUncompressedSplatBufferSection(header, 0, addedSplatCount - 1, dataToParse, 0,\n                                                                                streamBufferOut, outOffset, outSphericalHarmonicsDegree);\n                            }\n\n                            splatCount = newSplatCount;\n                            if (!streamedSplatBuffer) {\n                                SplatBuffer.writeSectionHeaderToBuffer({\n                                    maxSplatCount: maxSplatCount,\n                                    splatCount: splatCount,\n                                    bucketSize: 0,\n                                    bucketCount: 0,\n                                    bucketBlockSize: 0,\n                                    compressionScaleRange: 0,\n                                    storageSizeBytes: 0,\n                                    fullBucketCount: 0,\n                                    partiallyFilledBucketCount: 0,\n                                    sphericalHarmonicsDegree: outSphericalHarmonicsDegree\n                                }, 0, streamBufferOut, SplatBuffer.HeaderSizeBytes);\n                                streamedSplatBuffer = new SplatBuffer(streamBufferOut, false);\n                            }\n                            streamedSplatBuffer.updateLoadedCounts(1, splatCount);\n                            onStreamedSectionProgress(streamedSplatBuffer, loadComplete);\n                            numBytesStreamed += streamedSectionSizeBytes;\n                            numBytesParsed += numBytesToParse;\n\n                            if (numBytesLeftOver === 0) {\n                                chunks = [];\n                            } else {\n                                let keepChunks = [];\n                                let keepSize = 0;\n                                for (let i = chunks.length - 1; i >= 0; i--) {\n                                    const chunk = chunks[i];\n                                    keepSize += chunk.sizeBytes;\n                                    keepChunks.unshift(chunk);\n                                    if (keepSize >= numBytesLeftOver) break;\n                                }\n                                chunks = keepChunks;\n                            }\n                        }\n                    }\n\n                    if (loadComplete) {\n                        streamLoadCompleteResolver(streamedSplatBuffer);\n                    }\n                }\n\n            }\n            if (onProgress) onProgress(percent, percentLabel, LoaderStatus.Downloading);\n        };\n\n        return fetchWithProgress(fileName, localOnProgress, !streamLoadData).then((plyFileData) => {\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            const loadPromise = streamLoadData ? streamLoadPromise :\n                                PlyLoader.loadFromFileData(plyFileData, minimumAlpha, compressionLevel, outSphericalHarmonicsDegree,\n                                                           sectionSize, sceneCenter, blockSize, bucketSize);\n            return loadPromise.then((splatBuffer) => {\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n                return splatBuffer;\n            });\n        });\n    }\n\n    static loadFromFileData(plyFileData, minimumAlpha, compressionLevel, outSphericalHarmonicsDegree = 0,\n                            sectionSize, sceneCenter, blockSize, bucketSize) {\n        return delayedExecute(() => {\n            return PlyParser.parseToUncompressedSplatArray(plyFileData, outSphericalHarmonicsDegree);\n        })\n        .then((splatArray) => {\n            const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel, sectionSize,\n                                                                                   sceneCenter, blockSize, bucketSize);\n            return splatBufferGenerator.generateFromUncompressedSplatArray(splatArray);\n        });\n    }\n}\n", "import * as THREE from 'three';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\n\nexport class SplatParser {\n\n    static RowSizeBytes = 32;\n    static CenterSizeBytes = 12;\n    static ScaleSizeBytes = 12;\n    static RotationSizeBytes = 4;\n    static ColorSizeBytes = 4;\n\n    static parseToUncompressedSplatBufferSection(fromSplat, toSplat, fromBuffer, fromOffset, toBuffer, toOffset) {\n\n        const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\n        const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\n        const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\n\n        for (let i = fromSplat; i <= toSplat; i++) {\n            const inBase = i * SplatParser.RowSizeBytes + fromOffset;\n            const inCenter = new Float32Array(fromBuffer, inBase, 3);\n            const inScale = new Float32Array(fromBuffer, inBase + SplatParser.CenterSizeBytes, 3);\n            const inColor = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\n            const inRotation = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes +\n                                              SplatParser.RotationSizeBytes, 4);\n\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\n            quat.normalize();\n\n            const outBase = i * outBytesPerSplat + toOffset;\n            const outCenter = new Float32Array(toBuffer, outBase, 3);\n            const outScale = new Float32Array(toBuffer, outBase + outBytesPerCenter, 3);\n            const outRotation = new Float32Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\n            const outColor = new Uint8Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\n\n            outCenter[0] = inCenter[0];\n            outCenter[1] = inCenter[1];\n            outCenter[2] = inCenter[2];\n\n            outScale[0] = inScale[0];\n            outScale[1] = inScale[1];\n            outScale[2] = inScale[2];\n\n            outRotation[0] = quat.w;\n            outRotation[1] = quat.x;\n            outRotation[2] = quat.y;\n            outRotation[3] = quat.z;\n\n            outColor[0] = inColor[0];\n            outColor[1] = inColor[1];\n            outColor[2] = inColor[2];\n            outColor[3] = inColor[3];\n        }\n    }\n\n    static parseStandardSplatToUncompressedSplatArray(inBuffer) {\n        // Standard .splat row layout:\n        // XYZ - Position (Float32)\n        // XYZ - Scale (Float32)\n        // RGBA - colors (uint8)\n        // IJKL - quaternion/rot (uint8)\n\n        const splatCount = inBuffer.byteLength / SplatParser.RowSizeBytes;\n\n        const splatArray = new UncompressedSplatArray();\n\n        for (let i = 0; i < splatCount; i++) {\n            const inBase = i * SplatParser.RowSizeBytes;\n            const inCenter = new Float32Array(inBuffer, inBase, 3);\n            const inScale = new Float32Array(inBuffer, inBase + SplatParser.CenterSizeBytes, 3);\n            const inColor = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\n            const inRotation = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes +\n                                              SplatParser.ScaleSizeBytes + SplatParser.ColorSizeBytes, 4);\n\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\n            quat.normalize();\n\n            splatArray.addSplatFromComonents(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\n                                             quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\n        }\n\n        return splatArray;\n    }\n\n}\n", "import * as THREE from 'three';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\nimport { SplatParser } from './SplatParser.js';\nimport { fetchWithProgress, delayedExecute } from '../../Util.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { Constants } from '../../Constants.js';\n\nexport class SplatLoader {\n\n    static loadFromURL(fileName, onProgress, streamLoadData, onStreamedSectionProgress, minimumAlpha, compressionLevel,\n                       optimizeSplatData, sectionSize, sceneCenter, blockSize, bucketSize) {\n\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\n        const streamSectionSizeBytes = Constants.StreamingSectionSize;\n        const sectionCount = 1;\n\n        let streamBufferIn;\n        let streamBufferOut;\n        let streamSplatBuffer;\n        let maxSplatCount = 0;\n        let splatCount = 0;\n\n        let streamLoadCompleteResolver;\n        let streamLoadPromise = new Promise((resolve) => {\n            streamLoadCompleteResolver = resolve;\n        });\n\n        let numBytesStreamed = 0;\n        let numBytesLoaded = 0;\n        let chunks = [];\n\n        const localOnProgress = (percent, percentStr, chunk, fileSize) => {\n            const loadComplete = percent >= 100;\n            if (!fileSize) streamLoadData = false;\n            if (streamLoadData) {\n                if (!streamBufferIn) {\n                    maxSplatCount = fileSize / SplatParser.RowSizeBytes;\n                    streamBufferIn = new ArrayBuffer(fileSize);\n                    const bytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\n                    const splatBufferSizeBytes = splatDataOffsetBytes + bytesPerSplat * maxSplatCount;\n                    streamBufferOut = new ArrayBuffer(splatBufferSizeBytes);\n                    SplatBuffer.writeHeaderToBuffer({\n                        versionMajor: SplatBuffer.CurrentMajorVersion,\n                        versionMinor: SplatBuffer.CurrentMinorVersion,\n                        maxSectionCount: sectionCount,\n                        sectionCount: sectionCount,\n                        maxSplatCount: maxSplatCount,\n                        splatCount: splatCount,\n                        compressionLevel: 0,\n                        sceneCenter: new THREE.Vector3()\n                    }, streamBufferOut);\n                }\n\n                if (chunk) {\n                    chunks.push(chunk);\n                    new Uint8Array(streamBufferIn, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\n                    numBytesLoaded += chunk.byteLength;\n\n                    const bytesLoadedSinceLastSection = numBytesLoaded - numBytesStreamed;\n                    if (bytesLoadedSinceLastSection > streamSectionSizeBytes || loadComplete) {\n                        const bytesToUpdate = loadComplete ? bytesLoadedSinceLastSection : streamSectionSizeBytes;\n                        const addedSplatCount = bytesToUpdate / SplatParser.RowSizeBytes;\n                        const newSplatCount = splatCount + addedSplatCount;\n                        SplatParser.parseToUncompressedSplatBufferSection(splatCount, newSplatCount - 1, streamBufferIn, 0,\n                                                                          streamBufferOut, splatDataOffsetBytes);\n                        splatCount = newSplatCount;\n                        if (!streamSplatBuffer) {\n                            SplatBuffer.writeSectionHeaderToBuffer({\n                                maxSplatCount: maxSplatCount,\n                                splatCount: splatCount,\n                                bucketSize: 0,\n                                bucketCount: 0,\n                                bucketBlockSize: 0,\n                                compressionScaleRange: 0,\n                                storageSizeBytes: 0,\n                                fullBucketCount: 0,\n                                partiallyFilledBucketCount: 0\n                            }, 0, streamBufferOut, SplatBuffer.HeaderSizeBytes);\n                            streamSplatBuffer = new SplatBuffer(streamBufferOut, false);\n                        }\n                        streamSplatBuffer.updateLoadedCounts(1, splatCount);\n                        onStreamedSectionProgress(streamSplatBuffer, loadComplete);\n                        numBytesStreamed += streamSectionSizeBytes;\n                    }\n                }\n                if (loadComplete) {\n                    streamLoadCompleteResolver(streamSplatBuffer);\n                }\n            }\n            if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\n            return streamLoadData;\n        };\n\n        return fetchWithProgress(fileName, localOnProgress, true).then((fullBuffer) => {\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            const loadPromise = streamLoadData ? streamLoadPromise :\n                SplatLoader.loadFromFileData(fullBuffer, minimumAlpha, compressionLevel, optimizeSplatData,\n                                             sectionSize, sceneCenter, blockSize, bucketSize);\n            return loadPromise.then((splatBuffer) => {\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n                return splatBuffer;\n            });\n        });\n    }\n\n    static loadFromFileData(splatFileData, minimumAlpha, compressionLevel, optimizeSplatData,\n                            sectionSize, sceneCenter, blockSize, bucketSize) {\n        return delayedExecute(() => {\n            const splatArray = SplatParser.parseStandardSplatToUncompressedSplatArray(splatFileData);\n            if (optimizeSplatData) {\n                const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel,\n                                                                                       sectionSize, sceneCenter, blockSize,\n                                                                                       bucketSize);\n                return splatBufferGenerator.generateFromUncompressedSplatArray(splatArray);\n            } else {\n                return SplatBuffer.generateFromUncompressedSplatArrays([splatArray], minimumAlpha, 0, new THREE.Vector3());\n            }\n        });\n    }\n\n}\n", "import { SplatBuffer } from '../SplatBuffer.js';\nimport { fetchWithProgress, delayedExecute } from '../../Util.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { Constants } from '../../Constants.js';\n\nexport class KSplatLoader {\n\n   static checkVersion(buffer) {\n        const minVersionMajor = SplatBuffer.CurrentMajorVersion;\n        const minVersionMinor = SplatBuffer.CurrentMinorVersion;\n        const header = SplatBuffer.parseHeader(buffer);\n        if (header.versionMajor === minVersionMajor &&\n            header.versionMinor >= minVersionMinor ||\n            header.versionMajor > minVersionMajor) {\n           return true;\n        } else {\n            throw new Error(`KSplat version not supported: v${header.versionMajor}.${header.versionMinor}. ` +\n                            `Minimum required: v${minVersionMajor}.${minVersionMinor}`);\n        }\n    };\n\n    static loadFromURL(fileName, onProgress, streamLoadData, onSectionBuilt) {\n        let streamBuffer;\n        let streamSplatBuffer;\n\n        let headerBuffer;\n        let header;\n        let headerLoaded = false;\n        let headerLoading = false;\n\n        let sectionHeadersBuffer;\n        let sectionHeaders = [];\n        let sectionHeadersLoaded = false;\n        let sectionHeadersLoading = false;\n\n        let numBytesLoaded = 0;\n        let numBytesStreamed = 0;\n        let streamSectionSizeBytes = Constants.StreamingSectionSize;\n        let totalBytesToDownload = 0;\n\n        let loadComplete = false;\n\n        let chunks = [];\n\n        let streamLoadCompleteResolver;\n        let streamLoadPromise = new Promise((resolve) => {\n            streamLoadCompleteResolver = resolve;\n        });\n\n        const checkAndLoadHeader = () => {\n            if (!headerLoaded && !headerLoading && numBytesLoaded >= SplatBuffer.HeaderSizeBytes) {\n                headerLoading = true;\n                const headerAssemblyPromise = new Blob(chunks).arrayBuffer();\n                headerAssemblyPromise.then((bufferData) => {\n                    headerBuffer = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\n                    new Uint8Array(headerBuffer).set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\n                    KSplatLoader.checkVersion(headerBuffer);\n                    headerLoading = false;\n                    headerLoaded = true;\n                    header = SplatBuffer.parseHeader(headerBuffer);\n                    window.setTimeout(() => {\n                        checkAndLoadSectionHeaders();\n                    }, 1);\n                });\n            }\n        };\n\n        let queuedCheckAndLoadSectionsCount = 0;\n        const queueCheckAndLoadSections = () => {\n            if (queuedCheckAndLoadSectionsCount === 0) {\n                queuedCheckAndLoadSectionsCount++;\n                window.setTimeout(() => {\n                    queuedCheckAndLoadSectionsCount--;\n                    checkAndLoadSections(true);\n                }, 1);\n            }\n        };\n\n        const checkAndLoadSectionHeaders = () => {\n            const performLoad = () => {\n                sectionHeadersLoading = true;\n                const sectionHeadersAssemblyPromise = new Blob(chunks).arrayBuffer();\n                sectionHeadersAssemblyPromise.then((bufferData) => {\n                    sectionHeadersLoading = false;\n                    sectionHeadersLoaded = true;\n                    sectionHeadersBuffer = new ArrayBuffer(header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes);\n                    new Uint8Array(sectionHeadersBuffer).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes,\n                                                                            header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes));\n                    sectionHeaders = SplatBuffer.parseSectionHeaders(header, sectionHeadersBuffer, 0, false);\n                    let totalSectionStorageStorageByes = 0;\n                    for (let i = 0; i < header.maxSectionCount; i++) {\n                        totalSectionStorageStorageByes += sectionHeaders[i].storageSizeBytes;\n                    }\n                    const totalStorageSizeBytes = SplatBuffer.HeaderSizeBytes + header.maxSectionCount *\n                                                  SplatBuffer.SectionHeaderSizeBytes + totalSectionStorageStorageByes;\n                    if (!streamBuffer) {\n                        streamBuffer = new ArrayBuffer(totalStorageSizeBytes);\n                        let offset = 0;\n                        for (let i = 0; i < chunks.length; i++) {\n                            const chunk = chunks[i];\n                            new Uint8Array(streamBuffer, offset, chunk.byteLength).set(new Uint8Array(chunk));\n                            offset += chunk.byteLength;\n                        }\n                    }\n\n                    totalBytesToDownload = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\n                    for (let i = 0; i <= sectionHeaders.length && i < header.maxSectionCount; i++) {\n                        totalBytesToDownload += sectionHeaders[i].storageSizeBytes;\n                    }\n\n                    queueCheckAndLoadSections();\n                });\n            };\n\n            if (!sectionHeadersLoading && !sectionHeadersLoaded && headerLoaded &&\n                numBytesLoaded >= SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount) {\n                performLoad();\n            }\n        };\n\n        const checkAndLoadSections = () => {\n            if (sectionHeadersLoaded) {\n\n                if (loadComplete) return;\n\n                loadComplete = numBytesLoaded >= totalBytesToDownload;\n\n                const bytesLoadedSinceLastSection = numBytesLoaded - numBytesStreamed;\n                if (bytesLoadedSinceLastSection > streamSectionSizeBytes || loadComplete) {\n\n                    numBytesStreamed = numBytesLoaded;\n\n                    if (!streamSplatBuffer) streamSplatBuffer = new SplatBuffer(streamBuffer, false);\n\n                    const baseDataOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\n                    let sectionBase = 0;\n                    let reachedSections = 0;\n                    let loadedSplatCount = 0;\n                    for (let i = 0; i < header.maxSectionCount; i++) {\n                        const sectionHeader = sectionHeaders[i];\n                        const bucketsDataOffset = sectionBase + sectionHeader.partiallyFilledBucketCount * 4 +\n                                                  sectionHeader.bucketStorageSizeBytes * sectionHeader.bucketCount;\n                        const bytesRequiredToReachSectionSplatData = baseDataOffset + bucketsDataOffset;\n                        if (numBytesLoaded >= bytesRequiredToReachSectionSplatData) {\n                            reachedSections++;\n                            const bytesPastSSectionSplatDataStart = numBytesLoaded - bytesRequiredToReachSectionSplatData;\n                            const baseDescriptor = SplatBuffer.CompressionLevels[header.compressionLevel];\n                            const shDesc = baseDescriptor.SphericalHarmonicsDegrees[sectionHeader.sphericalHarmonicsDegree];\n                            const bytesPerSplat = shDesc.BytesPerSplat;\n                            let loadedSplatsForSection = Math.floor(bytesPastSSectionSplatDataStart / bytesPerSplat);\n                            loadedSplatsForSection = Math.min(loadedSplatsForSection, sectionHeader.maxSplatCount);\n                            loadedSplatCount += loadedSplatsForSection;\n                            streamSplatBuffer.updateLoadedCounts(reachedSections, loadedSplatCount);\n                            streamSplatBuffer.updateSectionLoadedCounts(i, loadedSplatsForSection);\n                        } else {\n                            break;\n                        }\n                        sectionBase += sectionHeader.storageSizeBytes;\n                    }\n\n                    onSectionBuilt(streamSplatBuffer, loadComplete);\n\n                    if (loadComplete) {\n                        streamLoadCompleteResolver(streamSplatBuffer);\n                    }\n                }\n            }\n        };\n\n        const localOnProgress = (percent, percentStr, chunk) => {\n            if (chunk) {\n                chunks.push(chunk);\n                if (streamBuffer) {\n                    new Uint8Array(streamBuffer, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\n                }\n                numBytesLoaded += chunk.byteLength;\n            }\n            if (streamLoadData) {\n                checkAndLoadHeader();\n                checkAndLoadSectionHeaders();\n                checkAndLoadSections();\n            }\n            if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\n        };\n\n        return fetchWithProgress(fileName, localOnProgress, !streamLoadData).then((fullBuffer) => {\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            const loadPromise = streamLoadData ? streamLoadPromise : KSplatLoader.loadFromFileData(fullBuffer);\n            return loadPromise.then((splatBuffer) => {\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n                return splatBuffer;\n            });\n        });\n    }\n\n    static loadFromFileData(fileData) {\n        return delayedExecute(() => {\n            KSplatLoader.checkVersion(fileData);\n            return new SplatBuffer(fileData);\n        });\n    }\n\n    static downloadFile = function() {\n\n        let downLoadLink;\n\n        return function(splatBuffer, fileName) {\n            const blob = new Blob([splatBuffer.bufferData], {\n                type: 'application/octet-stream',\n            });\n\n            if (!downLoadLink) {\n                downLoadLink = document.createElement('a');\n                document.body.appendChild(downLoadLink);\n            }\n            downLoadLink.download = fileName;\n            downLoadLink.href = URL.createObjectURL(blob);\n            downLoadLink.click();\n        };\n\n    }();\n\n}\n", "export const SceneFormat = {\n    'Splat': 0,\n    'KSplat': 1,\n    'Ply': 2\n};\n", "import { SceneFormat } from './SceneFormat.js';\n\nexport const sceneFormatFromPath = (path) => {\n    if (path.endsWith('.ply')) return SceneFormat.Ply;\n    else if (path.endsWith('.splat')) return SceneFormat.Splat;\n    else if (path.endsWith('.ksplat')) return SceneFormat.KSplat;\n    return null;\n};\n", "/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nimport {\n    EventDispatcher,\n    MOUSE,\n    Quaternion,\n    Spherical,\n    TOUCH,\n    Vector2,\n    Vector3,\n    Plane,\n    Ray,\n    MathUtils\n} from 'three';\n\n// OrbitControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\n\nclass OrbitControls extends EventDispatcher {\n\n    constructor( object, domElement ) {\n\n        super();\n\n        this.object = object;\n        this.domElement = domElement;\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\n\n        // Set to false to disable this control\n        this.enabled = true;\n\n        // \"target\" sets the location of focus, where the object orbits around\n        this.target = new Vector3();\n\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        this.minDistance = 0;\n        this.maxDistance = Infinity;\n\n        // How far you can zoom in and out ( OrthographicCamera only )\n        this.minZoom = 0;\n        this.maxZoom = Infinity;\n\n        // How far you can orbit vertically, upper and lower limits.\n        // Range is 0 to Math.PI radians.\n        this.minPolarAngle = 0; // radians\n        this.maxPolarAngle = Math.PI; // radians\n\n        // How far you can orbit horizontally, upper and lower limits.\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\n        this.minAzimuthAngle = - Infinity; // radians\n        this.maxAzimuthAngle = Infinity; // radians\n\n        // Set to true to enable damping (inertia)\n        // If damping is enabled, you must call controls.update() in your animation loop\n        this.enableDamping = false;\n        this.dampingFactor = 0.05;\n\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n        // Set to false to disable zooming\n        this.enableZoom = true;\n        this.zoomSpeed = 1.0;\n\n        // Set to false to disable rotating\n        this.enableRotate = true;\n        this.rotateSpeed = 1.0;\n\n        // Set to false to disable panning\n        this.enablePan = true;\n        this.panSpeed = 1.0;\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n        this.zoomToCursor = false;\n\n        // Set to true to automatically rotate around the target\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\n        this.autoRotate = false;\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n        // The four arrow keys\n        this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\n\n        // Mouse buttons\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n        // Touch fingers\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n        // for reset\n        this.target0 = this.target.clone();\n        this.position0 = this.object.position.clone();\n        this.zoom0 = this.object.zoom;\n\n        // the target DOM element for key events\n        this._domElementKeyEvents = null;\n\n        //\n        // public methods\n        //\n\n        this.getPolarAngle = function() {\n\n            return spherical.phi;\n\n        };\n\n        this.getAzimuthalAngle = function() {\n\n            return spherical.theta;\n\n        };\n\n        this.getDistance = function() {\n\n            return this.object.position.distanceTo( this.target );\n\n        };\n\n        this.listenToKeyEvents = function( domElement ) {\n\n            domElement.addEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = domElement;\n\n        };\n\n        this.stopListenToKeyEvents = function() {\n\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = null;\n\n        };\n\n        this.saveState = function() {\n\n            scope.target0.copy( scope.target );\n            scope.position0.copy( scope.object.position );\n            scope.zoom0 = scope.object.zoom;\n\n        };\n\n        this.reset = function() {\n\n            scope.target.copy( scope.target0 );\n            scope.object.position.copy( scope.position0 );\n            scope.object.zoom = scope.zoom0;\n            this.clearDampedRotation();\n            this.clearDampedPan();\n\n            scope.object.updateProjectionMatrix();\n            scope.dispatchEvent( _changeEvent );\n\n            scope.update();\n\n            state = STATE.NONE;\n\n        };\n\n        this.clearDampedRotation = function() {\n            sphericalDelta.theta = 0.0;\n            sphericalDelta.phi = 0.0;\n        };\n\n        this.clearDampedPan = function() {\n            panOffset.set(0, 0, 0);\n        };\n\n        // this method is exposed, but perhaps it would be better if we can make it private...\n        this.update = function() {\n\n            const offset = new Vector3();\n\n            // so camera.up is the orbit axis\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n            const quatInverse = quat.clone().invert();\n\n            const lastPosition = new Vector3();\n            const lastQuaternion = new Quaternion();\n            const lastTargetPosition = new Vector3();\n\n            const twoPI = 2 * Math.PI;\n\n            return function update() {\n\n                quat.setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n                quatInverse.copy(quat).invert();\n\n                const position = scope.object.position;\n\n                offset.copy( position ).sub( scope.target );\n\n                // rotate offset to \"y-axis-is-up\" space\n                offset.applyQuaternion( quat );\n\n                // angle from z-axis around y-axis\n                spherical.setFromVector3( offset );\n\n                if ( scope.autoRotate && state === STATE.NONE ) {\n\n                    rotateLeft( getAutoRotationAngle() );\n\n                }\n\n                if ( scope.enableDamping ) {\n\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n                } else {\n\n                    spherical.theta += sphericalDelta.theta;\n                    spherical.phi += sphericalDelta.phi;\n\n                }\n\n                // restrict theta to be between desired limits\n\n                let min = scope.minAzimuthAngle;\n                let max = scope.maxAzimuthAngle;\n\n                if ( isFinite( min ) && isFinite( max ) ) {\n\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n                    if ( min <= max ) {\n\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n                    } else {\n\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n                            Math.max( min, spherical.theta ) :\n                            Math.min( max, spherical.theta );\n\n                    }\n\n                }\n\n                // restrict phi to be between desired limits\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n                spherical.makeSafe();\n\n\n                // move target to panned location\n\n                if ( scope.enableDamping === true ) {\n\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n                } else {\n\n                    scope.target.add( panOffset );\n\n                }\n\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n                // we adjust zoom later in these cases\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\n\n                    spherical.radius = clampDistance( spherical.radius );\n\n                } else {\n\n                    spherical.radius = clampDistance( spherical.radius * scale );\n\n                }\n\n\n                offset.setFromSpherical( spherical );\n\n                // rotate offset back to \"camera-up-vector-is-up\" space\n                offset.applyQuaternion( quatInverse );\n\n                position.copy( scope.target ).add( offset );\n\n                scope.object.lookAt( scope.target );\n\n                if ( scope.enableDamping === true ) {\n\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n                } else {\n\n                    sphericalDelta.set( 0, 0, 0 );\n\n                    panOffset.set( 0, 0, 0 );\n\n                }\n\n                // adjust camera position\n                let zoomChanged = false;\n                if ( scope.zoomToCursor && performCursorZoom ) {\n\n                    let newRadius = null;\n                    if ( scope.object.isPerspectiveCamera ) {\n\n                        // move the camera down the pointer ray\n                        // this method avoids floating point error\n                        const prevRadius = offset.length();\n                        newRadius = clampDistance( prevRadius * scale );\n\n                        const radiusDelta = prevRadius - newRadius;\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\n                        scope.object.updateMatrixWorld();\n\n                    } else if ( scope.object.isOrthographicCamera ) {\n\n                        // adjust the ortho camera position based on zoom changes\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseBefore.unproject( scope.object );\n\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                        scope.object.updateProjectionMatrix();\n                        zoomChanged = true;\n\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseAfter.unproject( scope.object );\n\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\n                        scope.object.updateMatrixWorld();\n\n                        newRadius = offset.length();\n\n                    } else {\n\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\n                        scope.zoomToCursor = false;\n\n                    }\n\n                    // handle the placement of the target\n                    if ( newRadius !== null ) {\n\n                        if ( this.screenSpacePanning ) {\n\n                            // position the orbit target in front of the new camera position\n                            scope.target.set( 0, 0, - 1 )\n                                .transformDirection( scope.object.matrix )\n                                .multiplyScalar( newRadius )\n                                .add( scope.object.position );\n\n                        } else {\n\n                            // get the ray and translation plane to compute target\n                            _ray.origin.copy( scope.object.position );\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\n\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n                            // extremely large values\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\n\n                                object.lookAt( scope.target );\n\n                            } else {\n\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\n                                _ray.intersectPlane( _plane, scope.target );\n\n                            }\n\n                        }\n\n                    }\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                    scope.object.updateProjectionMatrix();\n                    zoomChanged = true;\n\n                }\n\n                scale = 1;\n                performCursorZoom = false;\n\n                // update condition is:\n                // min(camera displacement, camera rotation in radians)^2 > EPS\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n                if ( zoomChanged ||\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\n\n                    scope.dispatchEvent( _changeEvent );\n\n                    lastPosition.copy( scope.object.position );\n                    lastQuaternion.copy( scope.object.quaternion );\n                    lastTargetPosition.copy( scope.target );\n\n                    zoomChanged = false;\n\n                    return true;\n\n                }\n\n                return false;\n\n            };\n\n        }();\n\n        this.dispose = function() {\n\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\n            if ( scope._domElementKeyEvents !== null ) {\n\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n                scope._domElementKeyEvents = null;\n\n            }\n\n        };\n\n        //\n        // internals\n        //\n\n        const scope = this;\n\n        const STATE = {\n            NONE: - 1,\n            ROTATE: 0,\n            DOLLY: 1,\n            PAN: 2,\n            TOUCH_ROTATE: 3,\n            TOUCH_PAN: 4,\n            TOUCH_DOLLY_PAN: 5,\n            TOUCH_DOLLY_ROTATE: 6\n        };\n\n        let state = STATE.NONE;\n\n        const EPS = 0.000001;\n\n        // current position in spherical coordinates\n        const spherical = new Spherical();\n        const sphericalDelta = new Spherical();\n\n        let scale = 1;\n        const panOffset = new Vector3();\n\n        const rotateStart = new Vector2();\n        const rotateEnd = new Vector2();\n        const rotateDelta = new Vector2();\n\n        const panStart = new Vector2();\n        const panEnd = new Vector2();\n        const panDelta = new Vector2();\n\n        const dollyStart = new Vector2();\n        const dollyEnd = new Vector2();\n        const dollyDelta = new Vector2();\n\n        const dollyDirection = new Vector3();\n        const mouse = new Vector2();\n        let performCursorZoom = false;\n\n        const pointers = [];\n        const pointerPositions = {};\n\n        function getAutoRotationAngle() {\n\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n        }\n\n        function getZoomScale() {\n\n            return Math.pow( 0.95, scope.zoomSpeed );\n\n        }\n\n        function rotateLeft( angle ) {\n\n            sphericalDelta.theta -= angle;\n\n        }\n\n        function rotateUp( angle ) {\n\n            sphericalDelta.phi -= angle;\n\n        }\n\n        const panLeft = function() {\n\n            const v = new Vector3();\n\n            return function panLeft( distance, objectMatrix ) {\n\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n                v.multiplyScalar( - distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        const panUp = function() {\n\n            const v = new Vector3();\n\n            return function panUp( distance, objectMatrix ) {\n\n                if ( scope.screenSpacePanning === true ) {\n\n                    v.setFromMatrixColumn( objectMatrix, 1 );\n\n                } else {\n\n                    v.setFromMatrixColumn( objectMatrix, 0 );\n                    v.crossVectors( scope.object.up, v );\n\n                }\n\n                v.multiplyScalar( distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        // deltaX and deltaY are in pixels; right and down are positive\n        const pan = function() {\n\n            const offset = new Vector3();\n\n            return function pan( deltaX, deltaY ) {\n\n                const element = scope.domElement;\n\n                if ( scope.object.isPerspectiveCamera ) {\n\n                    // perspective\n                    const position = scope.object.position;\n                    offset.copy( position ).sub( scope.target );\n                    let targetDistance = offset.length();\n\n                    // half of the fov is center to top of screen\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n                    // we use only clientHeight here so aspect ratio does not distort speed\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    // orthographic\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\n                                      element.clientHeight, scope.object.matrix );\n\n                } else {\n\n                    // camera neither orthographic nor perspective\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n                    scope.enablePan = false;\n\n                }\n\n            };\n\n        }();\n\n        function dollyOut( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale /= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function dollyIn( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale *= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function updateMouseParameters( event ) {\n\n            if ( ! scope.zoomToCursor ) {\n\n                return;\n\n            }\n\n            performCursorZoom = true;\n\n            const rect = scope.domElement.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            const w = rect.width;\n            const h = rect.height;\n\n            mouse.x = ( x / w ) * 2 - 1;\n            mouse.y = - ( y / h ) * 2 + 1;\n\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\n\n        }\n\n        function clampDistance( dist ) {\n\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\n\n        }\n\n        //\n        // event callbacks - update the object state\n        //\n\n        function handleMouseDownRotate( event ) {\n\n            rotateStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownDolly( event ) {\n\n            updateMouseParameters( event );\n            dollyStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownPan( event ) {\n\n            panStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseMoveRotate( event ) {\n\n            rotateEnd.set( event.clientX, event.clientY );\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMoveDolly( event ) {\n\n            dollyEnd.set( event.clientX, event.clientY );\n\n            dollyDelta.subVectors( dollyEnd, dollyStart );\n\n            if ( dollyDelta.y > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            } else if ( dollyDelta.y < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            }\n\n            dollyStart.copy( dollyEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMovePan( event ) {\n\n            panEnd.set( event.clientX, event.clientY );\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseWheel( event ) {\n\n            updateMouseParameters( event );\n\n            if ( event.deltaY < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            } else if ( event.deltaY > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            }\n\n            scope.update();\n\n        }\n\n        function handleKeyDown( event ) {\n\n            let needsUpdate = false;\n\n            switch ( event.code ) {\n\n                case scope.keys.UP:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.BOTTOM:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, - scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.LEFT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.RIGHT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( - scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n            }\n\n            if ( needsUpdate ) {\n\n                // prevent the browser from scrolling on cursor keys\n                event.preventDefault();\n\n                scope.update();\n\n            }\n\n\n        }\n\n        function handleTouchStartRotate() {\n\n            if ( pointers.length === 1 ) {\n\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                rotateStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartPan() {\n\n            if ( pointers.length === 1 ) {\n\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                panStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartDolly() {\n\n            const dx = pointers[0].pageX - pointers[1].pageX;\n            const dy = pointers[0].pageY - pointers[1].pageY;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyStart.set( 0, distance );\n\n        }\n\n        function handleTouchStartDollyPan() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enablePan ) handleTouchStartPan();\n\n        }\n\n        function handleTouchStartDollyRotate() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enableRotate ) handleTouchStartRotate();\n\n        }\n\n        function handleTouchMoveRotate( event ) {\n\n            if ( pointers.length == 1 ) {\n\n                rotateEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                rotateEnd.set( x, y );\n\n            }\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n        }\n\n        function handleTouchMovePan( event ) {\n\n            if ( pointers.length === 1 ) {\n\n                panEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                panEnd.set( x, y );\n\n            }\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n        }\n\n        function handleTouchMoveDolly( event ) {\n\n            const position = getSecondPointerPosition( event );\n\n            const dx = event.pageX - position.x;\n            const dy = event.pageY - position.y;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyEnd.set( 0, distance );\n\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n            dollyOut( dollyDelta.y );\n\n            dollyStart.copy( dollyEnd );\n\n        }\n\n        function handleTouchMoveDollyPan( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enablePan ) handleTouchMovePan( event );\n\n        }\n\n        function handleTouchMoveDollyRotate( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n        }\n\n        //\n        // event handlers - FSM: listen for events and reset state\n        //\n\n        function onPointerDown( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.setPointerCapture( event.pointerId );\n\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            //\n\n            addPointer( event );\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchStart( event );\n\n            } else {\n\n                onMouseDown( event );\n\n            }\n\n        }\n\n        function onPointerMove( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchMove( event );\n\n            } else {\n\n                onMouseMove( event );\n\n            }\n\n        }\n\n        function onPointerUp( event ) {\n\n            removePointer( event );\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.releasePointerCapture( event.pointerId );\n\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            scope.dispatchEvent( _endEvent );\n\n            state = STATE.NONE;\n\n        }\n\n        function onMouseDown( event ) {\n\n            let mouseAction;\n\n            switch ( event.button ) {\n\n                case 0:\n\n                    mouseAction = scope.mouseButtons.LEFT;\n                    break;\n\n                case 1:\n\n                    mouseAction = scope.mouseButtons.MIDDLE;\n                    break;\n\n                case 2:\n\n                    mouseAction = scope.mouseButtons.RIGHT;\n                    break;\n\n                default:\n\n                    mouseAction = - 1;\n\n            }\n\n            switch ( mouseAction ) {\n\n                case MOUSE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseDownDolly( event );\n\n                    state = STATE.DOLLY;\n\n                    break;\n\n                case MOUSE.ROTATE:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    } else {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    }\n\n                    break;\n\n                case MOUSE.PAN:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    } else {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onMouseMove( event ) {\n\n            switch ( state ) {\n\n                case STATE.ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleMouseMoveRotate( event );\n\n                    break;\n\n                case STATE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseMoveDolly( event );\n\n                    break;\n\n                case STATE.PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleMouseMovePan( event );\n\n                    break;\n\n            }\n\n        }\n\n        function onMouseWheel( event ) {\n\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\n\n            event.preventDefault();\n\n            scope.dispatchEvent( _startEvent );\n\n            handleMouseWheel( event );\n\n            scope.dispatchEvent( _endEvent );\n\n        }\n\n        function onKeyDown( event ) {\n\n            if ( scope.enabled === false || scope.enablePan === false ) return;\n\n            handleKeyDown( event );\n\n        }\n\n        function onTouchStart( event ) {\n\n            trackPointer( event );\n\n            switch ( pointers.length ) {\n\n                case 1:\n\n                    switch ( scope.touches.ONE ) {\n\n                        case TOUCH.ROTATE:\n\n                            if ( scope.enableRotate === false ) return;\n\n                            handleTouchStartRotate();\n\n                            state = STATE.TOUCH_ROTATE;\n\n                            break;\n\n                        case TOUCH.PAN:\n\n                            if ( scope.enablePan === false ) return;\n\n                            handleTouchStartPan();\n\n                            state = STATE.TOUCH_PAN;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                case 2:\n\n                    switch ( scope.touches.TWO ) {\n\n                        case TOUCH.DOLLY_PAN:\n\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                            handleTouchStartDollyPan();\n\n                            state = STATE.TOUCH_DOLLY_PAN;\n\n                            break;\n\n                        case TOUCH.DOLLY_ROTATE:\n\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                            handleTouchStartDollyRotate();\n\n                            state = STATE.TOUCH_DOLLY_ROTATE;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onTouchMove( event ) {\n\n            trackPointer( event );\n\n            switch ( state ) {\n\n                case STATE.TOUCH_ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleTouchMoveRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleTouchMovePan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_PAN:\n\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                    handleTouchMoveDollyPan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_ROTATE:\n\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                    handleTouchMoveDollyRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n        }\n\n        function onContextMenu( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            event.preventDefault();\n\n        }\n\n        function addPointer( event ) {\n\n            pointers.push( event );\n\n        }\n\n        function removePointer( event ) {\n\n            delete pointerPositions[event.pointerId];\n\n            for ( let i = 0; i < pointers.length; i ++ ) {\n\n                if ( pointers[i].pointerId == event.pointerId ) {\n\n                    pointers.splice( i, 1 );\n                    return;\n\n                }\n\n            }\n\n        }\n\n        function trackPointer( event ) {\n\n            let position = pointerPositions[event.pointerId];\n\n            if ( position === undefined ) {\n\n                position = new Vector2();\n                pointerPositions[event.pointerId] = position;\n\n            }\n\n            position.set( event.pageX, event.pageY );\n\n        }\n\n        function getSecondPointerPosition( event ) {\n\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\n\n            return pointerPositions[pointer.pointerId];\n\n        }\n\n        //\n\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\n\n        // force an update at start\n\n        this.update();\n\n    }\n\n}\n\nexport { OrbitControls };\n", "export const fadeElement = (element, out, displayStyle, duration, onComplete) => {\n    const startTime = performance.now();\n\n    let startOpacity = element.style.display === 'none' ? 0 : parseFloat(element.style.opacity);\n    if (isNaN(startOpacity)) startOpacity = 1;\n\n    const interval = window.setInterval(() => {\n        const currentTime = performance.now();\n        const elapsed = currentTime - startTime;\n\n        let t = Math.min(elapsed / duration, 1.0);\n        if (t > 0.999) t = 1;\n\n        let opacity;\n        if (out) {\n            opacity = (1.0 - t) * startOpacity;\n            if (opacity < 0.0001) opacity = 0;\n        } else {\n            opacity = (1.0 - startOpacity) * t + startOpacity;\n        }\n\n        if (opacity > 0) {\n            element.style.display = displayStyle;\n            element.style.opacity = opacity;\n        } else {\n            element.style.display = 'none';\n        }\n\n        if (t >= 1) {\n            if (onComplete) onComplete();\n            window.clearInterval(interval);\n        }\n    }, 16);\n    return interval;\n};\n\nexport const cancelFade = (interval) => {\n    window.clearInterval(interval);\n};\n", "import { fadeElement } from './Util.js';\n\nconst STANDARD_FADE_DURATION = 500;\n\nexport class LoadingSpinner {\n\n    static elementIDGen = 0;\n\n    constructor(message, container) {\n\n        this.taskIDGen = 0;\n        this.elementID = LoadingSpinner.elementIDGen++;\n\n        this.tasks = [];\n\n        this.message = message || 'Loading...';\n        this.container = container || document.body;\n\n        this.spinnerContainerOuter = document.createElement('div');\n        this.spinnerContainerOuter.className = `spinnerOuterContainer${this.elementID}`;\n        this.spinnerContainerOuter.style.display = 'none';\n\n        this.spinnerContainerPrimary = document.createElement('div');\n        this.spinnerContainerPrimary.className = `spinnerContainerPrimary${this.elementID}`;\n        this.spinnerPrimary = document.createElement('div');\n        this.spinnerPrimary.classList.add(`spinner${this.elementID}`, `spinnerPrimary${this.elementID}`);\n        this.messageContainerPrimary = document.createElement('div');\n        this.messageContainerPrimary.classList.add(`messageContainer${this.elementID}`, `messageContainerPrimary${this.elementID}`);\n        this.messageContainerPrimary.innerHTML = this.message;\n\n        this.spinnerContainerMin = document.createElement('div');\n        this.spinnerContainerMin.className = `spinnerContainerMin${this.elementID}`;\n        this.spinnerMin = document.createElement('div');\n        this.spinnerMin.classList.add(`spinner${this.elementID}`, `spinnerMin${this.elementID}`);\n        this.messageContainerMin = document.createElement('div');\n        this.messageContainerMin.classList.add(`messageContainer${this.elementID}`, `messageContainerMin${this.elementID}`);\n        this.messageContainerMin.innerHTML = this.message;\n\n        this.spinnerContainerPrimary.appendChild(this.spinnerPrimary);\n        this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary);\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary);\n\n        this.spinnerContainerMin.appendChild(this.spinnerMin);\n        this.spinnerContainerMin.appendChild(this.messageContainerMin);\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .spinnerOuterContainer${this.elementID} {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .messageContainer${this.elementID} {\n                height: 20px;\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                vertical-align: middle;\n            }\n\n            .spinner${this.elementID} {\n                padding: 15px;\n                background: #07e8d6;\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n            }\n\n            .spinnerContainerPrimary${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 10px;\n                margin: 0;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n                pointer-events: auto;\n            }\n\n            .spinnerPrimary${this.elementID} {\n                width: 120px;\n                margin-left: 30px;\n            }\n\n            .messageContainerPrimary${this.elementID} {\n                padding-top: 15px;\n            }\n\n            .spinnerContainerMin${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                display: flex;\n                flex-direction: left;\n                pointer-events: auto;\n                min-width: 250px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                margin-right: 15px;\n            }\n\n            .spinnerMin${this.elementID} {\n                width: 50px;\n                height: 50px;\n                margin-left: 15px;\n                margin-right: 25px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                padding-top: 15px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `;\n        this.spinnerContainerOuter.appendChild(style);\n        this.container.appendChild(this.spinnerContainerOuter);\n\n        this.setMinimized(false, true);\n\n        this.fadeTransitions = [];\n    }\n\n    addTask(message) {\n        const newTask = {\n            'message': message,\n            'id': this.taskIDGen++\n        };\n        this.tasks.push(newTask);\n        this.update();\n        return newTask.id;\n    }\n\n    removeTask(id) {\n        let index = 0;\n        for (let task of this.tasks) {\n            if (task.id === id) {\n                this.tasks.splice(index, 1);\n                break;\n            }\n            index++;\n        }\n        this.update();\n    }\n\n    removeAllTasks() {\n        this.tasks = [];\n        this.update();\n    }\n\n    setMessageForTask(id, message) {\n        for (let task of this.tasks) {\n            if (task.id === id) {\n                task.message = message;\n                break;\n            }\n        }\n        this.update();\n    }\n\n    update() {\n        if (this.tasks.length > 0) {\n            this.show();\n            this.setMessage(this.tasks[this.tasks.length - 1].message);\n        } else {\n            this.hide();\n        }\n    }\n\n    show() {\n        this.spinnerContainerOuter.style.display = 'block';\n        this.visible = true;\n    }\n\n    hide() {\n        this.spinnerContainerOuter.style.display = 'none';\n        this.visible = false;\n    }\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.spinnerContainerOuter);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.spinnerContainerOuter);\n            this.spinnerContainerOuter.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n    setMinimized(minimized, instant) {\n        const showHideSpinner = (element, show, instant, displayStyle, fadeTransitionsIndex) => {\n            if (instant) {\n                element.style.display = show ? displayStyle : 'none';\n            } else {\n                this.fadeTransitions[fadeTransitionsIndex] = fadeElement(element, !show, displayStyle, STANDARD_FADE_DURATION, () => {\n                    this.fadeTransitions[fadeTransitionsIndex] = null;\n                });\n            }\n        };\n        showHideSpinner(this.spinnerContainerPrimary, !minimized, instant, 'block', 0);\n        showHideSpinner(this.spinnerContainerMin, minimized, instant, 'flex', 1);\n        this.minimized = minimized;\n    }\n\n    setMessage(msg) {\n        this.messageContainerPrimary.innerHTML = msg;\n        this.messageContainerMin.innerHTML = msg;\n    }\n}\n", "export class LoadingProgressBar {\n\n    constructor(container) {\n\n        this.idGen = 0;\n\n        this.tasks = [];\n\n        this.container = container || document.body;\n\n        this.progressBarContainerOuter = document.createElement('div');\n        this.progressBarContainerOuter.className = 'progressBarOuterContainer';\n        this.progressBarContainerOuter.style.display = 'none';\n\n        this.progressBarBox = document.createElement('div');\n        this.progressBarBox.className = 'progressBarBox';\n\n        this.progressBarBackground = document.createElement('div');\n        this.progressBarBackground.className = 'progressBarBackground';\n\n        this.progressBar = document.createElement('div');\n        this.progressBar.className = 'progressBar';\n\n        this.progressBarBackground.appendChild(this.progressBar);\n        this.progressBarBox.appendChild(this.progressBarBackground);\n        this.progressBarContainerOuter.appendChild(this.progressBarBox);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .progressBarOuterContainer {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .progressBarBox {\n                z-index:99999;\n                padding: 7px 9px 5px 7px;\n                background-color: rgba(190, 190, 190, 0.75);\n                border: #555555 1px solid;\n                border-radius: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                width: 180px;\n                height: 30px;\n                pointer-events: auto;\n            }\n\n            .progressBarBackground {\n                width: 100%;\n                height: 25px;\n                border-radius:10px;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #444444 1px solid;\n                box-shadow: inset 0 0 10px #333333;\n            }\n\n            .progressBar {\n                height: 25px;\n                width: 0px;\n                border-radius:10px;\n                background-color: rgba(0, 200, 0, 0.75);\n                box-shadow: inset 0 0 10px #003300;\n            }\n\n        `;\n        this.progressBarContainerOuter.appendChild(style);\n        this.container.appendChild(this.progressBarContainerOuter);\n    }\n\n    show() {\n        this.progressBarContainerOuter.style.display = 'block';\n    }\n\n    hide() {\n        this.progressBarContainerOuter.style.display = 'none';\n    }\n\n    setProgress(progress) {\n        this.progressBar.style.width = progress + '%';\n    }\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.progressBarContainerOuter);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.progressBarContainerOuter);\n            this.progressBarContainerOuter.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n}\n", "export class InfoPanel {\n\n    constructor(container) {\n\n        this.container = container || document.body;\n\n        this.infoCells = {};\n\n        const layout = [\n            ['Camera position', 'cameraPosition'],\n            ['Camera look-at', 'cameraLookAt'],\n            ['Camera up', 'cameraUp'],\n            ['Camera mode', 'orthographicCamera'],\n            ['Cursor position', 'cursorPosition'],\n            ['FPS', 'fps'],\n            ['Rendering:', 'renderSplatCount'],\n            ['Sort time', 'sortTime'],\n            ['Render window', 'renderWindow'],\n            ['Focal adjustment', 'focalAdjustment'],\n            ['Splat scale', 'splatScale'],\n            ['Point cloud mode', 'pointCloudMode']\n        ];\n\n        this.infoPanelContainer = document.createElement('div');\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .infoPanel {\n                width: 430px;\n                padding: 10px;\n                background-color: rgba(50, 50, 50, 0.85);\n                border: #555555 2px solid;\n                color: #dddddd;\n                border-radius: 10px;\n                z-index: 9999;\n                font-family: arial;\n                font-size: 11pt;\n                text-align: left;\n                margin: 0;\n                top: 10px;\n                left:10px;\n                position: absolute;\n                pointer-events: auto;\n            }\n\n            .info-panel-cell {\n                margin-bottom: 5px;\n                padding-bottom: 2px;\n            }\n\n            .label-cell {\n                font-weight: bold;\n                font-size: 12pt;\n                width: 140px;\n            }\n\n        `;\n        this.infoPanelContainer.append(style);\n\n        this.infoPanel = document.createElement('div');\n        this.infoPanel.className = 'infoPanel';\n\n        const infoTable = document.createElement('div');\n        infoTable.style.display = 'table';\n\n        for (let layoutEntry of layout) {\n            const row = document.createElement('div');\n            row.style.display = 'table-row';\n            row.className = 'info-panel-row';\n\n            const labelCell = document.createElement('div');\n            labelCell.style.display = 'table-cell';\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\n            labelCell.classList.add('info-panel-cell', 'label-cell');\n\n            const spacerCell = document.createElement('div');\n            spacerCell.style.display = 'table-cell';\n            spacerCell.style.width = '10px';\n            spacerCell.innerHTML = ' ';\n            spacerCell.className = 'info-panel-cell';\n\n            const infoCell = document.createElement('div');\n            infoCell.style.display = 'table-cell';\n            infoCell.innerHTML = '';\n            infoCell.className = 'info-panel-cell';\n\n            this.infoCells[layoutEntry[1]] = infoCell;\n\n            row.appendChild(labelCell);\n            row.appendChild(spacerCell);\n            row.appendChild(infoCell);\n\n            infoTable.appendChild(row);\n        }\n\n        this.infoPanel.appendChild(infoTable);\n        this.infoPanelContainer.append(this.infoPanel);\n        this.infoPanelContainer.style.display = 'none';\n        this.container.appendChild(this.infoPanelContainer);\n\n        this.visible = false;\n    }\n\n    update = function(renderDimensions, cameraPosition, cameraLookAtPosition, cameraUp, orthographicCamera,\n                      meshCursorPosition, currentFPS, splatCount, splatRenderCount,\n                      splatRenderCountPct, lastSortTime, focalAdjustment, splatScale, pointCloudMode) {\n\n        const cameraPosString = `${cameraPosition.x.toFixed(5)}, ${cameraPosition.y.toFixed(5)}, ${cameraPosition.z.toFixed(5)}`;\n        if (this.infoCells.cameraPosition.innerHTML !== cameraPosString) {\n            this.infoCells.cameraPosition.innerHTML = cameraPosString;\n        }\n\n        if (cameraLookAtPosition) {\n            const cla = cameraLookAtPosition;\n            const cameraLookAtString = `${cla.x.toFixed(5)}, ${cla.y.toFixed(5)}, ${cla.z.toFixed(5)}`;\n            if (this.infoCells.cameraLookAt.innerHTML !== cameraLookAtString) {\n                this.infoCells.cameraLookAt.innerHTML = cameraLookAtString;\n            }\n        }\n\n        const cameraUpString = `${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(5)}, ${cameraUp.z.toFixed(5)}`;\n        if (this.infoCells.cameraUp.innerHTML !== cameraUpString) {\n            this.infoCells.cameraUp.innerHTML = cameraUpString;\n        }\n\n        this.infoCells.orthographicCamera.innerHTML = orthographicCamera ? 'Orthographic' : 'Perspective';\n\n        if (meshCursorPosition) {\n            const cursPos = meshCursorPosition;\n            const cursorPosString = `${cursPos.x.toFixed(5)}, ${cursPos.y.toFixed(5)}, ${cursPos.z.toFixed(5)}`;\n            this.infoCells.cursorPosition.innerHTML = cursorPosString;\n        } else {\n            this.infoCells.cursorPosition.innerHTML = 'N/A';\n        }\n\n        this.infoCells.fps.innerHTML = currentFPS;\n        this.infoCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\n\n        this.infoCells.renderSplatCount.innerHTML =\n            `${splatRenderCount} splats out of ${splatCount} (${splatRenderCountPct.toFixed(2)}%)`;\n\n        this.infoCells.sortTime.innerHTML = `${lastSortTime.toFixed(3)} ms`;\n        this.infoCells.focalAdjustment.innerHTML = `${focalAdjustment.toFixed(3)}`;\n        this.infoCells.splatScale.innerHTML = `${splatScale.toFixed(3)}`;\n        this.infoCells.pointCloudMode.innerHTML = `${pointCloudMode}`;\n    };\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.infoPanelContainer);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.infoPanelContainer);\n            this.infoPanelContainer.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n    show() {\n        this.infoPanelContainer.style.display = 'block';\n        this.visible = true;\n    }\n\n    hide() {\n        this.infoPanelContainer.style.display = 'none';\n        this.visible = false;\n    }\n\n}\n", "import * as THREE from 'three';\n\nexport class ArrowHelper extends THREE.Object3D {\n\n    constructor(dir = new THREE.Vector3(0, 0, 1), origin = new THREE.Vector3(0, 0, 0), length = 1,\n                radius = 0.1, color = 0xffff00, headLength = length * 0.2, headRadius = headLength * 0.2) {\n        super();\n\n        this.type = 'ArrowHelper';\n\n        const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\n        lineGeometry.translate(0, length / 2.0, 0);\n        const coneGeometry = new THREE.CylinderGeometry( 0, headRadius, headLength, 32);\n        coneGeometry.translate(0, length, 0);\n\n        this.position.copy( origin );\n\n        this.line = new THREE.Mesh(lineGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.line.matrixAutoUpdate = false;\n        this.add(this.line);\n\n        this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.cone.matrixAutoUpdate = false;\n        this.add(this.cone);\n\n        this.setDirection(dir);\n    }\n\n    setDirection( dir ) {\n        if (dir.y > 0.99999) {\n            this.quaternion.set(0, 0, 0, 1);\n        } else if (dir.y < - 0.99999) {\n            this.quaternion.set(1, 0, 0, 0);\n        } else {\n            _axis.set(dir.z, 0, -dir.x).normalize();\n            const radians = Math.acos(dir.y);\n            this.quaternion.setFromAxisAngle(_axis, radians);\n        }\n    }\n\n    setColor( color ) {\n        this.line.material.color.set(color);\n        this.cone.material.color.set(color);\n    }\n\n    copy(source) {\n        super.copy(source, false);\n        this.line.copy(source.line);\n        this.cone.copy(source.cone);\n        return this;\n    }\n\n    dispose() {\n        this.line.geometry.dispose();\n        this.line.material.dispose();\n        this.cone.geometry.dispose();\n        this.cone.material.dispose();\n    }\n\n}\n", "import * as THREE from 'three';\nimport { ArrowHelper } from './ArrowHelper.js';\nimport { disposeAllMeshes } from './Util.js';\n\nexport class SceneHelper {\n\n    constructor(threeScene) {\n        this.threeScene = threeScene;\n        this.splatRenderTarget = null;\n        this.renderTargetCopyQuad = null;\n        this.renderTargetCopyCamera = null;\n        this.meshCursor = null;\n        this.focusMarker = null;\n        this.controlPlane = null;\n        this.debugRoot = null;\n        this.secondaryDebugRoot = null;\n    }\n\n    updateSplatRenderTargetForRenderDimensions(width, height) {\n        this.destroySplatRendertarget();\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\n            format: THREE.RGBAFormat,\n            stencilBuffer: false,\n            depthBuffer: true,\n\n        });\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\n    }\n\n    destroySplatRendertarget() {\n        if (this.splatRenderTarget) {\n            this.splatRenderTarget = null;\n        }\n    }\n\n    setupRenderTargetCopyObjects() {\n        const uniforms = {\n            'sourceColorTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sourceDepthTexture': {\n                'type': 't',\n                'value': null\n            },\n        };\n        const renderTargetCopyMaterial = new THREE.ShaderMaterial({\n            vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            `,\n            fragmentShader: `\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            `,\n            uniforms: uniforms,\n            depthWrite: false,\n            depthTest: false,\n            transparent: true,\n            blending: THREE.CustomBlending,\n            blendSrc: THREE.SrcAlphaFactor,\n            blendSrcAlpha: THREE.SrcAlphaFactor,\n            blendDst: THREE.OneMinusSrcAlphaFactor,\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\n        });\n        renderTargetCopyMaterial.extensions.fragDepth = true;\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), renderTargetCopyMaterial);\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    }\n\n    destroyRenderTargetCopyObjects() {\n        if (this.renderTargetCopyQuad) {\n            disposeAllMeshes(this.renderTargetCopyQuad);\n            this.renderTargetCopyQuad = null;\n        }\n    }\n\n    setupMeshCursor() {\n        if (!this.meshCursor) {\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\n\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            downArrow.rotation.set(0, 0, Math.PI);\n            downArrow.position.set(0, 1, 0);\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            upArrow.position.set(0, -1, 0);\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\n            leftArrow.position.set(1, 0, 0);\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\n            rightArrow.position.set(-1, 0, 0);\n\n            this.meshCursor = new THREE.Object3D();\n            this.meshCursor.add(downArrow);\n            this.meshCursor.add(upArrow);\n            this.meshCursor.add(leftArrow);\n            this.meshCursor.add(rightArrow);\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\n            this.threeScene.add(this.meshCursor);\n            this.meshCursor.visible = false;\n        }\n    }\n\n    destroyMeshCursor() {\n        if (this.meshCursor) {\n            disposeAllMeshes(this.meshCursor);\n            this.threeScene.remove(this.meshCursor);\n            this.meshCursor = null;\n        }\n    }\n\n    setMeshCursorVisibility(visible) {\n        this.meshCursor.visible = visible;\n    }\n\n    getMeschCursorVisibility() {\n        return this.meshCursor.visible;\n    }\n\n    setMeshCursorPosition(position) {\n        this.meshCursor.position.copy(position);\n    }\n\n    positionAndOrientMeshCursor(position, camera) {\n        this.meshCursor.position.copy(position);\n        this.meshCursor.up.copy(camera.up);\n        this.meshCursor.lookAt(camera.position);\n    }\n\n    setupFocusMarker() {\n        if (!this.focusMarker) {\n            const sphereGeometry = new THREE.SphereGeometry(.5, 32, 32);\n            const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\n            focusMarkerMaterial.depthTest = false;\n            focusMarkerMaterial.depthWrite = false;\n            focusMarkerMaterial.transparent = true;\n            this.focusMarker = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\n        }\n    }\n\n    destroyFocusMarker() {\n        if (this.focusMarker) {\n            disposeAllMeshes(this.focusMarker);\n            this.focusMarker = null;\n        }\n    }\n\n    updateFocusMarker = function() {\n\n        const tempPosition = new THREE.Vector3();\n        const tempMatrix = new THREE.Matrix4();\n        const toCamera = new THREE.Vector3();\n\n        return function(position, camera, viewport) {\n            tempMatrix.copy(camera.matrixWorld).invert();\n            tempPosition.copy(position).applyMatrix4(tempMatrix);\n            tempPosition.normalize().multiplyScalar(10);\n            tempPosition.applyMatrix4(camera.matrixWorld);\n            toCamera.copy(camera.position).sub(position);\n            const toCameraDistance = toCamera.length();\n            this.focusMarker.position.copy(position);\n            this.focusMarker.scale.set(toCameraDistance, toCameraDistance, toCameraDistance);\n            this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\n            this.focusMarker.material.uniforms.viewport.value.copy(viewport);\n            this.focusMarker.material.uniformsNeedUpdate = true;\n        };\n\n    }();\n\n    setFocusMarkerVisibility(visible) {\n        this.focusMarker.visible = visible;\n    }\n\n    setFocusMarkerOpacity(opacity) {\n        this.focusMarker.material.uniforms.opacity.value = opacity;\n        this.focusMarker.material.uniformsNeedUpdate = true;\n    }\n\n    getFocusMarkerOpacity() {\n        return this.focusMarker.material.uniforms.opacity.value;\n    }\n\n    setupControlPlane() {\n        if (!this.controlPlane) {\n            const planeGeometry = new THREE.PlaneGeometry(1, 1);\n            planeGeometry.rotateX(-Math.PI / 2);\n            const planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});\n            planeMaterial.transparent = true;\n            planeMaterial.opacity = 0.6;\n            planeMaterial.depthTest = false;\n            planeMaterial.depthWrite = false;\n            planeMaterial.side = THREE.DoubleSide;\n            const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\n\n            const arrowDir = new THREE.Vector3(0, 1, 0);\n            arrowDir.normalize();\n            const arrowOrigin = new THREE.Vector3(0, 0, 0);\n            const arrowLength = 0.5;\n            const arrowRadius = 0.01;\n            const arrowColor = 0x00dd00;\n            const arrowHelper = new ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowRadius, arrowColor, 0.1, 0.03);\n\n            this.controlPlane = new THREE.Object3D();\n            this.controlPlane.add(planeMesh);\n            this.controlPlane.add(arrowHelper);\n        }\n    }\n\n    destroyControlPlane() {\n        if (this.controlPlane) {\n            disposeAllMeshes(this.controlPlane);\n            this.controlPlane = null;\n        }\n    }\n\n    setControlPlaneVisibility(visible) {\n        this.controlPlane.visible = visible;\n    }\n\n    positionAndOrientControlPlane = function() {\n\n        const tempQuaternion = new THREE.Quaternion();\n        const defaultUp = new THREE.Vector3(0, 1, 0);\n\n        return function(position, up) {\n            tempQuaternion.setFromUnitVectors(defaultUp, up);\n            this.controlPlane.position.copy(position);\n            this.controlPlane.quaternion.copy(tempQuaternion);\n        };\n\n    }();\n\n    addDebugMeshes() {\n        this.debugRoot = this.createDebugMeshes();\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\n        this.threeScene.add(this.debugRoot);\n        this.threeScene.add(this.secondaryDebugRoot);\n    }\n\n    destroyDebugMeshes() {\n        for (let debugRoot of [this.debugRoot, this.secondaryDebugRoot]) {\n            if (debugRoot) {\n                disposeAllMeshes(debugRoot);\n                this.threeScene.remove(debugRoot);\n            }\n        }\n        this.debugRoot = null;\n        this.secondaryDebugRoot = null;\n    }\n\n    createDebugMeshes(renderOrder) {\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n        const debugMeshRoot = new THREE.Object3D();\n\n        const createMesh = (color, position) => {\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\n            sphereMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(sphereMesh);\n            sphereMesh.position.fromArray(position);\n        };\n\n        createMesh(0xff0000, [-50, 0, 0]);\n        createMesh(0xff0000, [50, 0, 0]);\n        createMesh(0x00ff00, [0, 0, -50]);\n        createMesh(0x00ff00, [0, 0, 50]);\n        createMesh(0xffaa00, [5, 0, 5]);\n\n        return debugMeshRoot;\n    }\n\n    createSecondaryDebugMeshes(renderOrder) {\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\n        const debugMeshRoot = new THREE.Object3D();\n\n        let boxColor = 0xBBBBBB;\n        const createMesh = (position) => {\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\n            boxMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(boxMesh);\n            boxMesh.position.fromArray(position);\n        };\n\n        let separation = 10;\n        createMesh([-separation, 0, -separation]);\n        createMesh([-separation, 0, separation]);\n        createMesh([separation, 0, -separation]);\n        createMesh([separation, 0, separation]);\n\n        return debugMeshRoot;\n    }\n\n    static buildDebugMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: false,\n            depthTest: true,\n            depthWrite: true,\n            side: THREE.FrontSide\n        });\n        material.extensions.fragDepth = true;\n\n        return material;\n    }\n\n    static buildFocusMarkerMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n            'realFocusPosition': {\n                'type': 'v3',\n                'value': new THREE.Vector3()\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'opacity': {\n                'value': 0.0\n            }\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            depthTest: false,\n            depthWrite: false,\n            side: THREE.FrontSide\n        });\n\n        return material;\n    }\n\n    dispose() {\n        this.destroyMeshCursor();\n        this.destroyFocusMarker();\n        this.destroyDebugMeshes();\n        this.destroyControlPlane();\n        this.destroyRenderTargetCopyObjects();\n        this.destroySplatRendertarget();\n    }\n}\n", "import * as THREE from 'three';\n\nconst VectorRight = new THREE.Vector3(1, 0, 0);\nconst VectorUp = new THREE.Vector3(0, 1, 0);\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\n\nexport class Ray {\n\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\n        this.origin = new THREE.Vector3();\n        this.direction = new THREE.Vector3();\n        this.setParameters(origin, direction);\n    }\n\n    setParameters(origin, direction) {\n        this.origin.copy(origin);\n        this.direction.copy(direction).normalize();\n    }\n\n    boxContainsPoint(box, point, epsilon) {\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\n    }\n\n    intersectBox = function() {\n\n        const planeIntersectionPoint = new THREE.Vector3();\n        const planeIntersectionPointArray = [];\n        const originArray = [];\n        const directionArray = [];\n\n        return function(box, outHit) {\n\n            originArray[0] = this.origin.x;\n            originArray[1] = this.origin.y;\n            originArray[2] = this.origin.z;\n            directionArray[0] = this.direction.x;\n            directionArray[1] = this.direction.y;\n            directionArray[2] = this.direction.z;\n\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\n                if (outHit) {\n                    outHit.origin.copy(this.origin);\n                    outHit.normal.set(0, 0, 0);\n                    outHit.distance = -1;\n                }\n                return true;\n            }\n\n            for (let i = 0; i < 3; i++) {\n                if (directionArray[i] == 0.0) continue;\n\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\n                let multiplier = -Math.sign(directionArray[i]);\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\n\n                if (toSide * multiplier < 0) {\n                    const idx1 = (i + 1) % 3;\n                    const idx2 = (i + 2) % 3;\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\n                                               planeIntersectionPointArray[idx2],\n                                               planeIntersectionPointArray[idx1]);\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\n                        if (outHit) {\n                            outHit.origin.copy(planeIntersectionPoint);\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\n                        }\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        };\n\n    }();\n\n    intersectSphere = function() {\n\n        const toSphereCenterVec = new THREE.Vector3();\n\n        return function(center, radius, outHit) {\n            toSphereCenterVec.copy(center).sub(this.origin);\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\n            const radiusSq = radius * radius;\n\n            if (diffSq > radiusSq) return false;\n\n            const thc = Math.sqrt(radiusSq - diffSq);\n            const t0 = toClosestApproach - thc;\n            const t1 = toClosestApproach + thc;\n\n            if (t1 < 0) return false;\n            let t = t0 < 0 ? t1 : t0;\n\n            if (outHit) {\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\n                outHit.distance = t;\n            }\n            return true;\n        };\n\n    }();\n}\n", "import * as THREE from 'three';\n\nexport class Hit {\n\n    constructor() {\n        this.origin = new THREE.Vector3();\n        this.normal = new THREE.Vector3();\n        this.distance = 0;\n        this.splatIndex = 0;\n    }\n\n    set(origin, normal, distance, splatIndex) {\n        this.origin.copy(origin);\n        this.normal.copy(normal);\n        this.distance = distance;\n        this.splatIndex = splatIndex;\n    }\n\n    clone() {\n        const hitClone = new Hit();\n        hitClone.origin.copy(this.origin);\n        hitClone.normal.copy(this.normal);\n        hitClone.distance = this.distance;\n        hitClone.splatIndex = this.splatIndex;\n        return hitClone;\n    }\n\n}\n", "import * as THREE from 'three';\nimport { Ray } from './Ray.js';\nimport { Hit } from './Hit.js';\n\nexport class Raycaster {\n\n    constructor(origin, direction, raycastAgainstTrueSplatEllipsoid = false) {\n        this.ray = new Ray(origin, direction);\n        this.raycastAgainstTrueSplatEllipsoid = raycastAgainstTrueSplatEllipsoid;\n    }\n\n    setFromCameraAndScreenPosition = function() {\n\n        const ndcCoords = new THREE.Vector2();\n\n        return function(camera, screenPosition, screenDimensions) {\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\n            if (camera.isPerspectiveCamera) {\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\n                this.camera = camera;\n            } else if (camera.isOrthographicCamera) {\n                this.ray.origin.set(ndcCoords.x, ndcCoords.y,\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n                this.camera = camera;\n            } else {\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\n            }\n        };\n\n    }();\n\n    intersectSplatMesh = function() {\n\n        const toLocal = new THREE.Matrix4();\n        const fromLocal = new THREE.Matrix4();\n        const sceneTransform = new THREE.Matrix4();\n        const localRay = new Ray();\n        const tempPoint = new THREE.Vector3();\n\n        return function(splatMesh, outHits = []) {\n            const splatTree = splatMesh.getSplatTree();\n\n            if (!splatTree) return;\n\n            for (let s = 0; s < splatTree.subTrees.length; s++) {\n                const subTree = splatTree.subTrees[s];\n\n                fromLocal.copy(splatMesh.matrixWorld);\n                if (splatMesh.dynamicMode) {\n                    splatMesh.getSceneTransform(s, sceneTransform);\n                    fromLocal.multiply(sceneTransform);\n                }\n                toLocal.copy(fromLocal).invert();\n\n                localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\n                localRay.direction.copy(this.ray.origin).add(this.ray.direction);\n                localRay.direction.applyMatrix4(toLocal).sub(localRay.origin).normalize();\n\n                const outHitsForSubTree = [];\n                if (subTree.rootNode) {\n                    this.castRayAtSplatTreeNode(localRay, splatTree, subTree.rootNode, outHitsForSubTree);\n                }\n\n                outHitsForSubTree.forEach((hit) => {\n                    hit.origin.applyMatrix4(fromLocal);\n                    hit.normal.applyMatrix4(fromLocal).normalize();\n                    hit.distance = tempPoint.copy(hit.origin).sub(this.ray.origin).length();\n                });\n\n                outHits.push(...outHitsForSubTree);\n            }\n\n            outHits.sort((a, b) => {\n                if (a.distance > b.distance) return 1;\n                else return -1;\n            });\n\n            return outHits;\n        };\n\n    }();\n\n    castRayAtSplatTreeNode = function() {\n\n        const tempColor = new THREE.Vector4();\n        const tempCenter = new THREE.Vector3();\n        const tempScale = new THREE.Vector3();\n        const tempRotation = new THREE.Quaternion();\n        const tempHit = new Hit();\n        const scaleEpsilon = 0.0000001;\n\n        const origin = new THREE.Vector3(0, 0, 0);\n        const uniformScaleMatrix = new THREE.Matrix4();\n        const scaleMatrix = new THREE.Matrix4();\n        const rotationMatrix = new THREE.Matrix4();\n        const toSphereSpace = new THREE.Matrix4();\n        const fromSphereSpace = new THREE.Matrix4();\n        const tempRay = new Ray();\n\n        return function(ray, splatTree, node, outHits = []) {\n            if (!ray.intersectBox(node.boundingBox)) {\n                return;\n            }\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\n                for (let i = 0; i < node.data.indexes.length; i++) {\n                    const splatGlobalIndex = node.data.indexes[i];\n                    splatTree.splatMesh.getSplatColor(splatGlobalIndex, tempColor);\n                    splatTree.splatMesh.getSplatCenter(splatGlobalIndex, tempCenter);\n                    splatTree.splatMesh.getSplatScaleAndRotation(splatGlobalIndex, tempScale, tempRotation);\n\n                    if (tempScale.x <= scaleEpsilon || tempScale.y <= scaleEpsilon || tempScale.z <= scaleEpsilon) {\n                        continue;\n                    }\n\n                    if (!this.raycastAgainstTrueSplatEllipsoid) {\n                        const radius = (tempScale.x + tempScale.y + tempScale.z) / 3;\n                        if (ray.intersectSphere(tempCenter, radius, tempHit)) {\n                            const hitClone = tempHit.clone();\n                            hitClone.splatIndex = splatGlobalIndex;\n                            outHits.push(hitClone);\n                        }\n                    } else {\n                        scaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\n                        rotationMatrix.makeRotationFromQuaternion(tempRotation);\n                        const uniformScale = Math.log10(tempColor.w) * 2.0;\n                        uniformScaleMatrix.makeScale(uniformScale, uniformScale, uniformScale);\n                        fromSphereSpace.copy(uniformScaleMatrix).multiply(rotationMatrix).multiply(scaleMatrix);\n                        toSphereSpace.copy(fromSphereSpace).invert();\n                        tempRay.origin.copy(ray.origin).sub(tempCenter).applyMatrix4(toSphereSpace);\n                        tempRay.direction.copy(ray.origin).add(ray.direction).sub(tempCenter);\n                        tempRay.direction.applyMatrix4(toSphereSpace).sub(tempRay.origin).normalize();\n                        if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\n                            const hitClone = tempHit.clone();\n                            hitClone.splatIndex = splatGlobalIndex;\n                            hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\n                            outHits.push(hitClone);\n                        }\n                    }\n                }\n             }\n            if (node.children && node.children.length > 0) {\n                for (let child of node.children) {\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\n                }\n            }\n            return outHits;\n        };\n\n    }();\n}\n", "import * as THREE from 'three';\n\n/**\n * SplatScene: Descriptor for a single splat scene managed by an instance of SplatMesh.\n */\nexport class SplatScene {\n\n    constructor(splatBuffer, position = new THREE.Vector3(), quaternion = new THREE.Quaternion(),\n                scale = new THREE.Vector3(1, 1, 1), minimumAlpha = 1) {\n        this.splatBuffer = splatBuffer;\n        this.position = position.clone();\n        this.quaternion = quaternion.clone();\n        this.scale = scale.clone();\n        this.transform = new THREE.Matrix4();\n        this.minimumAlpha = minimumAlpha;\n        this.updateTransform();\n    }\n\n    copyTransformData(otherScene) {\n        this.position.copy(otherScene.position);\n        this.quaternion.copy(otherScene.quaternion);\n        this.scale.copy(otherScene.scale);\n        this.transform.copy(otherScene.transform);\n    }\n\n    updateTransform() {\n        this.transform.compose(this.position, this.quaternion, this.scale);\n    }\n}\n", "import * as THREE from 'three';\nimport { delayedExecute } from '../Util.js';\n\nclass SplatTreeNode {\n\n    static idGen = 0;\n\n    constructor(min, max, depth, id) {\n        this.min = new THREE.Vector3().copy(min);\n        this.max = new THREE.Vector3().copy(max);\n        this.boundingBox = new THREE.Box3(this.min, this.max);\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\n        this.depth = depth;\n        this.children = [];\n        this.data = null;\n        this.id = id || SplatTreeNode.idGen++;\n    }\n\n}\n\nclass SplatSubTree {\n\n    constructor(maxDepth, maxCentersPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxCentersPerNode = maxCentersPerNode;\n        this.sceneDimensions = new THREE.Vector3();\n        this.sceneMin = new THREE.Vector3();\n        this.sceneMax = new THREE.Vector3();\n        this.rootNode = null;\n        this.nodesWithIndexes = [];\n        this.splatMesh = null;\n    }\n\n    static convertWorkerSubTreeNode(workerSubTreeNode) {\n        const minVector = new THREE.Vector3().fromArray(workerSubTreeNode.min);\n        const maxVector = new THREE.Vector3().fromArray(workerSubTreeNode.max);\n        const convertedNode = new SplatTreeNode(minVector, maxVector, workerSubTreeNode.depth, workerSubTreeNode.id);\n        if (workerSubTreeNode.data.indexes) {\n            convertedNode.data = {\n                'indexes': []\n            };\n            for (let index of workerSubTreeNode.data.indexes) {\n                convertedNode.data.indexes.push(index);\n            }\n        }\n        if (workerSubTreeNode.children) {\n            for (let child of workerSubTreeNode.children) {\n                convertedNode.children.push(SplatSubTree.convertWorkerSubTreeNode(child));\n            }\n        }\n        return convertedNode;\n    }\n\n    static convertWorkerSubTree(workerSubTree, splatMesh) {\n        const convertedSubTree = new SplatSubTree(workerSubTree.maxDepth, workerSubTree.maxCentersPerNode);\n        convertedSubTree.sceneMin = new THREE.Vector3().fromArray(workerSubTree.sceneMin);\n        convertedSubTree.sceneMax = new THREE.Vector3().fromArray(workerSubTree.sceneMax);\n\n        convertedSubTree.splatMesh = splatMesh;\n        convertedSubTree.rootNode = SplatSubTree.convertWorkerSubTreeNode(workerSubTree.rootNode);\n\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        convertedSubTree.nodesWithIndexes = [];\n        visitLeavesFromNode(convertedSubTree.rootNode, (node) => {\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\n                convertedSubTree.nodesWithIndexes.push(node);\n            }\n        });\n\n        return convertedSubTree;\n    }\n}\n\nfunction createSplatTreeWorker(self) {\n\n    let WorkerSplatTreeNodeIDGen = 0;\n\n    class WorkerBox3 {\n\n        constructor(min, max) {\n            this.min = [min[0], min[1], min[2]];\n            this.max = [max[0], max[1], max[2]];\n        }\n\n        containsPoint(point) {\n            return point[0] >= this.min[0] && point[0] <= this.max[0] &&\n                   point[1] >= this.min[1] && point[1] <= this.max[1] &&\n                   point[2] >= this.min[2] && point[2] <= this.max[2];\n        }\n    }\n\n    class WorkerSplatSubTree {\n\n        constructor(maxDepth, maxCentersPerNode) {\n            this.maxDepth = maxDepth;\n            this.maxCentersPerNode = maxCentersPerNode;\n            this.sceneDimensions = [];\n            this.sceneMin = [];\n            this.sceneMax = [];\n            this.rootNode = null;\n            this.addedIndexes = {};\n            this.nodesWithIndexes = [];\n            this.splatMesh = null;\n            this.disposed = false;\n        }\n\n    }\n\n    class WorkerSplatTreeNode {\n\n        constructor(min, max, depth, id) {\n            this.min = [min[0], min[1], min[2]];\n            this.max = [max[0], max[1], max[2]];\n            this.center = [(max[0] - min[0]) * 0.5 + min[0],\n                           (max[1] - min[1]) * 0.5 + min[1],\n                           (max[2] - min[2]) * 0.5 + min[2]];\n            this.depth = depth;\n            this.children = [];\n            this.data = null;\n            this.id = id || WorkerSplatTreeNodeIDGen++;\n        }\n\n    }\n\n    processSplatTreeNode = function(tree, node, indexToCenter, sceneCenters) {\n        const splatCount = node.data.indexes.length;\n\n        if (splatCount < tree.maxCentersPerNode || node.depth > tree.maxDepth) {\n            const newIndexes = [];\n            for (let i = 0; i < node.data.indexes.length; i++) {\n                if (!tree.addedIndexes[node.data.indexes[i]]) {\n                    newIndexes.push(node.data.indexes[i]);\n                    tree.addedIndexes[node.data.indexes[i]] = true;\n                }\n            }\n            node.data.indexes = newIndexes;\n            node.data.indexes.sort((a, b) => {\n                if (a > b) return 1;\n                else return -1;\n            });\n            tree.nodesWithIndexes.push(node);\n            return;\n        }\n\n        const nodeDimensions = [node.max[0] - node.min[0],\n                                node.max[1] - node.min[1],\n                                node.max[2] - node.min[2]];\n        const halfDimensions = [nodeDimensions[0] * 0.5,\n                                nodeDimensions[1] * 0.5,\n                                nodeDimensions[2] * 0.5];\n        const nodeCenter = [node.min[0] + halfDimensions[0],\n                            node.min[1] + halfDimensions[1],\n                            node.min[2] + halfDimensions[2]];\n\n        const childrenBounds = [\n            // top section, clockwise from upper-left (looking from above, +Y)\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2]],\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\n\n            // bottom section, clockwise from lower-left (looking from above, +Y)\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\n        ];\n\n        const splatCounts = [];\n        const baseIndexes = [];\n        for (let i = 0; i < childrenBounds.length; i++) {\n            splatCounts[i] = 0;\n            baseIndexes[i] = [];\n        }\n\n        const center = [0, 0, 0];\n        for (let i = 0; i < splatCount; i++) {\n            const splatGlobalIndex = node.data.indexes[i];\n            const centerBase = indexToCenter[splatGlobalIndex];\n            center[0] = sceneCenters[centerBase];\n            center[1] = sceneCenters[centerBase + 1];\n            center[2] = sceneCenters[centerBase + 2];\n            for (let j = 0; j < childrenBounds.length; j++) {\n                if (childrenBounds[j].containsPoint(center)) {\n                    splatCounts[j]++;\n                    baseIndexes[j].push(splatGlobalIndex);\n                }\n            }\n        }\n\n        for (let i = 0; i < childrenBounds.length; i++) {\n            const childNode = new WorkerSplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\n            childNode.data = {\n                'indexes': baseIndexes[i]\n            };\n            node.children.push(childNode);\n        }\n\n        node.data = {};\n        for (let child of node.children) {\n            processSplatTreeNode(tree, child, indexToCenter, sceneCenters);\n        }\n        return;\n    };\n\n    const buildSubTree = (sceneCenters, maxDepth, maxCentersPerNode) => {\n\n        const sceneMin = [0, 0, 0];\n        const sceneMax = [0, 0, 0];\n        const indexes = [];\n        const centerCount = Math.floor(sceneCenters.length / 4);\n        for ( let i = 0; i < centerCount; i ++) {\n            const base = i * 4;\n            const x = sceneCenters[base];\n            const y = sceneCenters[base + 1];\n            const z = sceneCenters[base + 2];\n            const index = Math.round(sceneCenters[base + 3]);\n            if (i === 0 || x < sceneMin[0]) sceneMin[0] = x;\n            if (i === 0 || x > sceneMax[0]) sceneMax[0] = x;\n            if (i === 0 || y < sceneMin[1]) sceneMin[1] = y;\n            if (i === 0 || y > sceneMax[1]) sceneMax[1] = y;\n            if (i === 0 || z < sceneMin[2]) sceneMin[2] = z;\n            if (i === 0 || z > sceneMax[2]) sceneMax[2] = z;\n            indexes.push(index);\n        }\n        const subTree = new WorkerSplatSubTree(maxDepth, maxCentersPerNode);\n        subTree.sceneMin = sceneMin;\n        subTree.sceneMax = sceneMax;\n        subTree.rootNode = new WorkerSplatTreeNode(subTree.sceneMin, subTree.sceneMax, 0);\n        subTree.rootNode.data = {\n            'indexes': indexes\n        };\n\n        return subTree;\n    };\n\n    function createSplatTree(allCenters, maxDepth, maxCentersPerNode) {\n        const indexToCenter = [];\n        for (let sceneCenters of allCenters) {\n            const centerCount = Math.floor(sceneCenters.length / 4);\n            for ( let i = 0; i < centerCount; i ++) {\n                const base = i * 4;\n                const index = Math.round(sceneCenters[base + 3]);\n                indexToCenter[index] = base;\n            }\n        }\n        const subTrees = [];\n        for (let sceneCenters of allCenters) {\n            const subTree = buildSubTree(sceneCenters, maxDepth, maxCentersPerNode);\n            subTrees.push(subTree);\n            processSplatTreeNode(subTree, subTree.rootNode, indexToCenter, sceneCenters);\n        }\n        self.postMessage({\n            'subTrees': subTrees\n        });\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.process) {\n            createSplatTree(e.data.process.centers, e.data.process.maxDepth, e.data.process.maxCentersPerNode);\n        }\n    };\n}\n\nfunction workerProcessCenters(splatTreeWorker, centers, transferBuffers, maxDepth, maxCentersPerNode) {\n    splatTreeWorker.postMessage({\n        'process': {\n            'centers': centers,\n            'maxDepth': maxDepth,\n            'maxCentersPerNode': maxCentersPerNode\n        }\n    }, transferBuffers);\n}\n\nfunction checkAndCreateWorker() {\n    const splatTreeWorker = new Worker(\n        URL.createObjectURL(\n            new Blob(['(', createSplatTreeWorker.toString(), ')(self)'], {\n                type: 'application/javascript',\n            }),\n        ),\n    );\n    return splatTreeWorker;\n}\n\n/**\n * SplatTree: Octree tailored to splat data from a SplatMesh instance\n */\nexport class SplatTree {\n\n    constructor(maxDepth, maxCentersPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxCentersPerNode = maxCentersPerNode;\n        this.subTrees = [];\n        this.splatMesh = null;\n    }\n\n\n    dispose() {\n        this.diposeSplatTreeWorker();\n        this.disposed = true;\n    }\n\n    diposeSplatTreeWorker() {\n        if (this.splatTreeWorker) this.splatTreeWorker.terminate();\n        this.splatTreeWorker = null;\n    };\n\n    /**\n     * Construct this instance of SplatTree from an instance of SplatMesh.\n     *\n     * @param {SplatMesh} splatMesh The instance of SplatMesh from which to construct this splat tree.\n     * @param {function} filterFunc Optional function to filter out unwanted splats.\n     * @param {function} onIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                                   builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                           the format produced by the splat tree builder worker starts and ends.\n     * @return {undefined}\n     */\n    processSplatMesh = function(splatMesh, filterFunc = () => true, onIndexesUpload, onSplatTreeConstruction) {\n        if (!this.splatTreeWorker) this.splatTreeWorker = checkAndCreateWorker();\n\n        this.splatMesh = splatMesh;\n        this.subTrees = [];\n        const center = new THREE.Vector3();\n\n        const addCentersForScene = (splatOffset, splatCount) => {\n            const sceneCenters = new Float32Array(splatCount * 4);\n            let addedCount = 0;\n            for (let i = 0; i < splatCount; i++) {\n                const globalSplatIndex = i + splatOffset;\n                if (filterFunc(globalSplatIndex)) {\n                    splatMesh.getSplatCenter(globalSplatIndex, center);\n                    const addBase = addedCount * 4;\n                    sceneCenters[addBase] = center.x;\n                    sceneCenters[addBase + 1] = center.y;\n                    sceneCenters[addBase + 2] = center.z;\n                    sceneCenters[addBase + 3] = globalSplatIndex;\n                    addedCount++;\n                }\n            }\n            return sceneCenters;\n        };\n\n        return new Promise((resolve) => {\n\n            const checkForEarlyExit = () => {\n                if (this.disposed) {\n                    this.diposeSplatTreeWorker();\n                    resolve();\n                    return true;\n                }\n                return false;\n            };\n\n            if (onIndexesUpload) onIndexesUpload(false);\n\n            delayedExecute(() => {\n\n                if (checkForEarlyExit()) return;\n\n                const allCenters = [];\n                if (splatMesh.dynamicMode) {\n                    let splatOffset = 0;\n                    for (let s = 0; s < splatMesh.scenes.length; s++) {\n                        const scene = splatMesh.getScene(s);\n                        const splatCount = scene.splatBuffer.getSplatCount();\n                        const sceneCenters = addCentersForScene(splatOffset, splatCount);\n                        allCenters.push(sceneCenters);\n                        splatOffset += splatCount;\n                    }\n                } else {\n                    const sceneCenters = addCentersForScene(0, splatMesh.getSplatCount());\n                    allCenters.push(sceneCenters);\n                }\n\n                this.splatTreeWorker.onmessage = (e) => {\n\n                    if (checkForEarlyExit()) return;\n\n                    if (e.data.subTrees) {\n\n                        if (onSplatTreeConstruction) onSplatTreeConstruction(false);\n\n                        delayedExecute(() => {\n\n                            if (checkForEarlyExit()) return;\n\n                            for (let workerSubTree of e.data.subTrees) {\n                                const convertedSubTree = SplatSubTree.convertWorkerSubTree(workerSubTree, splatMesh);\n                                this.subTrees.push(convertedSubTree);\n                            }\n                            this.diposeSplatTreeWorker();\n\n                            if (onSplatTreeConstruction) onSplatTreeConstruction(true);\n\n                            delayedExecute(() => {\n                                resolve();\n                            });\n\n                        });\n                    }\n                };\n\n                delayedExecute(() => {\n                    if (checkForEarlyExit()) return;\n                    if (onIndexesUpload) onIndexesUpload(true);\n                    const transferBuffers = allCenters.map((array) => array.buffer);\n                    workerProcessCenters(this.splatTreeWorker, allCenters, transferBuffers, this.maxDepth, this.maxCentersPerNode);\n                });\n\n            });\n\n        });\n\n    };\n\n    countLeaves() {\n\n        let leafCount = 0;\n        this.visitLeaves(() => {\n            leafCount++;\n        });\n\n        return leafCount;\n    }\n\n    visitLeaves(visitFunc) {\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        for (let subTree of this.subTrees) {\n            visitLeavesFromNode(subTree.rootNode, visitFunc);\n        }\n    }\n\n}\n", "function WebGLExtensions( gl ) {\n\n    const extensions = {};\n\n    function getExtension( name ) {\n\n        if ( extensions[name] !== undefined ) {\n\n            return extensions[name];\n\n        }\n\n        let extension;\n\n        switch ( name ) {\n\n            case 'WEBGL_depth_texture':\n                extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) ||\n                            gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n                break;\n\n            case 'EXT_texture_filter_anisotropic':\n                extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) ||\n                            gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) ||\n                            gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n                break;\n\n            case 'WEBGL_compressed_texture_s3tc':\n                extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) ||\n                            gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) ||\n                            gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n                break;\n\n            case 'WEBGL_compressed_texture_pvrtc':\n                extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) ||\n                           gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n                break;\n\n            default:\n                extension = gl.getExtension( name );\n\n        }\n\n        extensions[name] = extension;\n\n        return extension;\n\n    }\n\n    return {\n\n        has: function( name ) {\n\n            return getExtension( name ) !== null;\n\n        },\n\n        init: function( capabilities ) {\n\n            if ( capabilities.isWebGL2 ) {\n\n                getExtension( 'EXT_color_buffer_float' );\n                getExtension( 'WEBGL_clip_cull_distance' );\n\n            } else {\n\n                getExtension( 'WEBGL_depth_texture' );\n                getExtension( 'OES_texture_float' );\n                getExtension( 'OES_texture_half_float' );\n                getExtension( 'OES_texture_half_float_linear' );\n                getExtension( 'OES_standard_derivatives' );\n                getExtension( 'OES_element_index_uint' );\n                getExtension( 'OES_vertex_array_object' );\n                getExtension( 'ANGLE_instanced_arrays' );\n\n            }\n\n            getExtension( 'OES_texture_float_linear' );\n            getExtension( 'EXT_color_buffer_half_float' );\n            getExtension( 'WEBGL_multisampled_render_to_texture' );\n\n        },\n\n        get: function( name ) {\n\n            const extension = getExtension( name );\n\n            if ( extension === null ) {\n\n                console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n            }\n\n            return extension;\n\n        }\n\n    };\n\n}\n\nexport { WebGLExtensions };\n", "function WebGLCapabilities( gl, extensions, parameters ) {\n\n    let maxAnisotropy;\n\n    function getMaxAnisotropy() {\n\n        if ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n        if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n            const extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n            maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n        } else {\n\n            maxAnisotropy = 0;\n\n        }\n\n        return maxAnisotropy;\n\n    }\n\n    function getMaxPrecision( precision ) {\n\n        if ( precision === 'highp' ) {\n\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n                return 'highp';\n\n            }\n\n            precision = 'mediump';\n\n        }\n\n        if ( precision === 'mediump' ) {\n\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n                return 'mediump';\n\n            }\n\n        }\n\n        return 'lowp';\n\n    }\n\n    const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl.constructor.name === 'WebGL2RenderingContext';\n\n    let precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n    const maxPrecision = getMaxPrecision( precision );\n\n    if ( maxPrecision !== precision ) {\n\n        console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n        precision = maxPrecision;\n\n    }\n\n    const drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\n\n    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n    const maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n    const maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n    const maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n    const maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n    const maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n    const maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n    const maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n    const maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n    const vertexTextures = maxVertexTextures > 0;\n    const floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\n    const floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n    const maxSamples = isWebGL2 ? gl.getParameter( gl.MAX_SAMPLES ) : 0;\n\n    return {\n\n        isWebGL2: isWebGL2,\n\n        drawBuffers: drawBuffers,\n\n        getMaxAnisotropy: getMaxAnisotropy,\n        getMaxPrecision: getMaxPrecision,\n\n        precision: precision,\n        logarithmicDepthBuffer: logarithmicDepthBuffer,\n\n        maxTextures: maxTextures,\n        maxVertexTextures: maxVertexTextures,\n        maxTextureSize: maxTextureSize,\n        maxCubemapSize: maxCubemapSize,\n\n        maxAttributes: maxAttributes,\n        maxVertexUniforms: maxVertexUniforms,\n        maxVaryings: maxVaryings,\n        maxFragmentUniforms: maxFragmentUniforms,\n\n        vertexTextures: vertexTextures,\n        floatFragmentTextures: floatFragmentTextures,\n        floatVertexTextures: floatVertexTextures,\n\n        maxSamples: maxSamples\n\n    };\n\n}\n\n\nexport { WebGLCapabilities };\n", "export const SceneRevealMode = {\n    Default: 0,\n    Gradual: 1,\n    Instant: 2\n};\n", "export const LogLevel = {\n    None: 0,\n    Error: 1,\n    Warning: 2,\n    Info: 3,\n    Debug: 4\n};\n", "import * as THREE from 'three';\nimport { SplatScene } from './SplatScene.js';\nimport { SplatTree } from './splattree/SplatTree.js';\nimport { WebGLExtensions } from './three-shim/WebGLExtensions.js';\nimport { WebGLCapabilities } from './three-shim/WebGLCapabilities.js';\nimport { uintEncodedFloat, rgbaArrayToInteger } from './Util.js';\nimport { Constants } from './Constants.js';\nimport { SceneRevealMode } from './SceneRevealMode.js';\nimport { LogLevel } from './LogLevel.js';\nimport { getSphericalHarmonicsComponentCountForDegree } from './Util.js';\n\nconst dummyGeometry = new THREE.BufferGeometry();\nconst dummyMaterial = new THREE.MeshBasicMaterial();\n\nconst COVARIANCES_ELEMENTS_PER_SPLAT = 6;\nconst CENTER_COLORS_ELEMENTS_PER_SPLAT = 4;\n\nconst COVARIANCES_ELEMENTS_PER_TEXEL = 4;\nconst CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\nconst TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL = 1;\n\nconst SCENE_FADEIN_RATE_FAST = 0.012;\nconst SCENE_FADEIN_RATE_GRADUAL = 0.003;\n\nconst VISIBLE_REGION_EXPANSION_DELTA = 1;\n\n/**\n * SplatMesh: Container for one or more splat scenes, abstracting them into a single unified container for\n * splat data. Additionally contains data structures and code to make the splat data renderable as a Three.js mesh.\n */\nexport class SplatMesh extends THREE.Mesh {\n\n    constructor(dynamicMode = true, halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1,\n                enableDistancesComputationOnGPU = true, integerBasedDistancesComputation = false,\n                antialiased = false, maxScreenSpaceSplatSize = 2048, logLevel = LogLevel.None, sphericalHarmonicsDegree = 0) {\n        super(dummyGeometry, dummyMaterial);\n        // Reference to a Three.js renderer\n        this.renderer = undefined;\n        // Use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\n        // When 'dynamicMode' is true, scenes are assumed to be non-static. Dynamic scenes are handled differently\n        // and certain optimizations cannot be made for them. Additionally, by default, all splat data retrieved from\n        // this splat mesh will not have their scene transform applied to them if the splat mesh is dynamic. That\n        // can be overriden via parameters to the individual functions that are used to retrieve splat data.\n        this.dynamicMode = dynamicMode;\n        // Ratio of the resolution in physical pixels to the resolution in CSS pixels for the current display device\n        this.devicePixelRatio = devicePixelRatio;\n        // Use a transform feedback to calculate splat distances from the camera\n        this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\n        // Use a faster integer-based approach for calculating splat distances from the camera\n        this.integerBasedDistancesComputation = integerBasedDistancesComputation;\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\n        // https://github.com/nerfstudio-project/gsplat/pull/117\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\n        this.antialiased = antialiased;\n        // Specify the maximum clip space splat size, can help deal with large splats that get too unwieldy\n        this.maxScreenSpaceSplatSize = maxScreenSpaceSplatSize;\n        // The verbosity of console logging\n        this.logLevel = logLevel;\n        // Degree 0 means no spherical harmonics\n        this.sphericalHarmonicsDegree = sphericalHarmonicsDegree;\n        this.minSphericalHarmonicsDegree = 0;\n        // The individual splat scenes stored in this splat mesh, each containing their own transform\n        this.scenes = [];\n        // Special octree tailored to SplatMesh instances\n        this.splatTree = null;\n        this.baseSplatTree = null;\n        // Textures in which splat data will be stored for rendering\n        this.splatDataTextures = {};\n        this.distancesTransformFeedback = {\n            'id': null,\n            'vertexShader': null,\n            'fragmentShader': null,\n            'program': null,\n            'centersBuffer': null,\n            'transformIndexesBuffer': null,\n            'outDistancesBuffer': null,\n            'centersLoc': -1,\n            'modelViewProjLoc': -1,\n            'transformIndexesLoc': -1,\n            'transformsLocs': []\n        };\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSceneIndexMap = [];\n\n        this.lastBuildSplatCount = 0;\n        this.lastBuildScenes = [];\n        this.lastBuildMaxSplatCount = 0;\n        this.lastBuildSceneCount = 0;\n        this.firstRenderTime = -1;\n        this.finalBuild = false;\n\n        this.webGLUtils = null;\n\n        this.boundingBox = new THREE.Box3();\n        this.calculatedSceneCenter = new THREE.Vector3();\n        this.maxSplatDistanceFromSceneCenter = 0;\n        this.visibleRegionBufferRadius = 0;\n        this.visibleRegionRadius = 0;\n        this.visibleRegionFadeStartRadius = 0;\n        this.visibleRegionChanging = false;\n\n        this.splatScale = 1.0;\n        this.pointCloudModeEnabled = false;\n\n        this.disposed = false;\n        this.lastRenderer = null;\n        this.visible = false;\n    }\n\n    /**\n     * Build the Three.js material that is used to render the splats.\n     * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\n     *                             that the splat count might change\n     * @param {boolean} antialiased If true, calculate compensation factor to deal with gaussians being rendered at a significantly\n     *                              different resolution than that of their training\n     * @param {number} maxScreenSpaceSplatSize The maximum clip space splat size\n     * @param {number} splatScale Value by which all splats are scaled in screen-space (default is 1.0)\n     * @param {number} pointCloudModeEnabled Render all splats as screen-space circles\n     * @param {number} maxSphericalHarmonicsDegree Degree of spherical harmonics to utilize in rendering splats\n     * @return {THREE.ShaderMaterial}\n     */\n    static buildMaterial(dynamicMode = false, antialiased = false, maxScreenSpaceSplatSize = 2048,\n                         splatScale = 1.0, pointCloudModeEnabled = false, maxSphericalHarmonicsDegree = 0) {\n\n        // Contains the code to project 3D covariance to 2D and from there calculate the quad (using the eigen vectors of the\n        // 2D covariance) that is ultimately rasterized\n        let vertexShaderSource = `\n            precision highp float;\n            #include <common>\n\n            attribute uint splatIndex;\n\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D centersColorsTexture;\n            uniform highp sampler2D sphericalHarmonicsTexture;`;\n\n        if (dynamicMode) {\n            vertexShaderSource += `\n                uniform highp usampler2D transformIndexesTexture;\n                uniform highp mat4 transforms[${Constants.MaxScenes}];\n                uniform vec2 transformIndexesTextureSize;\n            `;\n        }\n\n        vertexShaderSource += `\n            uniform vec2 focal;\n            uniform float orthoZoom;\n            uniform int orthographicMode;\n            uniform int pointCloudModeEnabled;\n            uniform float inverseFocalAdjustment;\n            uniform vec2 viewport;\n            uniform vec2 basisViewport;\n            uniform vec2 covariancesTextureSize;\n            uniform vec2 centersColorsTextureSize;\n            uniform int sphericalHarmonicsDegree;\n            uniform vec2 sphericalHarmonicsTextureSize;\n            uniform int sphericalHarmonics8BitMode;\n            uniform float visibleRegionRadius;\n            uniform float visibleRegionFadeStartRadius;\n            uniform float firstRenderTime;\n            uniform float currentTime;\n            uniform int fadeInComplete;\n            uniform vec3 sceneCenter;\n            uniform float splatScale;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            const float sqrt8 = sqrt(8.0);\n            const float minAlpha = 1.0 / 255.0;\n\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\n            vec4 uintToRGBAVec (uint u) {\n               uvec4 urgba = mask4 & u;\n               urgba = urgba >> shift4;\n               vec4 rgba = vec4(urgba) * encodeNorm4;\n               return rgba;\n            }\n\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n                vec2 samplerUV = vec2(0.0, 0.0);\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n                samplerUV.y = float(floor(d)) / dimensions.y;\n                samplerUV.x = fract(d);\n                return samplerUV;\n            }\n\n            vec2 getDataUVF(in uint sIndex, in float stride, in uint offset, in vec2 dimensions) {\n                vec2 samplerUV = vec2(0.0, 0.0);\n                float d = float(uint(float(sIndex) * stride) + offset) / dimensions.x;\n                samplerUV.y = float(floor(d)) / dimensions.y;\n                samplerUV.x = fract(d);\n                return samplerUV;\n            }\n\n            const float SH_C1 = 0.4886025119029199f;\n            const float[5] SH_C2 = float[](1.0925484, -1.0925484, 0.3153916, -1.0925484, 0.5462742);\n\n            const float SphericalHarmonics8BitCompressionRange = ${Constants.SphericalHarmonics8BitCompressionRange.toFixed(1)};\n            const float SphericalHarmonics8BitCompressionHalfRange = SphericalHarmonics8BitCompressionRange / 2.0;\n            const vec3 vec8BitSHShift = vec3(SphericalHarmonics8BitCompressionHalfRange);\n\n            void main () {\n\n                uint oddOffset = splatIndex & uint(0x00000001);\n                uint doubleOddOffset = oddOffset * uint(2);\n                bool isEven = oddOffset == uint(0);\n                uint nearestEvenIndex = splatIndex - oddOffset;\n                float fOddOffset = float(oddOffset);\n\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));`;\n\n            if (dynamicMode) {\n                vertexShaderSource += `\n                    uint transformIndex = texture(transformIndexesTexture, getDataUV(1, 0, transformIndexesTextureSize)).r;\n                    mat4 transform = transforms[transformIndex];\n                    mat4 transformModelViewMatrix = modelViewMatrix * transform;\n                `;\n            } else {\n                vertexShaderSource += `mat4 transformModelViewMatrix = modelViewMatrix;`;\n            }\n\n            vertexShaderSource += `\n                vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\n\n                vec4 clipCenter = projectionMatrix * viewCenter;\n\n                float clip = 1.2 * clipCenter.w;\n                if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                    return;\n                }\n\n                vPosition = position.xy;\n                vColor = uintToRGBAVec(sampledCenterColor.r);\n            `;\n\n            if (maxSphericalHarmonicsDegree >= 1) {\n\n                vertexShaderSource += `   \n                if (sphericalHarmonicsDegree >= 1) {\n                `;\n\n                if (dynamicMode) {\n                    vertexShaderSource += `\n                        mat4 mTransform = modelMatrix * transform;\n                        vec3 worldViewDir = normalize(splatCenter - vec3(inverse(mTransform) * vec4(cameraPosition, 1.0)));\n                    `;\n                } else {\n                    vertexShaderSource += `\n                        vec3 worldViewDir = normalize(splatCenter - cameraPosition);\n                    `;\n                }\n\n                if (maxSphericalHarmonicsDegree >= 2) {\n                    vertexShaderSource += `\n                        vec4 sampledSH0123 = texture(sphericalHarmonicsTexture, getDataUV(6, 0, sphericalHarmonicsTextureSize));\n                        vec4 sampledSH4567 = texture(sphericalHarmonicsTexture, getDataUV(6, 1, sphericalHarmonicsTextureSize));\n                        vec4 sampledSH891011 = texture(sphericalHarmonicsTexture, getDataUV(6, 2, sphericalHarmonicsTextureSize));\n                        vec3 sh1 = sampledSH0123.rgb;\n                        vec3 sh2 = vec3(sampledSH0123.a, sampledSH4567.rg);\n                        vec3 sh3 = vec3(sampledSH4567.ba, sampledSH891011.r);\n                    `;\n                } else {\n                    vertexShaderSource += `\n                        vec2 shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset, sphericalHarmonicsTextureSize);\n                        vec4 sampledSH0123 = texture(sphericalHarmonicsTexture, shUV);\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(1), sphericalHarmonicsTextureSize);\n                        vec4 sampledSH4567 = texture(sphericalHarmonicsTexture, shUV);\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(2), sphericalHarmonicsTextureSize);\n                        vec4 sampledSH891011 = texture(sphericalHarmonicsTexture, shUV);\n\n                        vec3 sh1 = vec3(sampledSH0123.rgb) * (1.0 - fOddOffset) + vec3(sampledSH0123.ba, sampledSH4567.r) * fOddOffset;\n                        vec3 sh2 = vec3(sampledSH0123.a, sampledSH4567.rg) * (1.0 - fOddOffset) + vec3(sampledSH4567.gba) * fOddOffset;\n                        vec3 sh3 = vec3(sampledSH4567.ba, sampledSH891011.r) * (1.0 - fOddOffset) + vec3(sampledSH891011.rgb) * fOddOffset;\n                    `;\n                }\n\n                vertexShaderSource += `\n                        if (sphericalHarmonics8BitMode == 1) {\n                            sh1 = sh1 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                            sh2 = sh2 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                            sh3 = sh3 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                        }\n                        float x = worldViewDir.x;\n                        float y = worldViewDir.y;\n                        float z = worldViewDir.z;\n                        vColor.rgb += SH_C1 * (-sh1 * y + sh2 * z - sh3 * x);\n                `;\n\n                if (maxSphericalHarmonicsDegree >= 2) {\n\n                    vertexShaderSource += `\n                        if (sphericalHarmonicsDegree >= 2) {\n                            float xx = x * x;\n                            float yy = y * y;\n                            float zz = z * z;\n                            float xy = x * y;\n                            float yz = y * z;\n                            float xz = x * z;\n\n                            vec4 sampledSH12131415 = texture(sphericalHarmonicsTexture, getDataUV(6, 3, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH16171819 = texture(sphericalHarmonicsTexture, getDataUV(6, 4, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH20212223 = texture(sphericalHarmonicsTexture, getDataUV(6, 5, sphericalHarmonicsTextureSize));\n\n                            vec3 sh4 = sampledSH891011.gba;\n                            vec3 sh5 = sampledSH12131415.rgb;\n                            vec3 sh6 = vec3(sampledSH12131415.a, sampledSH16171819.rg);\n                            vec3 sh7 = vec3(sampledSH16171819.ba, sampledSH20212223.r);\n                            vec3 sh8 = sampledSH20212223.gba;\n\n                            if (sphericalHarmonics8BitMode == 1) {\n                                sh4 = sh4 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                                sh5 = sh5 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                                sh6 = sh6 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                                sh7 = sh7 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                                sh8 = sh8 * SphericalHarmonics8BitCompressionRange - vec8BitSHShift;\n                            }\n\n                            vColor.rgb +=\n                                (SH_C2[0] * xy) * sh4 +\n                                (SH_C2[1] * yz) * sh5 +\n                                (SH_C2[2] * (2.0 * zz - xx - yy)) * sh6 +\n                                (SH_C2[3] * xz) * sh7 +\n                                (SH_C2[4] * (xx - yy)) * sh8;\n                        }\n                    `;\n                }\n\n                vertexShaderSource += `\n               \n                }\n\n                `;\n            }\n\n            vertexShaderSource += `\n\n                vec4 sampledCovarianceA = texture(covariancesTexture,\n                                                  getDataUVF(nearestEvenIndex, 1.5, oddOffset, covariancesTextureSize));\n                vec4 sampledCovarianceB = texture(covariancesTexture,\n                                                  getDataUVF(nearestEvenIndex, 1.5, oddOffset + uint(1), covariancesTextureSize));\n\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rgb) * (1.0 - fOddOffset) +\n                                         vec3(sampledCovarianceA.ba, sampledCovarianceB.r) * fOddOffset;\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg) * (1.0 - fOddOffset) +\n                                         vec3(sampledCovarianceB.gba) * fOddOffset;\n\n                // Construct the 3D covariance matrix\n                mat3 Vrk = mat3(\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n                );\n\n                mat3 J;\n                if (orthographicMode == 1) {\n                    // Since the projection is linear, we don't need an approximation\n                    J = transpose(mat3(orthoZoom, 0.0, 0.0,\n                                       0.0, orthoZoom, 0.0,\n                                       0.0, 0.0, 0.0));\n                } else {\n                    // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\n                    // 3D covariance matrix instead of using the actual projection matrix because that transformation would\n                    // require a non-linear component (perspective division) which would yield a non-gaussian result.\n                    float s = 1.0 / (viewCenter.z * viewCenter.z);\n                    J = mat3(\n                        focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                        0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                        0., 0., 0.\n                    );\n                }\n\n                // Concatenate the projection approximation with the model-view transformation\n                mat3 W = transpose(mat3(transformModelViewMatrix));\n                mat3 T = W * J;\n\n                // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\n                mat3 cov2Dm = transpose(T) * Vrk * T;\n                `;\n\n            if (antialiased) {\n                vertexShaderSource += `\n                    float detOrig = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                    cov2Dm[0][0] += 0.3;\n                    cov2Dm[1][1] += 0.3;\n                    float detBlur = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                    float compensation = sqrt(max(detOrig / detBlur, 0.0));\n                `;\n            } else {\n                vertexShaderSource += `\n                    cov2Dm[0][0] += 0.3;\n                    cov2Dm[1][1] += 0.3;\n                    float compensation = 1.0;\n                `;\n            }\n\n            vertexShaderSource += `\n\n                vColor.a *= compensation;\n\n                if (vColor.a < minAlpha) return;\n\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n                // need cov2Dm[1][0] because it is a symetric matrix.\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n                // so that we can determine the 2D basis for the splat. This is done using the method described\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n                // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\n                // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * eigen-value), which is\n                // equal to scaling them by sqrt(8) standard deviations.\n                //\n                // This is a different approach than in the original work at INRIA. In that work they compute the\n                // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\n                // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\n                // times the maximum eigen-value, or 3 standard deviations. They then use the inverse 2D covariance\n                // matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by calculating the\n                // full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\n                float a = cov2Dv.x;\n                float d = cov2Dv.z;\n                float b = cov2Dv.y;\n                float D = a * d - b * b;\n                float trace = a + d;\n                float traceOver2 = 0.5 * trace;\n                float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\n                float eigenValue1 = traceOver2 + term2;\n                float eigenValue2 = traceOver2 - term2;\n\n                if (pointCloudModeEnabled == 1) {\n                    eigenValue1 = eigenValue2 = 0.2;\n                }\n\n                if (eigenValue2 <= 0.0) return;\n\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n                // since the eigen vectors are orthogonal, we derive the second one from the first\n                vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n\n                // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\n                vec2 basisVector1 = eigenVector1 * splatScale * min(sqrt8 * sqrt(eigenValue1), ${parseInt(maxScreenSpaceSplatSize)}.0);\n                vec2 basisVector2 = eigenVector2 * splatScale * min(sqrt8 * sqrt(eigenValue2), ${parseInt(maxScreenSpaceSplatSize)}.0);\n\n                if (fadeInComplete == 0) {\n                    float opacityAdjust = 1.0;\n                    float centerDist = length(splatCenter - sceneCenter);\n                    float renderTime = max(currentTime - firstRenderTime, 0.0);\n\n                    float fadeDistance = 0.75;\n                    float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);\n                    distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +\n                                               (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *\n                                               distanceLoadFadeInFactor;\n                    opacityAdjust *= distanceLoadFadeInFactor;\n                    vColor.a *= opacityAdjust;\n                }\n\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) *\n                                 basisViewport * 2.0 * inverseFocalAdjustment;\n\n                vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n                gl_Position = quadPos;\n\n                // Scale the position data we send to the fragment shader\n                vPosition *= sqrt8;\n            }`;\n\n        const fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n \n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            void main () {\n                // Compute the positional squared distance from the center of the splat to the current fragment.\n                float A = dot(vPosition, vPosition);\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\n                // defined by the rectangle formed by vPosition. It also means it's farther\n                // away than sqrt(8) standard deviations from the mean.\n                if (A > 8.0) discard;\n                vec3 color = vColor.rgb;\n\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\n                // and since 'mean' is zero, we have X * X, which is the same as A:\n                float opacity = exp(-0.5 * A) * vColor.a;\n\n                gl_FragColor = vec4(color.rgb, opacity);\n            }`;\n\n        const uniforms = {\n            'sceneCenter': {\n                'type': 'v3',\n                'value': new THREE.Vector3()\n            },\n            'fadeInComplete': {\n                'type': 'i',\n                'value': 0\n            },\n            'orthographicMode': {\n                'type': 'i',\n                'value': 0\n            },\n            'visibleRegionFadeStartRadius': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'visibleRegionRadius': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'currentTime': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'firstRenderTime': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'covariancesTexture': {\n                'type': 't',\n                'value': null\n            },\n            'centersColorsTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sphericalHarmonicsTexture': {\n                'type': 't',\n                'value': null\n            },\n            'focal': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'orthoZoom': {\n                'type': 'f',\n                'value': 1.0\n            },\n            'inverseFocalAdjustment': {\n                'type': 'f',\n                'value': 1.0\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'basisViewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'debugColor': {\n                'type': 'v3',\n                'value': new THREE.Color()\n            },\n            'covariancesTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'centersColorsTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'sphericalHarmonicsDegree': {\n                'type': 'i',\n                'value': maxSphericalHarmonicsDegree\n            },\n            'sphericalHarmonicsTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'sphericalHarmonics8BitMode': {\n                'type': 'i',\n                'value': 0\n            },\n            'splatScale': {\n                'type': 'f',\n                'value': splatScale\n            },\n            'pointCloudModeEnabled': {\n                'type': 'i',\n                'value': pointCloudModeEnabled ? 1 : 0\n            }\n        };\n\n        if (dynamicMode) {\n            uniforms['transformIndexesTexture'] = {\n                'type': 't',\n                'value': null\n            };\n            const transformMatrices = [];\n            for (let i = 0; i < Constants.MaxScenes; i++) {\n                transformMatrices.push(new THREE.Matrix4());\n            }\n            uniforms['transforms'] = {\n                'type': 'mat4',\n                'value': transformMatrices\n            };\n            uniforms['transformIndexesTextureSize'] = {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            };\n        }\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            alphaTest: 1.0,\n            blending: THREE.NormalBlending,\n            depthTest: true,\n            depthWrite: false,\n            side: THREE.DoubleSide\n        });\n\n        return material;\n    }\n\n    /**\n     * Build the Three.js geometry that will be used to render the splats. The geometry is instanced and is made up of\n     * vertices for a single quad as well as an attribute buffer for the splat indexes.\n     * @param {number} maxSplatCount The maximum number of splats that the geometry will need to accomodate\n     * @return {THREE.InstancedBufferGeometry}\n     */\n    static buildGeomtery(maxSplatCount) {\n\n        const baseGeometry = new THREE.BufferGeometry();\n        baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n        // Vertices for the instanced quad\n        const positionsArray = new Float32Array(4 * 3);\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\n        baseGeometry.setAttribute('position', positions);\n        positions.setXYZ(0, -1.0, -1.0, 0.0);\n        positions.setXYZ(1, -1.0, 1.0, 0.0);\n        positions.setXYZ(2, 1.0, 1.0, 0.0);\n        positions.setXYZ(3, 1.0, -1.0, 0.0);\n        positions.needsUpdate = true;\n\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\n\n        // Splat index buffer\n        const splatIndexArray = new Uint32Array(maxSplatCount);\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\n        geometry.setAttribute('splatIndex', splatIndexes);\n\n        geometry.instanceCount = 0;\n\n        return geometry;\n    }\n\n    /**\n     * Build a container for each scene managed by this splat mesh based on an instance of SplatBuffer, along with optional\n     * transform data (position, scale, rotation) passed to the splat mesh during the build process.\n     * @param {Array<THREE.Matrix4>} splatBuffers SplatBuffer instances containing splats for each scene\n     * @param {Array<object>} sceneOptions Array of options objects: {\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @return {Array<THREE.Matrix4>}\n     */\n    static buildScenes(splatBuffers, sceneOptions) {\n        const scenes = [];\n        scenes.length = splatBuffers.length;\n        for (let i = 0; i < splatBuffers.length; i++) {\n            const splatBuffer = splatBuffers[i];\n            const options = sceneOptions[i] || {};\n            let positionArray = options['position'] || [0, 0, 0];\n            let rotationArray = options['rotation'] || [0, 0, 0, 1];\n            let scaleArray = options['scale'] || [1, 1, 1];\n            const position = new THREE.Vector3().fromArray(positionArray);\n            const rotation = new THREE.Quaternion().fromArray(rotationArray);\n            const scale = new THREE.Vector3().fromArray(scaleArray);\n            scenes[i] = SplatMesh.createScene(splatBuffer, position, rotation, scale, options.splatAlphaRemovalThreshold || 1);\n        }\n        return scenes;\n    }\n\n    static createScene(splatBuffer, position, rotation, scale, minimumAlpha) {\n        return new SplatScene(splatBuffer, position, rotation, scale, minimumAlpha);\n    }\n\n    /**\n     * Build data structures that map global splat indexes (based on a unified index across all splat buffers) to\n     * local data within a single scene.\n     * @param {Array<SplatBuffer>} splatBuffers Instances of SplatBuffer off which to build the maps\n     * @return {object}\n     */\n    static buildSplatIndexMaps(splatBuffers) {\n        const localSplatIndexMap = [];\n        const sceneIndexMap = [];\n        let totalSplatCount = 0;\n        for (let s = 0; s < splatBuffers.length; s++) {\n            const splatBuffer = splatBuffers[s];\n            const maxSplatCount = splatBuffer.getMaxSplatCount();\n            for (let i = 0; i < maxSplatCount; i++) {\n                localSplatIndexMap[totalSplatCount] = i;\n                sceneIndexMap[totalSplatCount] = s;\n                totalSplatCount++;\n            }\n        }\n        return {\n            localSplatIndexMap,\n            sceneIndexMap\n        };\n    }\n\n    /**\n     * Build an instance of SplatTree (a specialized octree) for the given splat mesh.\n     * @param {Array<number>} minAlphas Array of minimum splat slphas for each scene\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                                            builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                           the format produced by the splat tree builder worker starts and ends.\n     * @return {SplatTree}\n     */\n     buildSplatTree = function(minAlphas = [], onSplatTreeIndexesUpload, onSplatTreeConstruction) {\n        return new Promise((resolve) => {\n            this.disposeSplatTree();\n            // TODO: expose SplatTree constructor parameters (maximumDepth and maxCentersPerNode) so that they can\n            // be configured on a per-scene basis\n            this.baseSplatTree = new SplatTree(8, 1000);\n            const buildStartTime = performance.now();\n            const splatColor = new THREE.Vector4();\n            this.baseSplatTree.processSplatMesh(this, (splatIndex) => {\n                this.getSplatColor(splatIndex, splatColor);\n                const sceneIndex = this.getSceneIndexForSplat(splatIndex);\n                const minAlpha = minAlphas[sceneIndex] || 1;\n                return splatColor.w >= minAlpha;\n            }, onSplatTreeIndexesUpload, onSplatTreeConstruction)\n            .then(() => {\n                const buildTime = performance.now() - buildStartTime;\n                if (this.logLevel >= LogLevel.Info) console.log('SplatTree build: ' + buildTime + ' ms');\n                if (this.disposed) {\n                    resolve();\n                } else {\n\n                    this.splatTree = this.baseSplatTree;\n                    this.baseSplatTree = null;\n\n                    let leavesWithVertices = 0;\n                    let avgSplatCount = 0;\n                    let maxSplatCount = 0;\n                    let nodeCount = 0;\n\n                    this.splatTree.visitLeaves((node) => {\n                        const nodeSplatCount = node.data.indexes.length;\n                        if (nodeSplatCount > 0) {\n                            avgSplatCount += nodeSplatCount;\n                            maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\n                            nodeCount++;\n                            leavesWithVertices++;\n                        }\n                    });\n                    if (this.logLevel >= LogLevel.Info) {\n                        console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`);\n                        console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\n                        avgSplatCount = avgSplatCount / nodeCount;\n                        console.log(`Avg splat count per node: ${avgSplatCount}`);\n                        console.log(`Total splat count: ${this.getSplatCount()}`);\n                    }\n                    resolve();\n                }\n            });\n        });\n    };\n\n    /**\n     * Construct this instance of SplatMesh.\n     * @param {Array<SplatBuffer>} splatBuffers The base splat data, instances of SplatBuffer\n     * @param {Array<object>} sceneOptions Dynamic options for each scene {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     * }\n     * @param {boolean} keepSceneTransforms For a scene that already exists and is being overwritten, this flag\n     *                                      says to keep the transform from the existing scene.\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                                            builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                           the format produced by the splat tree builder worker starts and ends.\n     * @return {object} Object containing info about the splats that are updated\n     */\n    build(splatBuffers, sceneOptions, keepSceneTransforms = true, finalBuild = false,\n          onSplatTreeIndexesUpload, onSplatTreeConstruction) {\n\n        this.sceneOptions = sceneOptions;\n        this.finalBuild = finalBuild;\n\n        const maxSplatCount = SplatMesh.getTotalMaxSplatCountForSplatBuffers(splatBuffers);\n\n        const newScenes = SplatMesh.buildScenes(splatBuffers, sceneOptions);\n        if (keepSceneTransforms) {\n            for (let i = 0; i < this.scenes.length && i < newScenes.length; i++) {\n                const newScene = newScenes[i];\n                const existingScene = this.getScene(i);\n                newScene.copyTransformData(existingScene);\n            }\n        }\n        this.scenes = newScenes;\n\n        let minSphericalHarmonicsDegree = 3;\n        for (let splatBuffer of splatBuffers) {\n            const splatBufferSphericalHarmonicsDegree = splatBuffer.getMinSphericalHarmonicsDegree();\n            if (splatBufferSphericalHarmonicsDegree < minSphericalHarmonicsDegree) {\n                minSphericalHarmonicsDegree = splatBufferSphericalHarmonicsDegree;\n            }\n        }\n        this.minSphericalHarmonicsDegree = Math.min(minSphericalHarmonicsDegree, this.sphericalHarmonicsDegree);\n\n        let splatBuffersChanged = false;\n        if (splatBuffers.length !== this.lastBuildScenes.length) {\n            splatBuffersChanged = true;\n        } else {\n            for (let i = 0; i < splatBuffers.length; i++) {\n                const splatBuffer = splatBuffers[i];\n                if (splatBuffer !== this.lastBuildScenes[i].splatBuffer) {\n                    splatBuffersChanged = true;\n                    break;\n                }\n            }\n        }\n\n        let isUpdateBuild = true;\n        if (this.scenes.length !== 1 ||\n            this.lastBuildSceneCount !== this.scenes.length ||\n            this.lastBuildMaxSplatCount !== maxSplatCount ||\n            splatBuffersChanged) {\n                isUpdateBuild = false;\n       }\n\n       if (!isUpdateBuild) {\n            this.boundingBox = new THREE.Box3();\n            this.maxSplatDistanceFromSceneCenter = 0;\n            this.visibleRegionBufferRadius = 0;\n            this.visibleRegionRadius = 0;\n            this.visibleRegionFadeStartRadius = 0;\n            this.firstRenderTime = -1;\n            this.lastBuildScenes = [];\n            this.lastBuildSplatCount = 0;\n            this.lastBuildMaxSplatCount = 0;\n            this.disposeMeshData();\n            this.geometry = SplatMesh.buildGeomtery(maxSplatCount);\n            this.material = SplatMesh.buildMaterial(this.dynamicMode, this.antialiased, this.maxScreenSpaceSplatSize,\n                                                    this.splatScale, this.pointCloudModeEnabled, this.minSphericalHarmonicsDegree);\n            const indexMaps = SplatMesh.buildSplatIndexMaps(splatBuffers);\n            this.globalSplatIndexToLocalSplatIndexMap = indexMaps.localSplatIndexMap;\n            this.globalSplatIndexToSceneIndexMap = indexMaps.sceneIndexMap;\n        }\n\n        const splatCount = this.getSplatCount();\n        if (this.enableDistancesComputationOnGPU) this.setupDistancesComputationTransformFeedback();\n        const dataUpdateResults = this.refreshGPUDataFromSplatBuffers(isUpdateBuild);\n\n        for (let i = 0; i < this.scenes.length; i++) {\n            this.lastBuildScenes[i] = this.scenes[i];\n        }\n        this.lastBuildSplatCount = splatCount;\n        this.lastBuildMaxSplatCount = this.getMaxSplatCount();\n        this.lastBuildSceneCount = this.scenes.length;\n\n        if (finalBuild && this.scenes.length > 0) {\n            this.buildSplatTree(sceneOptions.map(options => options.splatAlphaRemovalThreshold || 1),\n                                onSplatTreeIndexesUpload, onSplatTreeConstruction)\n            .then(() => {\n                if (this.onSplatTreeReadyCallback) this.onSplatTreeReadyCallback(this.splatTree);\n            });\n        }\n\n        this.visible = (this.scenes.length > 0);\n\n        return dataUpdateResults;\n    }\n\n    /**\n     * Dispose all resources held by the splat mesh\n     */\n    dispose() {\n        this.disposeMeshData();\n        this.disposeTextures();\n        this.disposeSplatTree();\n        if (this.enableDistancesComputationOnGPU) {\n            if (this.computeDistancesOnGPUSyncTimeout) {\n                clearTimeout(this.computeDistancesOnGPUSyncTimeout);\n                this.computeDistancesOnGPUSyncTimeout = null;\n            }\n            this.disposeDistancesComputationGPUResources();\n        }\n        this.scenes = [];\n        this.distancesTransformFeedback = {\n            'id': null,\n            'vertexShader': null,\n            'fragmentShader': null,\n            'program': null,\n            'centersBuffer': null,\n            'transformIndexesBuffer': null,\n            'outDistancesBuffer': null,\n            'centersLoc': -1,\n            'modelViewProjLoc': -1,\n            'transformIndexesLoc': -1,\n            'transformsLocs': []\n        };\n        this.renderer = null;\n\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSceneIndexMap = [];\n\n        this.lastBuildSplatCount = 0;\n        this.lastBuildScenes = [];\n        this.lastBuildMaxSplatCount = 0;\n        this.lastBuildSceneCount = 0;\n        this.firstRenderTime = -1;\n        this.finalBuild = false;\n\n        this.webGLUtils = null;\n\n        this.boundingBox = new THREE.Box3();\n        this.calculatedSceneCenter = new THREE.Vector3();\n        this.maxSplatDistanceFromSceneCenter = 0;\n        this.visibleRegionBufferRadius = 0;\n        this.visibleRegionRadius = 0;\n        this.visibleRegionFadeStartRadius = 0;\n        this.visibleRegionChanging = false;\n\n        this.splatScale = 1.0;\n        this.pointCloudModeEnabled = false;\n\n        this.disposed = true;\n        this.lastRenderer = null;\n        this.visible = false;\n    }\n\n    /**\n     * Dispose of only the Three.js mesh resources (geometry, material, and texture)\n     */\n    disposeMeshData() {\n        if (this.geometry && this.geometry !== dummyGeometry) {\n            this.geometry.dispose();\n            this.geometry = null;\n        }\n        if (this.material) {\n            this.material.dispose();\n            this.material = null;\n        }\n    }\n\n    disposeTextures() {\n        for (let textureKey in this.splatDataTextures) {\n            if (this.splatDataTextures.hasOwnProperty(textureKey)) {\n                const textureContainer = this.splatDataTextures[textureKey];\n                if (textureContainer.texture) {\n                    textureContainer.texture.dispose();\n                    textureContainer.texture = null;\n                }\n            }\n        }\n        this.splatDataTextures = null;\n    }\n\n    disposeSplatTree() {\n        if (this.splatTree) {\n            this.splatTree.dispose();\n            this.splatTree = null;\n        } else if (this.baseSplatTree) {\n            this.baseSplatTree.dispose();\n            this.baseSplatTree = null;\n        }\n    }\n\n    getSplatTree() {\n        return this.splatTree;\n    }\n\n    onSplatTreeReady(callback) {\n        this.onSplatTreeReadyCallback = callback;\n    }\n\n    /**\n     * Get copies of data that are necessary for splat distance computation: splat center positions and splat\n     * scene indexes (necessary for applying dynamic scene transformations during distance computation)\n     * @param {*} start The index at which to start copying data\n     * @param {*} end  The index at which to stop copying data\n     * @return {object}\n     */\n    getDataForDistancesComputation(start, end) {\n        const centers = this.integerBasedDistancesComputation ?\n                        this.getIntegerCenters(start, end, true) :\n                        this.getFloatCenters(start, end, true);\n        const sceneIndexes = this.getSceneIndexes(start, end);\n        return {\n            centers,\n            sceneIndexes\n        };\n    }\n\n    /**\n     * Refresh data textures and GPU buffers with splat data from the splat buffers belonging to this mesh.\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n     * @return {object}\n     */\n    refreshGPUDataFromSplatBuffers(sinceLastBuildOnly) {\n        const splatCount = this.getSplatCount();\n        this.refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly);\n        const updateStart = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n        const { centers, sceneIndexes } = this.getDataForDistancesComputation(updateStart, splatCount - 1);\n        if (this.enableDistancesComputationOnGPU) {\n            this.refreshGPUBuffersForDistancesComputation(centers, sceneIndexes, sinceLastBuildOnly);\n        }\n        return {\n            'from': updateStart,\n            'to': splatCount - 1,\n            'count': splatCount - updateStart,\n            'centers': centers,\n            'sceneIndexes': sceneIndexes\n        };\n    }\n\n    /**\n     * Update the GPU buffers that are used for computing splat distances on the GPU.\n     * @param {Array<number>} centers Splat center positions\n     * @param {Array<number>} sceneIndexes Indexes of the scene to which each splat belongs\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n     */\n    refreshGPUBuffersForDistancesComputation(centers, sceneIndexes, sinceLastBuildOnly = false) {\n        const offset = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n        this.updateGPUCentersBufferForDistancesComputation(sinceLastBuildOnly, centers, offset);\n        this.updateGPUTransformIndexesBufferForDistancesComputation(sinceLastBuildOnly, sceneIndexes, offset);\n    }\n\n    /**\n     * Refresh data textures with data from the splat buffers for this mesh.\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n     */\n    refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly) {\n        if (!sinceLastBuildOnly) {\n            this.setupDataTextures();\n        } else {\n            this.updateDataTextures();\n        }\n        this.updateVisibleRegion(sinceLastBuildOnly);\n    }\n\n    setupDataTextures() {\n        const maxSplatCount = this.getMaxSplatCount();\n        const splatCount = this.getSplatCount();\n\n        this.disposeTextures();\n\n        const computeDataTextureSize = (elementsPerTexel, elementsPerSplatl) => {\n            const texSize = new THREE.Vector2(4096, 1024);\n            while (texSize.x * texSize.y * elementsPerTexel < maxSplatCount * elementsPerSplatl) texSize.y *= 2;\n            return texSize;\n        };\n\n        const covarianceCompressionLevel = this.getTargetCovarianceCompressionLevel();\n        const sphericalHarmonicsCompressionLevel = this.getTargetSphericalHarmonicsCompressionLevel();\n\n        const covariances = new Float32Array(maxSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT);\n        const centers = new Float32Array(maxSplatCount * 3);\n        const colors = new Uint8Array(maxSplatCount * 4);\n\n        let SphericalHarmonicsArrayType = Float32Array;\n        if (sphericalHarmonicsCompressionLevel === 1) SphericalHarmonicsArrayType = Uint16Array;\n        else if (sphericalHarmonicsCompressionLevel === 2) SphericalHarmonicsArrayType = Uint8Array;\n        const sphericalHarmonicsComponentCount = getSphericalHarmonicsComponentCountForDegree(this.minSphericalHarmonicsDegree);\n        let paddedSphericalHarmonicsComponentCount = sphericalHarmonicsComponentCount;\n        if (paddedSphericalHarmonicsComponentCount % 2 !== 0) paddedSphericalHarmonicsComponentCount++;\n        const sphericalHarmonics = this.minSphericalHarmonicsDegree ?\n                                   new SphericalHarmonicsArrayType(maxSplatCount * sphericalHarmonicsComponentCount) : undefined;\n\n        this.fillSplatDataArrays(covariances, centers, colors, sphericalHarmonics, undefined,\n                                 covarianceCompressionLevel, sphericalHarmonicsCompressionLevel);\n\n        // set up covariances data texture\n        const covTexSize = computeDataTextureSize(COVARIANCES_ELEMENTS_PER_TEXEL, 6);\n        let CovariancesDataType = covarianceCompressionLevel >= 1 ? Uint16Array : Float32Array;\n        let covariancesTextureType = covarianceCompressionLevel >= 1 ? THREE.HalfFloatType : THREE.FloatType;\n        const paddedCovariances = new CovariancesDataType(covTexSize.x * covTexSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\n        paddedCovariances.set(covariances);\n\n        const covTex = new THREE.DataTexture(paddedCovariances, covTexSize.x, covTexSize.y, THREE.RGBAFormat, covariancesTextureType);\n        covTex.needsUpdate = true;\n        this.material.uniforms.covariancesTexture.value = covTex;\n        this.material.uniforms.covariancesTextureSize.value.copy(covTexSize);\n\n        // set up centers/colors data texture\n        const centersColsTexSize = computeDataTextureSize(CENTER_COLORS_ELEMENTS_PER_TEXEL, 4);\n        const paddedCentersCols = new Uint32Array(centersColsTexSize.x * centersColsTexSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\n        SplatMesh.updateCenterColorsPaddedData(0, splatCount, centers, colors, paddedCentersCols);\n\n        const centersColsTex = new THREE.DataTexture(paddedCentersCols, centersColsTexSize.x, centersColsTexSize.y,\n                                                     THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\n        centersColsTex.internalFormat = 'RGBA32UI';\n        centersColsTex.needsUpdate = true;\n        this.material.uniforms.centersColorsTexture.value = centersColsTex;\n        this.material.uniforms.centersColorsTextureSize.value.copy(centersColsTexSize);\n        this.material.uniformsNeedUpdate = true;\n\n        this.splatDataTextures = {\n            'baseData': {\n                'covariances': covariances,\n                'centers': centers,\n                'colors': colors,\n                'sphericalHarmonics': sphericalHarmonics\n            },\n            'covariances': {\n                'data': paddedCovariances,\n                'texture': covTex,\n                'size': covTexSize,\n                'compressionLevel': covarianceCompressionLevel\n            },\n            'centerColors': {\n                'data': paddedCentersCols,\n                'texture': centersColsTex,\n                'size': centersColsTexSize\n            }\n        };\n\n        if (sphericalHarmonics) {\n            const sphericalHarmonicsElementsPerTexel = 4;\n            const sphericalHarmonicsTexSize = computeDataTextureSize(sphericalHarmonicsElementsPerTexel,\n                                                                     paddedSphericalHarmonicsComponentCount);\n            const paddedSHArraySize = sphericalHarmonicsTexSize.x * sphericalHarmonicsTexSize.y * sphericalHarmonicsElementsPerTexel;\n            const paddedSHArray = new SphericalHarmonicsArrayType(paddedSHArraySize);\n            for (let c = 0; c < splatCount; c++) {\n                const srcBase = sphericalHarmonicsComponentCount * c;\n                const destBase = paddedSphericalHarmonicsComponentCount * c;\n                for (let i = 0; i < sphericalHarmonicsComponentCount; i++) {\n                    paddedSHArray[destBase + i] = sphericalHarmonics[srcBase + i];\n                }\n            }\n\n            const textureType = sphericalHarmonicsCompressionLevel === 2 ? THREE.UnsignedByteType : THREE.HalfFloatType;\n            const sphericalHarmonicsTex = new THREE.DataTexture(paddedSHArray, sphericalHarmonicsTexSize.x,\n                                                                sphericalHarmonicsTexSize.y, THREE.RGBAFormat, textureType);\n            sphericalHarmonicsTex.needsUpdate = true;\n            this.material.uniforms.sphericalHarmonicsTexture.value = sphericalHarmonicsTex;\n            this.material.uniforms.sphericalHarmonicsTextureSize.value.copy(sphericalHarmonicsTexSize);\n            if (sphericalHarmonicsCompressionLevel === 2) {\n                this.material.uniforms.sphericalHarmonics8BitMode.value = 1;\n            }\n            this.material.uniformsNeedUpdate = true;\n\n            this.splatDataTextures['sphericalHarmonics'] = {\n                'componentCount': sphericalHarmonicsComponentCount,\n                'paddedComponentCount': paddedSphericalHarmonicsComponentCount,\n                'data': paddedSHArray,\n                'texture': sphericalHarmonicsTex,\n                'size': sphericalHarmonicsTexSize,\n                'compressionLevel': sphericalHarmonicsCompressionLevel\n            };\n        }\n\n        if (this.dynamicMode) {\n            const transformIndexesTexSize = computeDataTextureSize(TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL, 4);\n            const paddedTransformIndexes = new Uint32Array(transformIndexesTexSize.x *\n                                                           transformIndexesTexSize.y * TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL);\n            for (let c = 0; c < splatCount; c++) paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n            const transformIndexesTexture = new THREE.DataTexture(paddedTransformIndexes, transformIndexesTexSize.x,\n                                                                  transformIndexesTexSize.y, THREE.RedIntegerFormat,\n                                                                  THREE.UnsignedIntType);\n            transformIndexesTexture.internalFormat = 'R32UI';\n            transformIndexesTexture.needsUpdate = true;\n            this.material.uniforms.transformIndexesTexture.value = transformIndexesTexture;\n            this.material.uniforms.transformIndexesTextureSize.value.copy(transformIndexesTexSize);\n            this.material.uniformsNeedUpdate = true;\n            this.splatDataTextures['tansformIndexes'] = {\n                'data': paddedTransformIndexes,\n                'texture': transformIndexesTexture,\n                'size': transformIndexesTexSize\n            };\n        }\n    }\n\n    updateDataTextures() {\n        const splatCount = this.getSplatCount();\n        const covarianceCompressionLevel = this.splatDataTextures['covariances'].compressionLevel;\n\n        const sphericalHarmonicsTextureDesc = this.splatDataTextures['sphericalHarmonics'];\n        const sphericalHarmonicsCompressionLevel = sphericalHarmonicsTextureDesc ? sphericalHarmonicsTextureDesc.compressionLevel : 0;\n\n        this.fillSplatDataArrays(this.splatDataTextures.baseData.covariances,\n                                 this.splatDataTextures.baseData.centers, this.splatDataTextures.baseData.colors,\n                                 this.splatDataTextures.baseData.sphericalHarmonics, undefined, covarianceCompressionLevel,\n                                 sphericalHarmonicsCompressionLevel, this.lastBuildSplatCount, splatCount - 1, this.lastBuildSplatCount);\n\n        const covariancesTextureDescriptor = this.splatDataTextures['covariances'];\n        const paddedCovariances = covariancesTextureDescriptor.data;\n        const covariancesTexture = covariancesTextureDescriptor.texture;\n        const covarancesStartSplat = this.lastBuildSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT;\n        const covariancesEndSplat = splatCount * COVARIANCES_ELEMENTS_PER_SPLAT;\n        for (let i = covarancesStartSplat; i < covariancesEndSplat; i++) {\n            const covariance = this.splatDataTextures.baseData.covariances[i];\n            paddedCovariances[i] = covariance;\n        }\n        const covariancesTextureProps = this.renderer ? this.renderer.properties.get(covariancesTexture) : null;\n        if (!covariancesTextureProps || !covariancesTextureProps.__webglTexture) {\n            covariancesTexture.needsUpdate = true;\n        } else {\n            const covaranceBytesPerElement = covarianceCompressionLevel ? 2 : 4;\n            this.updateDataTexture(paddedCovariances, covariancesTextureDescriptor, covariancesTextureProps,\n                                   COVARIANCES_ELEMENTS_PER_TEXEL, COVARIANCES_ELEMENTS_PER_SPLAT, covaranceBytesPerElement,\n                                   this.lastBuildSplatCount, splatCount - 1);\n        }\n\n        const centerColorsTextureDescriptor = this.splatDataTextures['centerColors'];\n        const paddedCenterColors = centerColorsTextureDescriptor.data;\n        const centerColorsTexture = centerColorsTextureDescriptor.texture;\n        SplatMesh.updateCenterColorsPaddedData(this.lastBuildSplatCount, splatCount, this.splatDataTextures.baseData.centers,\n                                               this.splatDataTextures.baseData.colors, paddedCenterColors);\n        const centerColorsTextureProps = this.renderer ? this.renderer.properties.get(centerColorsTexture) : null;\n        if (!centerColorsTextureProps || !centerColorsTextureProps.__webglTexture) {\n            centerColorsTexture.needsUpdate = true;\n        } else {\n            this.updateDataTexture(paddedCenterColors, centerColorsTextureDescriptor, centerColorsTextureProps,\n                                   CENTER_COLORS_ELEMENTS_PER_TEXEL, CENTER_COLORS_ELEMENTS_PER_SPLAT, 4,\n                                   this.lastBuildSplatCount, splatCount - 1);\n        }\n\n        if (this.splatDataTextures.baseData.sphericalHarmonics) {\n            const sphericalHarmonicsComponentCount = sphericalHarmonicsTextureDesc.componentCount;\n            const paddedSphericalHarmonicsComponentCount = sphericalHarmonicsTextureDesc.paddedComponentCount;\n            const paddedSHArray = sphericalHarmonicsTextureDesc.data;\n            for (let c = this.lastBuildSplatCount; c < splatCount; c++) {\n                const srcBase = sphericalHarmonicsComponentCount * c;\n                const destBase = paddedSphericalHarmonicsComponentCount * c;\n                for (let i = 0; i < sphericalHarmonicsComponentCount; i++) {\n                    paddedSHArray[destBase + i] = this.splatDataTextures.baseData.sphericalHarmonics[srcBase + i];\n                }\n            }\n\n            const sphericalHarmonicsTex = sphericalHarmonicsTextureDesc.texture;\n            const sphericalHarmonicsTextureProps = this.renderer ? this.renderer.properties.get(sphericalHarmonicsTex) : null;\n            if (!sphericalHarmonicsTextureProps || !sphericalHarmonicsTextureProps.__webglTexture) {\n                sphericalHarmonicsTex.needsUpdate = true;\n            } else {\n                const sphericalHarmonicsElementsPerTexel = 4;\n                let sphericalHarmonicsBytesPerElement = 4;\n                if (sphericalHarmonicsCompressionLevel === 1) sphericalHarmonicsBytesPerElement = 2;\n                else if (sphericalHarmonicsCompressionLevel === 2) sphericalHarmonicsBytesPerElement = 1;\n                this.updateDataTexture(paddedSHArray, sphericalHarmonicsTextureDesc, sphericalHarmonicsTextureProps,\n                                       sphericalHarmonicsElementsPerTexel, paddedSphericalHarmonicsComponentCount,\n                                       sphericalHarmonicsBytesPerElement, this.lastBuildSplatCount, splatCount - 1);\n            }\n        }\n\n        if (this.dynamicMode) {\n            const transformIndexesTexDesc = this.splatDataTextures['tansformIndexes'];\n            const paddedTransformIndexes = transformIndexesTexDesc.data;\n            for (let c = this.lastBuildSplatCount; c < splatCount; c++) {\n                paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n            }\n\n            const transformIndexesTexture = transformIndexesTexDesc.texture;\n            const transformIndexesTextureProps = this.renderer ? this.renderer.properties.get(transformIndexesTexture) : null;\n            if (!transformIndexesTextureProps || !transformIndexesTextureProps.__webglTexture) {\n                transformIndexesTexture.needsUpdate = true;\n            } else {\n                this.updateDataTexture(paddedTransformIndexes, transformIndexesTexDesc, transformIndexesTextureProps, 1, 1, 1,\n                                       this.lastBuildSplatCount, splatCount - 1);\n            }\n        }\n    }\n\n    getTargetCovarianceCompressionLevel() {\n        return this.halfPrecisionCovariancesOnGPU ? 1 : 0;\n    }\n\n    getTargetSphericalHarmonicsCompressionLevel() {\n        return Math.max(1, this.getMaximumSplatBufferCompressionLevel());\n    }\n\n    getMaximumSplatBufferCompressionLevel() {\n        let maxCompressionLevel;\n        for (let i = 0; i < this.scenes.length; i++) {\n            const scene = this.getScene(i);\n            const splatBuffer = scene.splatBuffer;\n            if (i === 0 || splatBuffer.compressionLevel > maxCompressionLevel) {\n                maxCompressionLevel = splatBuffer.compressionLevel;\n            }\n        }\n        return maxCompressionLevel;\n    }\n\n    getMinimumSplatBufferCompressionLevel() {\n        let minCompressionLevel;\n        for (let i = 0; i < this.scenes.length; i++) {\n            const scene = this.getScene(i);\n            const splatBuffer = scene.splatBuffer;\n            if (i === 0 || splatBuffer.compressionLevel < minCompressionLevel) {\n                minCompressionLevel = splatBuffer.compressionLevel;\n            }\n        }\n        return minCompressionLevel;\n    }\n\n    static computeTextureUpdateRegion(startSplat, endSplat, textureWidth, elementsPerTexel, elementsPerSplat) {\n        const texelsPerSplat = elementsPerSplat / elementsPerTexel;\n\n        const startSplatTexels = startSplat * texelsPerSplat;\n        const startRow = Math.floor(startSplatTexels / textureWidth);\n        const startRowElement = startRow * textureWidth * elementsPerTexel;\n\n        const endSplatTexels = endSplat * texelsPerSplat;\n        const endRow = Math.floor(endSplatTexels / textureWidth);\n        const endRowEndElement = endRow * textureWidth * elementsPerTexel + (textureWidth * elementsPerTexel);\n\n        return {\n            'dataStart': startRowElement,\n            'dataEnd': endRowEndElement,\n            'startRow': startRow,\n            'endRow': endRow\n        };\n    }\n\n    updateDataTexture(paddedData, textureDesc, textureProps, elementsPerTexel, elementsPerSplat, bytesPerElement, from, to) {\n        const gl = this.renderer.getContext();\n        const updateRegion = SplatMesh.computeTextureUpdateRegion(from, to, textureDesc.size.x, elementsPerTexel, elementsPerSplat);\n        const updateElementCount = updateRegion.dataEnd - updateRegion.dataStart;\n        const updateDataView = new paddedData.constructor(paddedData.buffer,\n                                                          updateRegion.dataStart * bytesPerElement, updateElementCount);\n        const updateHeight = updateRegion.endRow - updateRegion.startRow + 1;\n        const dataTexture = textureDesc.texture;\n        const glType = this.webGLUtils.convert(dataTexture.type);\n        const glFormat = this.webGLUtils.convert(dataTexture.format, dataTexture.colorSpace);\n        const currentTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\n        gl.bindTexture(gl.TEXTURE_2D, textureProps.__webglTexture);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, updateRegion.startRow,\n                         textureDesc.size.x, updateHeight, glFormat, glType, updateDataView);\n        gl.bindTexture(gl.TEXTURE_2D, currentTexture);\n    }\n\n\n    static updateCenterColorsPaddedData(to, from, centers, colors, paddedCenterColors) {\n        for (let c = to; c < from; c++) {\n            const colorsBase = c * 4;\n            const centersBase = c * 3;\n            const centerColorsBase = c * 4;\n            paddedCenterColors[centerColorsBase] = rgbaArrayToInteger(colors, colorsBase);\n            paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(centers[centersBase]);\n            paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(centers[centersBase + 1]);\n            paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(centers[centersBase + 2]);\n        }\n    }\n\n    updateVisibleRegion(sinceLastBuildOnly) {\n        const splatCount = this.getSplatCount();\n        const tempCenter = new THREE.Vector3();\n        if (!sinceLastBuildOnly) {\n            const avgCenter = new THREE.Vector3();\n            this.scenes.forEach((scene) => {\n                avgCenter.add(scene.splatBuffer.sceneCenter);\n            });\n            avgCenter.multiplyScalar(1.0 / this.scenes.length);\n            this.calculatedSceneCenter.copy(avgCenter);\n            this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter);\n            this.material.uniformsNeedUpdate = true;\n        }\n\n        const startSplatFormMaxDistanceCalc = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n        for (let i = startSplatFormMaxDistanceCalc; i < splatCount; i++) {\n            this.getSplatCenter(i, tempCenter, false);\n            const distFromCSceneCenter = tempCenter.sub(this.calculatedSceneCenter).length();\n            if (distFromCSceneCenter > this.maxSplatDistanceFromSceneCenter) this.maxSplatDistanceFromSceneCenter = distFromCSceneCenter;\n        }\n\n        if (this.maxSplatDistanceFromSceneCenter - this.visibleRegionBufferRadius > VISIBLE_REGION_EXPANSION_DELTA) {\n            this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\n            this.visibleRegionRadius = Math.max(this.visibleRegionBufferRadius - VISIBLE_REGION_EXPANSION_DELTA, 0.0);\n        }\n        if (this.finalBuild) this.visibleRegionRadius = this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\n        this.updateVisibleRegionFadeDistance();\n    }\n\n    updateVisibleRegionFadeDistance(sceneRevealMode = SceneRevealMode.Default) {\n        const fastFadeRate = SCENE_FADEIN_RATE_FAST;\n        const gradualFadeRate = SCENE_FADEIN_RATE_GRADUAL;\n        const defaultFadeInRate = this.finalBuild ? fastFadeRate : gradualFadeRate;\n        const fadeInRate = sceneRevealMode === SceneRevealMode.Default ? defaultFadeInRate : gradualFadeRate;\n        this.visibleRegionFadeStartRadius = (this.visibleRegionRadius - this.visibleRegionFadeStartRadius) *\n                                             fadeInRate + this.visibleRegionFadeStartRadius;\n        const fadeInPercentage = (this.visibleRegionBufferRadius > 0) ?\n                                 (this.visibleRegionFadeStartRadius / this.visibleRegionBufferRadius) : 0;\n        const fadeInComplete = fadeInPercentage > 0.99;\n        const shaderFadeInComplete = (fadeInComplete || sceneRevealMode === SceneRevealMode.Instant) ? 1 : 0;\n\n        this.material.uniforms.visibleRegionFadeStartRadius.value = this.visibleRegionFadeStartRadius;\n        this.material.uniforms.visibleRegionRadius.value = this.visibleRegionRadius;\n        this.material.uniforms.firstRenderTime.value = this.firstRenderTime;\n        this.material.uniforms.currentTime.value = performance.now();\n        this.material.uniforms.fadeInComplete.value = shaderFadeInComplete;\n        this.material.uniformsNeedUpdate = true;\n        this.visibleRegionChanging = !fadeInComplete;\n    }\n\n    /**\n     * Set the indexes of splats that should be rendered; should be sorted in desired render order.\n     * @param {Uint32Array} globalIndexes Sorted index list of splats to be rendered\n     * @param {number} renderSplatCount Total number of splats to be rendered. Necessary because we may not want to render\n     *                                  every splat.\n     */\n    updateRenderIndexes(globalIndexes, renderSplatCount) {\n        const geometry = this.geometry;\n        geometry.attributes.splatIndex.set(globalIndexes);\n        geometry.attributes.splatIndex.needsUpdate = true;\n        if (renderSplatCount > 0 && this.firstRenderTime === -1) this.firstRenderTime = performance.now();\n        geometry.instanceCount = renderSplatCount;\n    }\n\n    /**\n     * Update the transforms for each scene in this splat mesh from their individual components (position,\n     * quaternion, and scale)\n     */\n    updateTransforms() {\n        for (let i = 0; i < this.scenes.length; i++) {\n            const scene = this.getScene(i);\n            scene.updateTransform();\n        }\n    }\n\n    updateUniforms = function() {\n\n        const viewport = new THREE.Vector2();\n\n        return function(renderDimensions, cameraFocalLengthX, cameraFocalLengthY,\n                        orthographicMode, orthographicZoom, inverseFocalAdjustment) {\n            const splatCount = this.getSplatCount();\n            if (splatCount > 0) {\n                viewport.set(renderDimensions.x * this.devicePixelRatio,\n                             renderDimensions.y * this.devicePixelRatio);\n                this.material.uniforms.viewport.value.copy(viewport);\n                this.material.uniforms.basisViewport.value.set(1.0 / viewport.x, 1.0 / viewport.y);\n                this.material.uniforms.focal.value.set(cameraFocalLengthX, cameraFocalLengthY);\n                this.material.uniforms.orthographicMode.value = orthographicMode ? 1 : 0;\n                this.material.uniforms.orthoZoom.value = orthographicZoom;\n                this.material.uniforms.inverseFocalAdjustment.value = inverseFocalAdjustment;\n                if (this.dynamicMode) {\n                    for (let i = 0; i < this.scenes.length; i++) {\n                        this.material.uniforms.transforms.value[i].copy(this.getScene(i).transform);\n                    }\n                }\n                this.material.uniformsNeedUpdate = true;\n            }\n        };\n\n    }();\n\n    setSplatScale(splatScale = 1) {\n        this.splatScale = splatScale;\n        this.material.uniforms.splatScale.value = splatScale;\n        this.material.uniformsNeedUpdate = true;\n    }\n\n    getSplatScale() {\n        return this.splatScale;\n    }\n\n    setPointCloudModeEnabled(enabled) {\n        this.pointCloudModeEnabled = enabled;\n        this.material.uniforms.pointCloudModeEnabled.value = enabled ? 1 : 0;\n        this.material.uniformsNeedUpdate = true;\n    }\n\n    getPointCloudModeEnabled() {\n        return this.pointCloudModeEnabled;\n    }\n\n    getSplatDataTextures() {\n        return this.splatDataTextures;\n    }\n\n    getSplatCount() {\n        return SplatMesh.getTotalSplatCountForScenes(this.scenes);\n    }\n\n    static getTotalSplatCountForScenes(scenes) {\n        let totalSplatCount = 0;\n        for (let scene of scenes) {\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getSplatCount();\n        }\n        return totalSplatCount;\n    }\n\n    static getTotalSplatCountForSplatBuffers(splatBuffers) {\n        let totalSplatCount = 0;\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getSplatCount();\n        return totalSplatCount;\n    }\n\n    getMaxSplatCount() {\n        return SplatMesh.getTotalMaxSplatCountForScenes(this.scenes);\n    }\n\n    static getTotalMaxSplatCountForScenes(scenes) {\n        let totalSplatCount = 0;\n        for (let scene of scenes) {\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getMaxSplatCount();\n        }\n        return totalSplatCount;\n    }\n\n    static getTotalMaxSplatCountForSplatBuffers(splatBuffers) {\n        let totalSplatCount = 0;\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getMaxSplatCount();\n        return totalSplatCount;\n    }\n\n    disposeDistancesComputationGPUResources() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        if (this.distancesTransformFeedback.vao) {\n            gl.deleteVertexArray(this.distancesTransformFeedback.vao);\n            this.distancesTransformFeedback.vao = null;\n        }\n        if (this.distancesTransformFeedback.program) {\n            gl.deleteProgram(this.distancesTransformFeedback.program);\n            gl.deleteShader(this.distancesTransformFeedback.vertexShader);\n            gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\n            this.distancesTransformFeedback.program = null;\n            this.distancesTransformFeedback.vertexShader = null;\n            this.distancesTransformFeedback.fragmentShader = null;\n        }\n        this.disposeDistancesComputationGPUBufferResources();\n        if (this.distancesTransformFeedback.id) {\n            gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\n            this.distancesTransformFeedback.id = null;\n        }\n    }\n\n    disposeDistancesComputationGPUBufferResources() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        if (this.distancesTransformFeedback.centersBuffer) {\n            this.distancesTransformFeedback.centersBuffer = null;\n            gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\n        }\n        if (this.distancesTransformFeedback.outDistancesBuffer) {\n            gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\n            this.distancesTransformFeedback.outDistancesBuffer = null;\n        }\n    }\n\n    /**\n     * Set the Three.js renderer used by this splat mesh\n     * @param {THREE.WebGLRenderer} renderer Instance of THREE.WebGLRenderer\n     */\n    setRenderer(renderer) {\n        if (renderer !== this.renderer) {\n            this.renderer = renderer;\n            const gl = this.renderer.getContext();\n            const extensions = new WebGLExtensions(gl);\n            const capabilities = new WebGLCapabilities(gl, extensions, {});\n            extensions.init(capabilities);\n            this.webGLUtils = new THREE.WebGLUtils(gl, extensions, capabilities);\n            if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\n                this.setupDistancesComputationTransformFeedback();\n                const { centers, sceneIndexes } = this.getDataForDistancesComputation(0, this.getSplatCount() - 1);\n                this.refreshGPUBuffersForDistancesComputation(centers, sceneIndexes);\n            }\n        }\n    }\n\n    setupDistancesComputationTransformFeedback = function() {\n\n        let currentMaxSplatCount;\n\n        return function() {\n            const maxSplatCount = this.getMaxSplatCount();\n\n            if (!this.renderer) return;\n\n            const rebuildGPUObjects = (this.lastRenderer !== this.renderer);\n            const rebuildBuffers = currentMaxSplatCount !== maxSplatCount;\n\n            if (!rebuildGPUObjects && !rebuildBuffers) return;\n\n            if (rebuildGPUObjects) {\n                this.disposeDistancesComputationGPUResources();\n            } else if (rebuildBuffers) {\n                this.disposeDistancesComputationGPUBufferResources();\n            }\n\n            const gl = this.renderer.getContext();\n\n            const createShader = (gl, type, source) => {\n                const shader = gl.createShader(type);\n                if (!shader) {\n                    console.error('Fatal error: gl could not create a shader object.');\n                    return null;\n                }\n\n                gl.shaderSource(shader, source);\n                gl.compileShader(shader);\n\n                const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n                if (!compiled) {\n                    let typeName = 'unknown';\n                    if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\n                    else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\n                    const errors = gl.getShaderInfoLog(shader);\n                    console.error('Failed to compile ' + typeName + ' with these errors:' + errors);\n                    gl.deleteShader(shader);\n                    return null;\n                }\n\n                return shader;\n            };\n\n            let vsSource;\n            if (this.integerBasedDistancesComputation) {\n                vsSource =\n                `#version 300 es\n                in ivec4 center;\n                flat out int distance;`;\n                if (this.dynamicMode) {\n                    vsSource += `\n                        in uint transformIndex;\n                        uniform ivec4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            ivec4 transform = transforms[transformIndex];\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\n                        }\n                    `;\n                } else {\n                    vsSource += `\n                        uniform ivec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n                }\n            } else {\n                vsSource =\n                `#version 300 es\n                in vec4 center;\n                flat out float distance;`;\n                if (this.dynamicMode) {\n                    vsSource += `\n                        in uint transformIndex;\n                        uniform mat4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            vec4 transformedCenter = transforms[transformIndex] * vec4(center.xyz, 1.0);\n                            distance = transformedCenter.z;\n                        }\n                    `;\n                } else {\n                    vsSource += `\n                        uniform vec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n                }\n            }\n\n            const fsSource =\n            `#version 300 es\n                precision lowp float;\n                out vec4 fragColor;\n                void main(){}\n            `;\n\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n            const currentProgramDeleted = currentProgram ? gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) : false;\n\n            if (rebuildGPUObjects) {\n                this.distancesTransformFeedback.vao = gl.createVertexArray();\n            }\n\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n            if (rebuildGPUObjects) {\n                const program = gl.createProgram();\n                const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\n                const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\n                if (!vertexShader || !fragmentShader) {\n                    throw new Error('Could not compile shaders for distances computation on GPU.');\n                }\n                gl.attachShader(program, vertexShader);\n                gl.attachShader(program, fragmentShader);\n                gl.transformFeedbackVaryings(program, ['distance'], gl.SEPARATE_ATTRIBS);\n                gl.linkProgram(program);\n\n                const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n                if (!linked) {\n                    const error = gl.getProgramInfoLog(program);\n                    console.error('Fatal error: Failed to link program: ' + error);\n                    gl.deleteProgram(program);\n                    gl.deleteShader(fragmentShader);\n                    gl.deleteShader(vertexShader);\n                    throw new Error('Could not link shaders for distances computation on GPU.');\n                }\n\n                this.distancesTransformFeedback.program = program;\n                this.distancesTransformFeedback.vertexShader = vertexShader;\n                this.distancesTransformFeedback.vertexShader = fragmentShader;\n            }\n\n            gl.useProgram(this.distancesTransformFeedback.program);\n\n            this.distancesTransformFeedback.centersLoc =\n                gl.getAttribLocation(this.distancesTransformFeedback.program, 'center');\n            if (this.dynamicMode) {\n                this.distancesTransformFeedback.transformIndexesLoc =\n                    gl.getAttribLocation(this.distancesTransformFeedback.program, 'transformIndex');\n                for (let i = 0; i < this.scenes.length; i++) {\n                    this.distancesTransformFeedback.transformsLocs[i] =\n                        gl.getUniformLocation(this.distancesTransformFeedback.program, `transforms[${i}]`);\n                }\n            } else {\n                this.distancesTransformFeedback.modelViewProjLoc =\n                    gl.getUniformLocation(this.distancesTransformFeedback.program, 'modelViewProj');\n            }\n\n            if (rebuildGPUObjects || rebuildBuffers) {\n                this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n                if (this.integerBasedDistancesComputation) {\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\n                } else {\n                    gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 4, gl.FLOAT, false, 0, 0);\n                }\n\n                if (this.dynamicMode) {\n                    this.distancesTransformFeedback.transformIndexesBuffer = gl.createBuffer();\n                    gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\n                    gl.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc);\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\n                }\n            }\n\n            if (rebuildGPUObjects || rebuildBuffers) {\n                this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, maxSplatCount * 4, gl.STATIC_READ);\n\n            if (rebuildGPUObjects) {\n                this.distancesTransformFeedback.id = gl.createTransformFeedback();\n            }\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n            if (currentProgram && currentProgramDeleted !== true) gl.useProgram(currentProgram);\n            if (currentVao) gl.bindVertexArray(currentVao);\n\n            this.lastRenderer = this.renderer;\n            currentMaxSplatCount = maxSplatCount;\n        };\n\n    }();\n\n    /**\n     * Refresh GPU buffers used for computing splat distances with centers data from the scenes for this mesh.\n     * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\n     * @param {Array<number>} centers The splat centers data\n     * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\n     */\n    updateGPUCentersBufferForDistancesComputation(isUpdate, centers, offsetSplats) {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n        const ArrayType = this.integerBasedDistancesComputation ? Uint32Array : Float32Array;\n        const attributeBytesPerCenter = 16;\n        const subBufferOffset = offsetSplats * attributeBytesPerCenter;\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n\n        if (isUpdate) {\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, centers);\n        } else {\n            const maxArray = new ArrayType(this.getMaxSplatCount() * attributeBytesPerCenter);\n            maxArray.set(centers);\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\n        }\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        if (currentVao) gl.bindVertexArray(currentVao);\n    }\n\n    /**\n     * Refresh GPU buffers used for pre-computing splat distances with centers data from the scenes for this mesh.\n     * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\n     * @param {Array<number>} transformIndexes The splat transform indexes\n     * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\n     */\n    updateGPUTransformIndexesBufferForDistancesComputation(isUpdate, transformIndexes, offsetSplats) {\n\n        if (!this.renderer || !this.dynamicMode) return;\n\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n        const subBufferOffset = offsetSplats * 4;\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\n\n        if (isUpdate) {\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, transformIndexes);\n        } else {\n            const maxArray = new Uint32Array(this.getMaxSplatCount() * 4);\n            maxArray.set(transformIndexes);\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\n        }\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        if (currentVao) gl.bindVertexArray(currentVao);\n    }\n\n    /**\n     * Get a typed array containing a mapping from global splat indexes to their scene index.\n     * @param {number} start Starting splat index to store\n     * @param {number} end Ending splat index to store\n     * @return {Uint32Array}\n     */\n    getSceneIndexes(start, end) {\n\n        let sceneIndexes;\n        const fillCount = end - start + 1;\n        sceneIndexes = new Uint32Array(fillCount);\n        for (let i = start; i <= end; i++) {\n            sceneIndexes[i] = this.globalSplatIndexToSceneIndexMap[i];\n        }\n\n        return sceneIndexes;\n    }\n\n    /**\n     * Fill 'array' with the transforms for each scene in this splat mesh.\n     * @param {Array} array Empty array to be filled with scene transforms. If not empty, contents will be overwritten.\n     */\n    fillTransformsArray = function() {\n\n        const tempArray = [];\n\n        return function(array) {\n            if (tempArray.length !== array.length) tempArray.length = array.length;\n            for (let i = 0; i < this.scenes.length; i++) {\n                const sceneTransform = this.getScene(i).transform;\n                const sceneTransformElements = sceneTransform.elements;\n                for (let j = 0; j < 16; j++) {\n                    tempArray[i * 16 + j] = sceneTransformElements[j];\n                }\n            }\n            array.set(tempArray);\n        };\n\n    }();\n\n    computeDistancesOnGPU = function() {\n\n        const tempMatrix = new THREE.Matrix4();\n\n        return function(modelViewProjMatrix, outComputedDistances) {\n            if (!this.renderer) return;\n\n            // console.time(\"gpu_compute_distances\");\n            const gl = this.renderer.getContext();\n\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n            const currentProgramDeleted = currentProgram ? gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) : false;\n\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\n            gl.useProgram(this.distancesTransformFeedback.program);\n\n            gl.enable(gl.RASTERIZER_DISCARD);\n\n            if (this.dynamicMode) {\n                for (let i = 0; i < this.scenes.length; i++) {\n                    tempMatrix.copy(this.getScene(i).transform);\n                    tempMatrix.premultiply(modelViewProjMatrix);\n\n                    if (this.integerBasedDistancesComputation) {\n                        const iTempMatrix = SplatMesh.getIntegerMatrixArray(tempMatrix);\n                        const iTransform = [iTempMatrix[2], iTempMatrix[6], iTempMatrix[10], iTempMatrix[14]];\n                        gl.uniform4i(this.distancesTransformFeedback.transformsLocs[i], iTransform[0], iTransform[1],\n                                                                                        iTransform[2], iTransform[3]);\n                    } else {\n                        gl.uniformMatrix4fv(this.distancesTransformFeedback.transformsLocs[i], false, tempMatrix.elements);\n                    }\n                }\n            } else {\n                if (this.integerBasedDistancesComputation) {\n                    const iViewProjMatrix = SplatMesh.getIntegerMatrixArray(modelViewProjMatrix);\n                    const iViewProj = [iViewProjMatrix[2], iViewProjMatrix[6], iViewProjMatrix[10]];\n                    gl.uniform3i(this.distancesTransformFeedback.modelViewProjLoc, iViewProj[0], iViewProj[1], iViewProj[2]);\n                } else {\n                    const viewProj = [modelViewProjMatrix.elements[2], modelViewProjMatrix.elements[6], modelViewProjMatrix.elements[10]];\n                    gl.uniform3f(this.distancesTransformFeedback.modelViewProjLoc, viewProj[0], viewProj[1], viewProj[2]);\n                }\n            }\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n            gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n            if (this.integerBasedDistancesComputation) {\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\n            } else {\n                gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 4, gl.FLOAT, false, 0, 0);\n            }\n\n            if (this.dynamicMode) {\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc);\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\n            }\n\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n            gl.beginTransformFeedback(gl.POINTS);\n            gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\n            gl.endTransformFeedback();\n\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n\n            gl.disable(gl.RASTERIZER_DISCARD);\n\n            const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n            gl.flush();\n\n            const promise = new Promise((resolve) => {\n                const checkSync = () => {\n                    if (this.disposed) {\n                        resolve();\n                    } else {\n                        const timeout = 0;\n                        const bitflags = 0;\n                        const status = gl.clientWaitSync(sync, bitflags, timeout);\n                        switch (status) {\n                            case gl.TIMEOUT_EXPIRED:\n                                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\n                                return this.computeDistancesOnGPUSyncTimeout;\n                            case gl.WAIT_FAILED:\n                                throw new Error('should never get here');\n                            default:\n                                this.computeDistancesOnGPUSyncTimeout = null;\n                                gl.deleteSync(sync);\n                                const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n                                gl.bindVertexArray(this.distancesTransformFeedback.vao);\n                                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n                                gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\n                                gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n                                if (currentVao) gl.bindVertexArray(currentVao);\n\n                                // console.timeEnd(\"gpu_compute_distances\");\n\n                                resolve();\n                        }\n                    }\n                };\n                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\n            });\n\n            if (currentProgram && currentProgramDeleted !== true) gl.useProgram(currentProgram);\n            if (currentVao) gl.bindVertexArray(currentVao);\n\n            return promise;\n        };\n\n    }();\n\n    /**\n     * Given a global splat index, return corresponding local data (splat buffer, index of splat in that splat\n     * buffer, and the corresponding transform)\n     * @param {number} globalIndex Global splat index\n     * @param {object} paramsObj Object in which to store local data\n     * @param {boolean} returnSceneTransform By default, the transform of the scene to which the splat at 'globalIndex' belongs will be\n     *                                       returned via the 'sceneTransform' property of 'paramsObj' only if the splat mesh is static.\n     *                                       If 'returnSceneTransform' is true, the 'sceneTransform' property will always contain the scene\n     *                                       transform, and if 'returnSceneTransform' is false, the 'sceneTransform' property will always\n     *                                       be null.\n     */\n    getLocalSplatParameters(globalIndex, paramsObj, returnSceneTransform) {\n        if (returnSceneTransform === undefined || returnSceneTransform === null) {\n            returnSceneTransform = this.dynamicMode ? false : true;\n        }\n        paramsObj.splatBuffer = this.getSplatBufferForSplat(globalIndex);\n        paramsObj.localIndex = this.getSplatLocalIndex(globalIndex);\n        paramsObj.sceneTransform = returnSceneTransform ? this.getSceneTransformForSplat(globalIndex) : null;\n    }\n\n    /**\n     * Fill arrays with splat data and apply transforms if appropriate. Each array is optional.\n     * @param {Float32Array} covariances Target storage for splat covariances\n     * @param {Float32Array} centers Target storage for splat centers\n     * @param {Uint8Array} colors Target storage for splat colors\n     * @param {Float32Array} sphericalHarmonics Target storage for spherical harmonics\n     * @param {boolean} applySceneTransform By default, scene transforms are applied to relevant splat data only if the splat mesh is\n     *                                      static. If 'applySceneTransform' is true, scene transforms will always be applied and if\n     *                                      it is false, they will never be applied. If undefined, the default behavior will apply.\n     * @param {number} covarianceCompressionLevel The compression level for covariances in the destination array\n     * @param {number} sphericalHarmonicsCompressionLevel The compression level for spherical harmonics in the destination array\n     * @param {number} srcStart The start location from which to pull source data\n     * @param {number} srcEnd The end location from which to pull source data\n     * @param {number} destStart The start location from which to write data\n     */\n    fillSplatDataArrays(covariances, centers, colors, sphericalHarmonics, applySceneTransform,\n                        covarianceCompressionLevel = 0, sphericalHarmonicsCompressionLevel = 1, srcStart, srcEnd, destStart = 0) {\n\n        for (let i = 0; i < this.scenes.length; i++) {\n            if (applySceneTransform === undefined || applySceneTransform === null) {\n                applySceneTransform = this.dynamicMode ? false : true;\n            }\n\n            const scene = this.getScene(i);\n            const splatBuffer = scene.splatBuffer;\n            const sceneTransform = applySceneTransform ? scene.transform : null;\n            if (covariances) {\n                splatBuffer.fillSplatCovarianceArray(covariances, sceneTransform,\n                                                     srcStart, srcEnd, destStart, covarianceCompressionLevel);\n            }\n            if (centers) splatBuffer.fillSplatCenterArray(centers, sceneTransform, srcStart, srcEnd, destStart);\n            if (colors) splatBuffer.fillSplatColorArray(colors, scene.minimumAlpha, srcStart, srcEnd, destStart);\n            if (sphericalHarmonics) {\n                splatBuffer.fillSphericalHarmonicsArray(sphericalHarmonics, this.minSphericalHarmonicsDegree,\n                                                        sceneTransform, srcStart, srcEnd, destStart, sphericalHarmonicsCompressionLevel);\n            }\n            destStart += splatBuffer.getSplatCount();\n        }\n    }\n\n    /**\n     * Convert splat centers, which are floating point values, to an array of integers and multiply\n     * each by 1000. Centers will get transformed as appropriate before conversion to integer.\n     * @param {number} start The index at which to start retrieving data\n     * @param {number} end The index at which to stop retrieving data\n     * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\n     * @return {Int32Array}\n     */\n    getIntegerCenters(start, end, padFour = false) {\n        const splatCount = end - start + 1;\n        const floatCenters = new Float32Array(splatCount * 3);\n        this.fillSplatDataArrays(null, floatCenters, null, null, undefined, undefined, undefined, start);\n        let intCenters;\n        let componentCount = padFour ? 4 : 3;\n        intCenters = new Int32Array(splatCount * componentCount);\n        for (let i = 0; i < splatCount; i++) {\n            for (let t = 0; t < 3; t++) {\n                intCenters[i * componentCount + t] = Math.round(floatCenters[i * 3 + t] * 1000.0);\n            }\n            if (padFour) intCenters[i * componentCount + 3] = 1000;\n        }\n        return intCenters;\n    }\n\n    /**\n     * Returns an array of splat centers, transformed as appropriate, optionally padded.\n     * @param {number} start The index at which to start retrieving data\n     * @param {number} end The index at which to stop retrieving data\n     * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\n     * @return {Float32Array}\n     */\n    getFloatCenters(start, end, padFour = false) {\n        const splatCount = end - start + 1;\n        const floatCenters = new Float32Array(splatCount * 3);\n        this.fillSplatDataArrays(null, floatCenters, null, null, undefined, undefined, undefined, start);\n        if (!padFour) return floatCenters;\n        let paddedFloatCenters = new Float32Array(splatCount * 4);\n        for (let i = 0; i < splatCount; i++) {\n            for (let t = 0; t < 3; t++) {\n                paddedFloatCenters[i * 4 + t] = floatCenters[i * 3 + t];\n            }\n            paddedFloatCenters[i * 4 + 3] = 1.0;\n        }\n        return paddedFloatCenters;\n    }\n\n    /**\n     * Get the center for a splat, transformed as appropriate.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector3} outCenter THREE.Vector3 instance in which to store splat center\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n     *                                      'globalIndex' belongs will be applied to the splat center. If 'applySceneTransform' is true,\n     *                                      the scene transform will always be applied and if 'applySceneTransform' is false, the\n     *                                      scene transform will never be applied. If undefined, the default behavior will apply.\n     */\n    getSplatCenter = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outCenter, applySceneTransform) {\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n            paramsObj.splatBuffer.getSplatCenter(paramsObj.localIndex, outCenter, paramsObj.sceneTransform);\n        };\n\n    }();\n\n    /**\n     * Get the scale and rotation for a splat, transformed as appropriate.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector3} outScale THREE.Vector3 instance in which to store splat scale\n     * @param {THREE.Quaternion} outRotation THREE.Quaternion instance in which to store splat rotation\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n     *                                      'globalIndex' belongs will be applied to the splat scale and rotation. If\n     *                                      'applySceneTransform' is true, the scene transform will always be applied and if\n     *                                      'applySceneTransform' is false, the scene transform will never be applied. If undefined,\n     *                                      the default behavior will apply.\n     */\n    getSplatScaleAndRotation = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outScale, outRotation, applySceneTransform) {\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n            paramsObj.splatBuffer.getSplatScaleAndRotation(paramsObj.localIndex, outScale, outRotation, paramsObj.sceneTransform);\n        };\n\n    }();\n\n    /**\n     * Get the color for a splat.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector4} outColor THREE.Vector4 instance in which to store splat color\n     */\n    getSplatColor = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outColor) {\n            this.getLocalSplatParameters(globalIndex, paramsObj);\n            paramsObj.splatBuffer.getSplatColor(paramsObj.localIndex, outColor);\n        };\n\n    }();\n\n    /**\n     * Store the transform of the scene at 'sceneIndex' in 'outTransform'.\n     * @param {number} sceneIndex Index of the desired scene\n     * @param {THREE.Matrix4} outTransform Instance of THREE.Matrix4 in which to store the scene's transform\n     */\n    getSceneTransform(sceneIndex, outTransform) {\n        const scene = this.getScene(sceneIndex);\n        scene.updateTransform();\n        outTransform.copy(scene.transform);\n    }\n\n    /**\n     * Get the scene at 'sceneIndex'.\n     * @param {number} sceneIndex Index of the desired scene\n     * @return {SplatScene}\n     */\n    getScene(sceneIndex) {\n        if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\n            throw new Error('SplatMesh::getScene() -> Invalid scene index.');\n        }\n        return this.scenes[sceneIndex];\n    }\n\n    getSplatBufferForSplat(globalIndex) {\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).splatBuffer;\n    }\n\n    getSceneIndexForSplat(globalIndex) {\n        return this.globalSplatIndexToSceneIndexMap[globalIndex];\n    }\n\n    getSceneTransformForSplat(globalIndex) {\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).transform;\n    }\n\n    getSplatLocalIndex(globalIndex) {\n        return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\n    }\n\n    static getIntegerMatrixArray(matrix) {\n        const matrixElements = matrix.elements;\n        const intMatrixArray = [];\n        for (let i = 0; i < 16; i++) {\n            intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\n        }\n        return intMatrixArray;\n    }\n}\n", "\u0000asm\u0001\u0000\u0000\u0000\u0000\f\u0006dylink\u0000\u0000\u0000\u0000\u0000\u0001\u001b\u0003`\u0000\u0000`\u0010\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u00079\u0003\u0011__wasm_call_ctors\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0010\u0003\u0003\u0000\u0001\u000b�\u0010\u0005\u0001|\u0003{\u0002\u0003}\u0002~ \u000b \nk!\f\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0002 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00056\u0002\u0000 \u0005 \u000e \u0005 \u000eH\u001b!\u000e \u0005 \r \u0005 \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0002\u000b \u000f\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0002A!\u000f \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000\"\u0015A\u0002tj(\u0002\u0000\"\nG\u0004@\u0002~ \u0005�\t\u0002\b \b \nA\u0006tj\"\u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001��\u0001 \u0005�\t\u00028 \u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001��\u0001\"\u0011�\u001f\u0002��\u0014 \u0011�\u001f\u0003��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b!\u0019\u0002~ \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b�\u0012!\u0013\u0002~ \u0011�\u001f\u0000��\u0014 \u0011�\u001f\u0001��\"\u0001 \u0012��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b!\u001a \u0013 \u0019�\u001e\u0001!\u0012\u0002~ \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b�\u0012 \u001a�\u001e\u0001 \u0012�\r\u0000\u0001\u0002\u0003\b\t\n\u000b\u0010\u0011\u0012\u0013\u0018\u0019\u001a\u001b!\u0012 \n!\u000f\u000b \u0003 \u0014j \u0001 \u0015A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0002\u000b\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\n\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\u000eA����x!\r \u000b \fM\r\u0001 \u0002�\u0011 \n�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \u000e \u0002 \u000eH\u001b!\u000e \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0001\u000b \r\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0001 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j\u0002 \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0001\u000b\u0002@ \u000fE\u0004@ \u000b \fK\r\u0001A����x!\rA����\u0007!\u000e\f\u0002\u000bA����\u0007!\u000eA����x!\r \u000b \fM\r\u0001A!\u000f \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000A\u0002t\"\u0015j(\u0002\u0000\"\nG\u0004@ \u0005�\t\u0002\b \b \nA\u0006tj\"\u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001��\u0001 \u0005�\t\u00028 \u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001��\u0001!\u0011 \n!\u000f\u000b \u0003 \u0014j\u0002 \u0011 \u0001 \u0015A\u0002t\"\nj)\u0002\u0000�\u0012��\u0001\"\u0012�\u001f\u0000 \u0012�\u001f\u0001� \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0001 \nA\brj)\u0002\u0000�\u0012��\u0001\"\u0012�\u001f\u0000� \u0012�\u001f\u0001��D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000b \u0005*\u0002(!\u0016 \u0005*\u0002\u0018!\u0017 \u0005*\u0002\b!\u0018A����\u0007!\u000eA����x!\r \f!\u0005\u0003@\u0002 \u0018 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\u0000� \u0017 \u0002*\u0002\u0004�� \u0016 \u0002*\u0002\b���D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\n \u0003 \u0007j \n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \u000e���!\u0016 \f!\r\u0003@\u0002 \u0016 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \u000ek��\"\u0017�C\u0000\u0000\u0000O]\u0004@ \u0017�\f\u0001\u000bA����x\u000b!\n \u0001 \n6\u0002\u0000 \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\u000e\u0003@ \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \u000eA\u0001j\"\u000e \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\u000e\u0003@ \u0006 \u000eA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \u000eA\u0001J!\u0002 \u0001!\u000e \u0002\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\u000e\u0003@ \u0006 \u000b \u0004 \u0003 \u000eA\u0001k\"\u000eA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \f \u000eH\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b", "import SorterWasm from './sorter.wasm';\nimport { Constants } from '../Constants.js';\n\nfunction sortWorker(self) {\n\n    let wasmInstance;\n    let wasmMemory;\n    let useSharedMemory;\n    let integerBasedSort;\n    let dynamicMode;\n    let splatCount;\n    let indexesToSortOffset;\n    let sortedIndexesOffset;\n    let transformIndexesOffset;\n    let transformsOffset;\n    let precomputedDistancesOffset;\n    let mappedDistancesOffset;\n    let frequenciesOffset;\n    let centersOffset;\n    let modelViewProjOffset;\n    let countsZero;\n    let sortedIndexesOut;\n\n    let Constants;\n\n    function sort(splatSortCount, splatRenderCount, modelViewProj,\n                  usePrecomputedDistances, copyIndexesToSort, copyPrecomputedDistances, copyTransforms) {\n        const sortStartTime = performance.now();\n\n        if (!useSharedMemory) {\n            const indexesToSort = new Uint32Array(wasmMemory, indexesToSortOffset, copyIndexesToSort.byteLength / Constants.BytesPerInt);\n            indexesToSort.set(copyIndexesToSort);\n            const transforms = new Float32Array(wasmMemory, transformsOffset, copyTransforms.byteLength / Constants.BytesPerFloat);\n            transforms.set(copyTransforms);\n            if (usePrecomputedDistances) {\n                let precomputedDistances;\n                if (integerBasedSort) {\n                    precomputedDistances = new Int32Array(wasmMemory, precomputedDistancesOffset,\n                                                          copyPrecomputedDistances.byteLength / Constants.BytesPerInt);\n                } else {\n                    precomputedDistances = new Float32Array(wasmMemory, precomputedDistancesOffset,\n                                                            copyPrecomputedDistances.byteLength / Constants.BytesPerFloat);\n                }\n                precomputedDistances.set(copyPrecomputedDistances);\n            }\n        }\n\n        if (!countsZero) countsZero = new Uint32Array(Constants.DepthMapRange);\n        new Float32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\n        new Uint32Array(wasmMemory, frequenciesOffset, Constants.DepthMapRange).set(countsZero);\n        wasmInstance.exports.sortIndexes(indexesToSortOffset, centersOffset, precomputedDistancesOffset,\n                                         mappedDistancesOffset, frequenciesOffset, modelViewProjOffset,\n                                         sortedIndexesOffset, transformIndexesOffset, transformsOffset, Constants.DepthMapRange,\n                                         splatSortCount, splatRenderCount, splatCount, usePrecomputedDistances, integerBasedSort,\n                                         dynamicMode);\n\n        const sortMessage = {\n            'sortDone': true,\n            'splatSortCount': splatSortCount,\n            'splatRenderCount': splatRenderCount,\n            'sortTime': 0\n        };\n        if (!useSharedMemory) {\n            const sortedIndexes = new Uint32Array(wasmMemory, sortedIndexesOffset, splatRenderCount);\n            if (!sortedIndexesOut || sortedIndexesOut.length < splatRenderCount) {\n                sortedIndexesOut = new Uint32Array(splatRenderCount);\n            }\n            sortedIndexesOut.set(sortedIndexes);\n            sortMessage.sortedIndexes = sortedIndexesOut;\n        }\n        const sortEndTime = performance.now();\n\n        sortMessage.sortTime = sortEndTime - sortStartTime;\n\n        self.postMessage(sortMessage);\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.centers) {\n            centers = e.data.centers;\n            transformIndexes = e.data.transformIndexes;\n            if (integerBasedSort) {\n                new Int32Array(wasmMemory, centersOffset + e.data.range.from * Constants.BytesPerInt * 4,\n                               e.data.range.count * 4).set(new Int32Array(centers));\n            } else {\n                new Float32Array(wasmMemory, centersOffset + e.data.range.from * Constants.BytesPerFloat * 4,\n                                 e.data.range.count * 4).set(new Float32Array(centers));\n            }\n            if (dynamicMode) {\n                new Uint32Array(wasmMemory, transformIndexesOffset + e.data.range.from * 4,\n                                e.data.range.count).set(new Uint32Array(transformIndexes));\n            }\n            self.postMessage({\n                'centerDataSet': true,\n            });\n        } else if (e.data.sort) {\n            const renderCount = e.data.sort.splatRenderCount || 0;\n            const sortCount = e.data.sort.splatSortCount || 0;\n            const usePrecomputedDistances = e.data.sort.usePrecomputedDistances;\n\n            let copyIndexesToSort;\n            let copyPrecomputedDistances;\n            let copyTransforms;\n            if (!useSharedMemory) {\n                copyIndexesToSort = e.data.sort.indexesToSort;\n                copyTransforms = e.data.sort.transforms;\n                if (usePrecomputedDistances) copyPrecomputedDistances = e.data.sort.precomputedDistances;\n            }\n            sort(sortCount, renderCount, e.data.sort.modelViewProj, usePrecomputedDistances,\n                 copyIndexesToSort, copyPrecomputedDistances, copyTransforms);\n        } else if (e.data.init) {\n            // Yep, this is super hacky and gross :(\n            Constants = e.data.init.Constants;\n\n            splatCount = e.data.init.splatCount;\n            useSharedMemory = e.data.init.useSharedMemory;\n            integerBasedSort = e.data.init.integerBasedSort;\n            dynamicMode = e.data.init.dynamicMode;\n\n            const CENTERS_BYTES_PER_ENTRY = integerBasedSort ? (Constants.BytesPerInt * 4) : (Constants.BytesPerFloat * 4);\n\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\n\n            const matrixSize = 16 * Constants.BytesPerFloat;\n            const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\n            const memoryRequiredForModelViewProjectionMatrix = matrixSize;\n            const memoryRequiredForPrecomputedDistances = integerBasedSort ?\n                                                          (splatCount * Constants.BytesPerInt) : (splatCount * Constants.BytesPerFloat);\n            const memoryRequiredForMappedDistances = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForIntermediateSortBuffers = Constants.DepthMapRange * Constants.BytesPerInt * 2;\n            const memoryRequiredforTransformIndexes = dynamicMode ? (splatCount * Constants.BytesPerInt) : 0;\n            const memoryRequiredforTransforms = dynamicMode ? (Constants.MaxScenes * matrixSize) : 0;\n            const extraMemory = Constants.MemoryPageSize * 32;\n\n            const totalRequiredMemory = memoryRequiredForIndexesToSort +\n                                        memoryRequiredForCenters +\n                                        memoryRequiredForModelViewProjectionMatrix +\n                                        memoryRequiredForPrecomputedDistances +\n                                        memoryRequiredForMappedDistances +\n                                        memoryRequiredForIntermediateSortBuffers +\n                                        memoryRequiredForSortedIndexes +\n                                        memoryRequiredforTransformIndexes +\n                                        memoryRequiredforTransforms +\n                                        extraMemory;\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\n            const sorterWasmImport = {\n                module: {},\n                env: {\n                    memory: new WebAssembly.Memory({\n                        initial: totalPagesRequired * 2,\n                        maximum: totalPagesRequired * 4,\n                        shared: true,\n                    }),\n                }\n            };\n            WebAssembly.compile(sorterWasmBytes)\n            .then((wasmModule) => {\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\n            })\n            .then((instance) => {\n                wasmInstance = instance;\n                indexesToSortOffset = 0;\n                centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\n                modelViewProjOffset = centersOffset + memoryRequiredForCenters;\n                precomputedDistancesOffset = modelViewProjOffset + memoryRequiredForModelViewProjectionMatrix;\n                mappedDistancesOffset = precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\n                frequenciesOffset = mappedDistancesOffset + memoryRequiredForMappedDistances;\n                sortedIndexesOffset = frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\n                transformIndexesOffset = sortedIndexesOffset + memoryRequiredForSortedIndexes;\n                transformsOffset = transformIndexesOffset + memoryRequiredforTransformIndexes;\n                wasmMemory = sorterWasmImport.env.memory.buffer;\n                if (useSharedMemory) {\n                    self.postMessage({\n                        'sortSetupPhase1Complete': true,\n                        'indexesToSortBuffer': wasmMemory,\n                        'indexesToSortOffset': indexesToSortOffset,\n                        'sortedIndexesBuffer': wasmMemory,\n                        'sortedIndexesOffset': sortedIndexesOffset,\n                        'precomputedDistancesBuffer': wasmMemory,\n                        'precomputedDistancesOffset': precomputedDistancesOffset,\n                        'transformsBuffer': wasmMemory,\n                        'transformsOffset': transformsOffset\n                    });\n                } else {\n                    self.postMessage({\n                        'sortSetupPhase1Complete': true\n                    });\n                }\n            });\n        }\n    };\n}\n\nexport function createSortWorker(splatCount, useSharedMemory, integerBasedSort, dynamicMode) {\n    const worker = new Worker(\n        URL.createObjectURL(\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\n                type: 'application/javascript',\n            }),\n        ),\n    );\n\n    const sorterWasmBinaryString = atob(SorterWasm);\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\n    }\n\n    worker.postMessage({\n        'init': {\n            'sorterWasmBytes': sorterWasmBytes.buffer,\n            'splatCount': splatCount,\n            'useSharedMemory': useSharedMemory,\n            'integerBasedSort': integerBasedSort,\n            'dynamicMode': dynamicMode,\n            // Super hacky\n            'Constants': {\n                'BytesPerFloat': Constants.BytesPerFloat,\n                'BytesPerInt': Constants.BytesPerInt,\n                'DepthMapRange': Constants.DepthMapRange,\n                'MemoryPageSize': Constants.MemoryPageSize,\n                'MaxScenes': Constants.MaxScenes\n            }\n        }\n    });\n    return worker;\n}\n", "export const WebXRMode = {\n    None: 0,\n    VR: 1,\n    AR: 2\n};\n", "/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nexport class VRButton {\n\n    static createButton( renderer ) {\n\n        const button = document.createElement( 'button' );\n\n        function showEnterVR( /* device */ ) {\n\n            let currentSession = null;\n\n            async function onSessionStarted( session ) {\n\n                session.addEventListener( 'end', onSessionEnded );\n\n                await renderer.xr.setSession( session );\n                button.textContent = 'EXIT VR';\n\n                currentSession = session;\n\n            }\n\n            function onSessionEnded( /* event */ ) {\n\n                currentSession.removeEventListener( 'end', onSessionEnded );\n\n                button.textContent = 'ENTER VR';\n\n                currentSession = null;\n\n            }\n\n            //\n\n            button.style.display = '';\n\n            button.style.cursor = 'pointer';\n            button.style.left = 'calc(50% - 50px)';\n            button.style.width = '100px';\n\n            button.textContent = 'ENTER VR';\n\n            // WebXR's requestReferenceSpace only works if the corresponding feature\n            // was requested at session creation time. For simplicity, just ask for\n            // the interesting ones as optional features, but be aware that the\n            // requestReferenceSpace call will fail if it turns out to be unavailable.\n            // ('local' is always available for immersive sessions and doesn't need to\n            // be requested separately.)\n\n            const sessionInit = { optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking', 'layers'] };\n\n            button.onmouseenter = function() {\n\n                button.style.opacity = '1.0';\n\n            };\n\n            button.onmouseleave = function() {\n\n                button.style.opacity = '0.5';\n\n            };\n\n            button.onclick = function() {\n\n                if ( currentSession === null ) {\n\n                    navigator.xr.requestSession( 'immersive-vr', sessionInit ).then( onSessionStarted );\n\n                } else {\n\n                    currentSession.end();\n\n                    if ( navigator.xr.offerSession !== undefined ) {\n\n                        navigator.xr.offerSession( 'immersive-vr', sessionInit )\n                            .then( onSessionStarted )\n                            .catch( ( err ) => {\n\n                                console.warn( err );\n\n                            } );\n\n                    }\n\n                }\n\n            };\n\n            if ( navigator.xr.offerSession !== undefined ) {\n\n                navigator.xr.offerSession( 'immersive-vr', sessionInit )\n                    .then( onSessionStarted )\n                    .catch( ( err ) => {\n\n                        console.warn( err );\n\n                    } );\n\n            }\n\n        }\n\n        function disableButton() {\n\n            button.style.display = '';\n\n            button.style.cursor = 'auto';\n            button.style.left = 'calc(50% - 75px)';\n            button.style.width = '150px';\n\n            button.onmouseenter = null;\n            button.onmouseleave = null;\n\n            button.onclick = null;\n\n        }\n\n        function showWebXRNotFound() {\n\n            disableButton();\n\n            button.textContent = 'VR NOT SUPPORTED';\n\n        }\n\n        function showVRNotAllowed( exception ) {\n\n            disableButton();\n\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\n\n            button.textContent = 'VR NOT ALLOWED';\n\n        }\n\n        function stylizeElement( element ) {\n\n            element.style.position = 'absolute';\n            element.style.bottom = '20px';\n            element.style.padding = '12px 6px';\n            element.style.border = '1px solid #fff';\n            element.style.borderRadius = '4px';\n            element.style.background = 'rgba(0,0,0,0.1)';\n            element.style.color = '#fff';\n            element.style.font = 'normal 13px sans-serif';\n            element.style.textAlign = 'center';\n            element.style.opacity = '0.5';\n            element.style.outline = 'none';\n            element.style.zIndex = '999';\n\n        }\n\n        if ( 'xr' in navigator ) {\n\n            button.id = 'VRButton';\n            button.style.display = 'none';\n\n            stylizeElement( button );\n\n            navigator.xr.isSessionSupported( 'immersive-vr' ).then( function( supported ) {\n\n                supported ? showEnterVR() : showWebXRNotFound();\n\n                if ( supported && VRButton.xrSessionIsGranted ) {\n\n                    button.click();\n\n                }\n\n            } ).catch( showVRNotAllowed );\n\n            return button;\n\n        } else {\n\n            const message = document.createElement( 'a' );\n\n            if ( window.isSecureContext === false ) {\n\n                message.href = document.location.href.replace( /^http:/, 'https:' );\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n            } else {\n\n                message.href = 'https://immersiveweb.dev/';\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\n\n            }\n\n            message.style.left = 'calc(50% - 90px)';\n            message.style.width = '180px';\n            message.style.textDecoration = 'none';\n\n            stylizeElement( message );\n\n            return message;\n\n        }\n\n    }\n\n    static registerSessionGrantedListener() {\n\n        if ( typeof navigator !== 'undefined' && 'xr' in navigator ) {\n\n            // WebXRViewer (based on Firefox) has a bug where addEventListener\n            // throws a silent exception and aborts execution entirely.\n            if ( /WebXRViewer\\//i.test( navigator.userAgent ) ) return;\n\n            navigator.xr.addEventListener( 'sessiongranted', () => {\n\n                VRButton.xrSessionIsGranted = true;\n\n            } );\n\n        }\n\n    }\n\n}\n\nVRButton.xrSessionIsGranted = false;\nVRButton.registerSessionGrantedListener();\n", "/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nexport class ARButton {\n\n    static createButton( renderer, sessionInit = {} ) {\n\n        const button = document.createElement( 'button' );\n\n        function showStartAR( /* device */ ) {\n\n            if ( sessionInit.domOverlay === undefined ) {\n\n                const overlay = document.createElement( 'div' );\n                overlay.style.display = 'none';\n                document.body.appendChild( overlay );\n\n                const svg = document.createElementNS( 'http://www.w3.org/2000/svg', 'svg' );\n                svg.setAttribute( 'width', 38 );\n                svg.setAttribute( 'height', 38 );\n                svg.style.position = 'absolute';\n                svg.style.right = '20px';\n                svg.style.top = '20px';\n                svg.addEventListener( 'click', function() {\n\n                    currentSession.end();\n\n                } );\n                overlay.appendChild( svg );\n\n                const path = document.createElementNS( 'http://www.w3.org/2000/svg', 'path' );\n                path.setAttribute( 'd', 'M 12,12 L 28,28 M 28,12 12,28' );\n                path.setAttribute( 'stroke', '#fff' );\n                path.setAttribute( 'stroke-width', 2 );\n                svg.appendChild( path );\n\n                if ( sessionInit.optionalFeatures === undefined ) {\n\n                    sessionInit.optionalFeatures = [];\n\n                }\n\n                sessionInit.optionalFeatures.push( 'dom-overlay' );\n                sessionInit.domOverlay = { root: overlay };\n\n            }\n\n            //\n\n            let currentSession = null;\n\n            async function onSessionStarted( session ) {\n\n                session.addEventListener( 'end', onSessionEnded );\n\n                renderer.xr.setReferenceSpaceType( 'local' );\n\n                await renderer.xr.setSession( session );\n\n                button.textContent = 'STOP AR';\n                sessionInit.domOverlay.root.style.display = '';\n\n                currentSession = session;\n\n            }\n\n            function onSessionEnded( /* event */ ) {\n\n                currentSession.removeEventListener( 'end', onSessionEnded );\n\n                button.textContent = 'START AR';\n                sessionInit.domOverlay.root.style.display = 'none';\n\n                currentSession = null;\n\n            }\n\n            //\n\n            button.style.display = '';\n\n            button.style.cursor = 'pointer';\n            button.style.left = 'calc(50% - 50px)';\n            button.style.width = '100px';\n\n            button.textContent = 'START AR';\n\n            button.onmouseenter = function() {\n\n                button.style.opacity = '1.0';\n\n            };\n\n            button.onmouseleave = function() {\n\n                button.style.opacity = '0.5';\n\n            };\n\n            button.onclick = function() {\n\n                if ( currentSession === null ) {\n\n                    navigator.xr.requestSession( 'immersive-ar', sessionInit ).then( onSessionStarted );\n\n                } else {\n\n                    currentSession.end();\n\n                    if ( navigator.xr.offerSession !== undefined ) {\n\n                        navigator.xr.offerSession( 'immersive-ar', sessionInit )\n                            .then( onSessionStarted )\n                            .catch( ( err ) => {\n\n                                console.warn( err );\n\n                            } );\n\n                    }\n\n                }\n\n            };\n\n            if ( navigator.xr.offerSession !== undefined ) {\n\n                navigator.xr.offerSession( 'immersive-ar', sessionInit )\n                    .then( onSessionStarted )\n                    .catch( ( err ) => {\n\n                        console.warn( err );\n\n                    } );\n\n            }\n\n        }\n\n        function disableButton() {\n\n            button.style.display = '';\n\n            button.style.cursor = 'auto';\n            button.style.left = 'calc(50% - 75px)';\n            button.style.width = '150px';\n\n            button.onmouseenter = null;\n            button.onmouseleave = null;\n\n            button.onclick = null;\n\n        }\n\n        function showARNotSupported() {\n\n            disableButton();\n\n            button.textContent = 'AR NOT SUPPORTED';\n\n        }\n\n        function showARNotAllowed( exception ) {\n\n            disableButton();\n\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\n\n            button.textContent = 'AR NOT ALLOWED';\n\n        }\n\n        function stylizeElement( element ) {\n\n            element.style.position = 'absolute';\n            element.style.bottom = '20px';\n            element.style.padding = '12px 6px';\n            element.style.border = '1px solid #fff';\n            element.style.borderRadius = '4px';\n            element.style.background = 'rgba(0,0,0,0.1)';\n            element.style.color = '#fff';\n            element.style.font = 'normal 13px sans-serif';\n            element.style.textAlign = 'center';\n            element.style.opacity = '0.5';\n            element.style.outline = 'none';\n            element.style.zIndex = '999';\n\n        }\n\n        if ( 'xr' in navigator ) {\n\n            button.id = 'ARButton';\n            button.style.display = 'none';\n\n            stylizeElement( button );\n\n            navigator.xr.isSessionSupported( 'immersive-ar' ).then( function( supported ) {\n\n                supported ? showStartAR() : showARNotSupported();\n\n            } ).catch( showARNotAllowed );\n\n            return button;\n\n        } else {\n\n            const message = document.createElement( 'a' );\n\n            if ( window.isSecureContext === false ) {\n\n                message.href = document.location.href.replace( /^http:/, 'https:' );\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n            } else {\n\n                message.href = 'https://immersiveweb.dev/';\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\n\n            }\n\n            message.style.left = 'calc(50% - 90px)';\n            message.style.width = '180px';\n            message.style.textDecoration = 'none';\n\n            stylizeElement( message );\n\n            return message;\n\n        }\n\n    }\n\n}\n", "export const RenderMode = {\n    Always: 0,\n    OnChange: 1,\n    Never: 2\n};\n", "import * as THREE from 'three';\nimport { OrbitControls } from './OrbitControls.js';\nimport { PlyLoader } from './loaders/ply/PlyLoader.js';\nimport { SplatLoader } from './loaders/splat/SplatLoader.js';\nimport { KSplatLoader } from './loaders/ksplat/KSplatLoader.js';\nimport { sceneFormatFromPath } from './loaders/Utils.js';\nimport { LoadingSpinner } from './ui/LoadingSpinner.js';\nimport { LoadingProgressBar } from './ui/LoadingProgressBar.js';\nimport { InfoPanel } from './ui/InfoPanel.js';\nimport { SceneHelper } from './SceneHelper.js';\nimport { Raycaster } from './raycaster/Raycaster.js';\nimport { SplatMesh } from './SplatMesh.js';\nimport { createSortWorker } from './worker/SortWorker.js';\nimport { Constants } from './Constants.js';\nimport { getCurrentTime } from './Util.js';\nimport { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\nimport { SceneFormat } from './loaders/SceneFormat.js';\nimport { WebXRMode } from './webxr/WebXRMode.js';\nimport { VRButton } from './webxr/VRButton.js';\nimport { ARButton } from './webxr/ARButton.js';\nimport { delayedExecute } from './Util.js';\nimport { LoaderStatus } from './loaders/LoaderStatus.js';\nimport { RenderMode } from './RenderMode.js';\nimport { LogLevel } from './LogLevel.js';\nimport { SceneRevealMode } from './SceneRevealMode.js';\n\nconst THREE_CAMERA_FOV = 50;\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = .75;\nconst MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER = 1500000;\nconst FOCUS_MARKER_FADE_IN_SPEED = 10.0;\nconst FOCUS_MARKER_FADE_OUT_SPEED = 2.5;\nconst CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION = 60;\n\n/**\n * Viewer: Manages the rendering of splat scenes. Manages an instance of SplatMesh as well as a web worker\n * that performs the sort for its splats.\n */\nexport class Viewer {\n\n    constructor(options = {}) {\n\n        // The natural 'up' vector for viewing the scene (only has an effect when used with orbit controls and\n        // when the viewer uses its own camera).\n        if (!options.cameraUp) options.cameraUp = [0, 1, 0];\n        this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\n\n        // The camera's initial position (only used when the viewer uses its own camera).\n        if (!options.initialCameraPosition) options.initialCameraPosition = [0, 10, 15];\n        this.initialCameraPosition = new THREE.Vector3().fromArray(options.initialCameraPosition);\n\n        // The initial focal point of the camera and center of the camera's orbit (only used when the viewer uses its own camera).\n        if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(options.initialCameraLookAt);\n\n        // 'dropInMode' is a flag that is used internally to support the usage of the viewer as a Three.js scene object\n        this.dropInMode = options.dropInMode || false;\n\n        // If 'selfDrivenMode' is true, the viewer manages its own update/animation loop via requestAnimationFrame()\n        if (options.selfDrivenMode === undefined || options.selfDrivenMode === null) options.selfDrivenMode = true;\n        this.selfDrivenMode = options.selfDrivenMode && !this.dropInMode;\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\n\n        // If 'useBuiltInControls' is true, the viewer will create its own instance of OrbitControls and attach to the camera\n        if (options.useBuiltInControls === undefined) options.useBuiltInControls = true;\n        this.useBuiltInControls = options.useBuiltInControls;\n\n        // parent element of the Three.js renderer canvas\n        this.rootElement = options.rootElement;\n\n        // Tells the viewer to pretend the device pixel ratio is 1, which can boost performance on devices where it is larger,\n        // at a small cost to visual quality\n        this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\n        this.devicePixelRatio = this.ignoreDevicePixelRatio ? 1 : window.devicePixelRatio;\n\n        // Tells the viewer to use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n        this.halfPrecisionCovariancesOnGPU = options.halfPrecisionCovariancesOnGPU || false;\n\n        // If 'threeScene' is valid, it will be rendered by the viewer along with the splat mesh\n        this.threeScene = options.threeScene;\n        // Allows for usage of an external Three.js renderer\n        this.renderer = options.renderer;\n        // Allows for usage of an external Three.js camera\n        this.camera = options.camera;\n\n        // If 'gpuAcceleratedSort' is true, a partially GPU-accelerated approach to sorting splats will be used.\n        // Currently this means pre-computing splat distances from the camera on the GPU\n        this.gpuAcceleratedSort = options.gpuAcceleratedSort || false;\n\n        // if 'integerBasedSort' is true, the integer version of splat centers as well as other values used to calculate\n        // splat distances are used instead of the float version. This speeds up computation, but introduces the possibility of\n        // overflow in larger scenes.\n        if (options.integerBasedSort === undefined || options.integerBasedSort === null) {\n            options.integerBasedSort = true;\n        }\n        this.integerBasedSort = options.integerBasedSort;\n\n        // If 'sharedMemoryForWorkers' is true, a SharedArrayBuffer will be used to communicate with web workers. This method\n        // is faster than copying memory to or from web workers, but comes with security implications as outlined here:\n        // https://web.dev/articles/cross-origin-isolation-guide\n        // If enabled, it requires specific CORS headers to be present in the response from the server that is sent when\n        // loading the application. More information is available in the README.\n        if (options.sharedMemoryForWorkers === undefined || options.sharedMemoryForWorkers === null) options.sharedMemoryForWorkers = true;\n        this.sharedMemoryForWorkers = options.sharedMemoryForWorkers;\n\n        // if 'dynamicScene' is true, it tells the viewer to assume scene elements are not stationary or that the number of splats in the\n        // scene may change. This prevents optimizations that depend on a static scene from being made. Additionally, if 'dynamicScene' is\n        // true it tells the splat mesh to not apply scene tranforms to splat data that is returned by functions like\n        // SplatMesh.getSplatCenter() by default.\n        this.dynamicScene = !!options.dynamicScene;\n\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\n        // https://github.com/nerfstudio-project/gsplat/pull/117\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\n        this.antialiased = options.antialiased || false;\n\n        this.webXRMode = options.webXRMode || WebXRMode.None;\n        if (this.webXRMode !== WebXRMode.None) {\n            this.gpuAcceleratedSort = false;\n        }\n        this.webXRActive = false;\n\n        // if 'renderMode' is RenderMode.Always, then the viewer will rrender the scene on every update. If it is RenderMode.OnChange,\n        // it will only render when something in the scene has changed.\n        this.renderMode = options.renderMode || RenderMode.Always;\n\n        // SceneRevealMode.Default results in a nice, slow fade-in effect for progressively loaded scenes,\n        // and a fast fade-in for non progressively loaded scenes.\n        // SceneRevealMode.Gradual will force a slow fade-in for all scenes.\n        // SceneRevealMode.Instant will force all loaded scene data to be immediately visible.\n        this.sceneRevealMode = options.sceneRevealMode || SceneRevealMode.Default;\n\n        // Hacky, experimental, non-scientific parameter for tweaking focal length related calculations. For scenes with very\n        // small gaussians, small details, and small dimensions -- increasing this value can help improve visual quality.\n        this.focalAdjustment = options.focalAdjustment || 1.0;\n\n        // Specify the maximum screen-space splat size, can help deal with large splats that get too unwieldy\n        this.maxScreenSpaceSplatSize = options.maxScreenSpaceSplatSize || 2048;\n\n        // The verbosity of console logging\n        this.logLevel = options.logLevel || LogLevel.None;\n\n        // Degree of spherical harmonics to utilize in rendering splats (assuming the data is present in the splat scene).\n        // Valid values are 0 - 3. Default value is 0.\n        this.sphericalHarmonicsDegree = options.sphericalHarmonicsDegree || 0;\n\n        this.createSplatMesh();\n\n        this.controls = null;\n        this.perspectiveControls = null;\n        this.orthographicControls = null;\n\n        this.orthographicCamera = null;\n        this.perspectiveCamera = null;\n\n        this.showMeshCursor = false;\n        this.showControlPlane = false;\n        this.showInfo = false;\n\n        this.sceneHelper = null;\n\n        this.sortWorker = null;\n        this.sortRunning = false;\n        this.splatRenderCount = 0;\n        this.sortWorkerIndexesToSort = null;\n        this.sortWorkerSortedIndexes = null;\n        this.sortWorkerPrecomputedDistances = null;\n        this.sortWorkerTransforms = null;\n        this.runAfterFirstSort = [];\n\n        this.selfDrivenModeRunning = false;\n        this.splatRenderReady = false;\n\n        this.raycaster = new Raycaster();\n\n        this.infoPanel = null;\n\n        this.startInOrthographicMode = false;\n\n        this.currentFPS = 0;\n        this.lastSortTime = 0;\n        this.consecutiveRenderFrames = 0;\n\n        this.previousCameraTarget = new THREE.Vector3();\n        this.nextCameraTarget = new THREE.Vector3();\n\n        this.mousePosition = new THREE.Vector2();\n        this.mouseDownPosition = new THREE.Vector2();\n        this.mouseDownTime = null;\n\n        this.resizeObserver = null;\n        this.mouseMoveListener = null;\n        this.mouseDownListener = null;\n        this.mouseUpListener = null;\n        this.keyDownListener = null;\n\n        this.sortPromise = null;\n        this.sortPromiseResolver = null;\n        this.splatSceneDownloadPromises = {};\n        this.splatSceneDownloadAndBuildPromise = null;\n        this.splatSceneRemovalPromise = null;\n\n        this.loadingSpinner = new LoadingSpinner(null, this.rootElement || document.body);\n        this.loadingSpinner.hide();\n        this.loadingProgressBar = new LoadingProgressBar(this.rootElement || document.body);\n        this.loadingProgressBar.hide();\n        this.infoPanel = new InfoPanel(this.rootElement || document.body);\n        this.infoPanel.hide();\n\n        this.usingExternalCamera = (this.dropInMode || this.camera) ? true : false;\n        this.usingExternalRenderer = (this.dropInMode || this.renderer) ? true : false;\n\n        this.initialized = false;\n        this.disposing = false;\n        this.disposed = false;\n        if (!this.dropInMode) this.init();\n    }\n\n    createSplatMesh() {\n        this.splatMesh = new SplatMesh(this.dynamicScene, this.halfPrecisionCovariancesOnGPU, this.devicePixelRatio,\n                                       this.gpuAcceleratedSort, this.integerBasedSort, this.antialiased,\n                                       this.maxScreenSpaceSplatSize, this.logLevel, this.sphericalHarmonicsDegree);\n        this.splatMesh.frustumCulled = false;\n    }\n\n    init() {\n\n        if (this.initialized) return;\n\n        if (!this.rootElement) {\n            if (!this.usingExternalRenderer) {\n                this.rootElement = document.createElement('div');\n                this.rootElement.style.width = '100%';\n                this.rootElement.style.height = '100%';\n                this.rootElement.style.position = 'absolute';\n                document.body.appendChild(this.rootElement);\n            } else {\n                this.rootElement = this.renderer.domElement.parentElement || document.body;\n            }\n        }\n\n        this.setupCamera();\n        this.setupRenderer();\n        this.setupWebXR();\n        this.setupControls();\n        this.setupEventHandlers();\n\n        this.threeScene = this.threeScene || new THREE.Scene();\n        this.sceneHelper = new SceneHelper(this.threeScene);\n        this.sceneHelper.setupMeshCursor();\n        this.sceneHelper.setupFocusMarker();\n        this.sceneHelper.setupControlPlane();\n\n        this.loadingProgressBar.setContainer(this.rootElement);\n        this.loadingSpinner.setContainer(this.rootElement);\n        this.infoPanel.setContainer(this.rootElement);\n\n        this.initialized = true;\n    }\n\n    setupCamera() {\n        if (!this.usingExternalCamera) {\n            const renderDimensions = new THREE.Vector2();\n            this.getRenderDimensions(renderDimensions);\n\n            this.perspectiveCamera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 1000);\n            this.orthographicCamera = new THREE.OrthographicCamera(renderDimensions.x / -2, renderDimensions.x / 2,\n                                                                   renderDimensions.y / 2, renderDimensions.y / -2, 0.1, 1000 );\n            this.camera = this.startInOrthographicMode ? this.orthographicCamera : this.perspectiveCamera;\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.up.copy(this.cameraUp).normalize();\n            this.camera.lookAt(this.initialCameraLookAt);\n        }\n    }\n\n    setupRenderer() {\n        if (!this.usingExternalRenderer) {\n            const renderDimensions = new THREE.Vector2();\n            this.getRenderDimensions(renderDimensions);\n\n            this.renderer = new THREE.WebGLRenderer({\n                antialias: false,\n                precision: 'highp'\n            });\n            this.renderer.setPixelRatio(this.devicePixelRatio);\n            this.renderer.autoClear = true;\n            this.renderer.setClearColor(new THREE.Color( 0x000000 ), 0.0);\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n\n            this.resizeObserver = new ResizeObserver(() => {\n                this.getRenderDimensions(renderDimensions);\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n                this.forceRenderNextFrame();\n            });\n            this.resizeObserver.observe(this.rootElement);\n            this.rootElement.appendChild(this.renderer.domElement);\n        }\n\n    }\n\n    setupWebXR() {\n        if (this.webXRMode) {\n            if (this.webXRMode === WebXRMode.VR) {\n                this.rootElement.appendChild(VRButton.createButton(this.renderer));\n            } else if (this.webXRMode === WebXRMode.AR) {\n                this.rootElement.appendChild(ARButton.createButton(this.renderer));\n            }\n            this.renderer.xr.addEventListener('sessionstart', (e) => {\n                this.webXRActive = true;\n            });\n            this.renderer.xr.addEventListener('sessionend', (e) => {\n                this.webXRActive = false;\n            });\n            this.renderer.xr.enabled = true;\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.up.copy(this.cameraUp).normalize();\n            this.camera.lookAt(this.initialCameraLookAt);\n        }\n    }\n\n    setupControls() {\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\n            if (!this.usingExternalCamera) {\n                this.perspectiveControls = new OrbitControls(this.perspectiveCamera, this.renderer.domElement);\n                this.orthographicControls = new OrbitControls(this.orthographicCamera, this.renderer.domElement);\n            } else {\n                if (this.camera.isOrthographicCamera) {\n                    this.orthographicControls = new OrbitControls(this.camera, this.renderer.domElement);\n                } else {\n                    this.perspectiveControls = new OrbitControls(this.camera, this.renderer.domElement);\n                }\n            }\n            for (let controls of [this.perspectiveControls, this.orthographicControls]) {\n                if (controls) {\n                    controls.listenToKeyEvents(window);\n                    controls.rotateSpeed = 0.5;\n                    controls.maxPolarAngle = Math.PI * .75;\n                    controls.minPolarAngle = 0.1;\n                    controls.enableDamping = true;\n                    controls.dampingFactor = 0.05;\n                    controls.target.copy(this.initialCameraLookAt);\n                }\n            }\n            this.controls = this.camera.isOrthographicCamera ? this.orthographicControls : this.perspectiveControls;\n        }\n    }\n\n    setupEventHandlers() {\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\n            this.mouseMoveListener = this.onMouseMove.bind(this);\n            this.renderer.domElement.addEventListener('pointermove', this.mouseMoveListener, false);\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.renderer.domElement.addEventListener('pointerdown', this.mouseDownListener, false);\n            this.mouseUpListener = this.onMouseUp.bind(this);\n            this.renderer.domElement.addEventListener('pointerup', this.mouseUpListener, false);\n            this.keyDownListener = this.onKeyDown.bind(this);\n            window.addEventListener('keydown', this.keyDownListener, false);\n        }\n    }\n\n    removeEventHandlers() {\n        if (this.useBuiltInControls) {\n            this.renderer.domElement.removeEventListener('pointermove', this.mouseMoveListener);\n            this.mouseMoveListener = null;\n            this.renderer.domElement.removeEventListener('pointerdown', this.mouseDownListener);\n            this.mouseDownListener = null;\n            this.renderer.domElement.removeEventListener('pointerup', this.mouseUpListener);\n            this.mouseUpListener = null;\n            window.removeEventListener('keydown', this.keyDownListener);\n            this.keyDownListener = null;\n        }\n    }\n\n    setRenderMode(renderMode) {\n        this.renderMode = renderMode;\n    }\n\n    onKeyDown = function() {\n\n        const forward = new THREE.Vector3();\n        const tempMatrixLeft = new THREE.Matrix4();\n        const tempMatrixRight = new THREE.Matrix4();\n\n        return function(e) {\n            forward.set(0, 0, -1);\n            forward.transformDirection(this.camera.matrixWorld);\n            tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\n            tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\n            switch (e.code) {\n                case 'KeyG':\n                    this.focalAdjustment += 0.02;\n                    this.forceRenderNextFrame();\n                break;\n                case 'KeyF':\n                    this.focalAdjustment -= 0.02;\n                    this.forceRenderNextFrame();\n                break;\n                case 'ArrowLeft':\n                    this.camera.up.transformDirection(tempMatrixLeft);\n                break;\n                case 'ArrowRight':\n                    this.camera.up.transformDirection(tempMatrixRight);\n                break;\n                case 'KeyC':\n                    this.showMeshCursor = !this.showMeshCursor;\n                break;\n                case 'KeyU':\n                    this.showControlPlane = !this.showControlPlane;\n                break;\n                case 'KeyI':\n                    this.showInfo = !this.showInfo;\n                    if (this.showInfo) {\n                        this.infoPanel.show();\n                    } else {\n                        this.infoPanel.hide();\n                    }\n                break;\n                case 'KeyO':\n                    if (!this.usingExternalCamera) {\n                        this.setOrthographicMode(!this.camera.isOrthographicCamera);\n                    }\n                break;\n                case 'KeyP':\n                    if (!this.usingExternalCamera) {\n                        this.splatMesh.setPointCloudModeEnabled(!this.splatMesh.getPointCloudModeEnabled());\n                    }\n                break;\n                case 'Equal':\n                    if (!this.usingExternalCamera) {\n                        this.splatMesh.setSplatScale(this.splatMesh.getSplatScale() + 0.05);\n                    }\n                break;\n                case 'Minus':\n                    if (!this.usingExternalCamera) {\n                        this.splatMesh.setSplatScale(Math.max(this.splatMesh.getSplatScale() - 0.05, 0.0));\n                    }\n                break;\n            }\n        };\n\n    }();\n\n    onMouseMove(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n    }\n\n    onMouseDown() {\n        this.mouseDownPosition.copy(this.mousePosition);\n        this.mouseDownTime = getCurrentTime();\n    }\n\n    onMouseUp = function() {\n\n        const clickOffset = new THREE.Vector2();\n\n        return function(mouse) {\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\n            const mouseUpTime = getCurrentTime();\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\n            if (wasClick) {\n                this.onMouseClick(mouse);\n            }\n        };\n\n    }();\n\n    onMouseClick(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n        this.checkForFocalPointChange();\n    }\n\n    checkForFocalPointChange = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        const toNewFocalPoint = new THREE.Vector3();\n        const outHits = [];\n\n        return function() {\n            if (!this.transitioningCameraTarget) {\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    const hit = outHits[0];\n                    const intersectionPoint = hit.origin;\n                    toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\n                    if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\n                        this.previousCameraTarget.copy(this.controls.target);\n                        this.nextCameraTarget.copy(intersectionPoint);\n                        this.transitioningCameraTarget = true;\n                        this.transitioningCameraTargetStartTime = getCurrentTime();\n                    }\n                }\n            }\n        };\n\n    }();\n\n    getRenderDimensions(outDimensions) {\n        if (this.rootElement) {\n            outDimensions.x = this.rootElement.offsetWidth;\n            outDimensions.y = this.rootElement.offsetHeight;\n        } else {\n            this.renderer.getSize(outDimensions);\n        }\n    }\n\n    setOrthographicMode(orthographicMode) {\n        if (orthographicMode === this.camera.isOrthographicCamera) return;\n        const fromCamera = this.camera;\n        const toCamera = orthographicMode ? this.orthographicCamera : this.perspectiveCamera;\n        toCamera.position.copy(fromCamera.position);\n        toCamera.up.copy(fromCamera.up);\n        toCamera.rotation.copy(fromCamera.rotation);\n        toCamera.quaternion.copy(fromCamera.quaternion);\n        toCamera.matrix.copy(fromCamera.matrix);\n        this.camera = toCamera;\n\n        if (this.controls) {\n\n            const resetControls = (controls) => {\n                controls.saveState();\n                controls.reset();\n            };\n\n            const fromControls = this.controls;\n            const toControls = orthographicMode ? this.orthographicControls : this.perspectiveControls;\n\n            resetControls(toControls);\n            resetControls(fromControls);\n\n            toControls.target.copy(fromControls.target);\n            if (orthographicMode) {\n                Viewer.setCameraZoomFromPosition(toCamera, fromCamera, fromControls);\n            } else {\n                Viewer.setCameraPositionFromZoom(toCamera, fromCamera, toControls);\n            }\n            this.controls = toControls;\n            this.camera.lookAt(this.controls.target);\n        }\n    }\n\n    static setCameraPositionFromZoom = function() {\n\n        const tempVector = new THREE.Vector3();\n\n        return function(positionCamera, zoomedCamera, controls) {\n            const toLookAtDistance = 1 / (zoomedCamera.zoom * 0.001);\n            tempVector.copy(controls.target).sub(positionCamera.position).normalize().multiplyScalar(toLookAtDistance).negate();\n            positionCamera.position.copy(controls.target).add(tempVector);\n        };\n\n    }();\n\n\n    static setCameraZoomFromPosition = function() {\n\n        const tempVector = new THREE.Vector3();\n\n        return function(zoomCamera, positionZamera, controls) {\n            const toLookAtDistance = tempVector.copy(controls.target).sub(positionZamera.position).length();\n            zoomCamera.zoom = 1 / (toLookAtDistance * .001);\n        };\n\n    }();\n\n    updateSplatMesh = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (!this.splatMesh) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            if (splatCount > 0) {\n                this.splatMesh.updateTransforms();\n                this.getRenderDimensions(renderDimensions);\n                const focalLengthX = this.camera.projectionMatrix.elements[0] * 0.5 *\n                                     this.devicePixelRatio * renderDimensions.x;\n                const focalLengthY = this.camera.projectionMatrix.elements[5] * 0.5 *\n                                     this.devicePixelRatio * renderDimensions.y;\n\n                const focalMultiplier = this.camera.isOrthographicCamera ? (1.0 / this.devicePixelRatio) : 1.0;\n                const focalAdjustment = this.focalAdjustment * focalMultiplier;\n                const inverseFocalAdjustment = 1.0 / focalAdjustment;\n\n                this.adjustForWebXRStereo(renderDimensions);\n                this.splatMesh.updateUniforms(renderDimensions, focalLengthX * focalAdjustment, focalLengthY * focalAdjustment,\n                                              this.camera.isOrthographicCamera, this.camera.zoom || 1.0, inverseFocalAdjustment);\n            }\n        };\n\n    }();\n\n    adjustForWebXRStereo(renderDimensions) {\n        // TODO: Figure out a less hacky way to determine if stereo rendering is active\n        if (this.camera && this.webXRActive) {\n            const xrCamera = this.renderer.xr.getCamera();\n            const xrCameraProj00 = xrCamera.projectionMatrix.elements[0];\n            const cameraProj00 = this.camera.projectionMatrix.elements[0];\n            renderDimensions.x *= (cameraProj00 / xrCameraProj00);\n        }\n    }\n\n    isLoadingOrUnloading() {\n        return Object.keys(this.splatSceneDownloadPromises).length > 0 || this.splatSceneDownloadAndBuildPromise !== null ||\n                           this.splatSceneRemovalPromise !== null;\n    }\n\n    isDisposingOrDisposed() {\n        return this.disposing || this.disposed;\n    }\n\n    addSplatSceneDownloadPromise(promise) {\n        this.splatSceneDownloadPromises[promise.id] = promise;\n    }\n\n    removeSplatSceneDownloadPromise(promise) {\n        delete this.splatSceneDownloadPromises[promise.id];\n    }\n\n    setSplatSceneDownloadAndBuildPromise(promise) {\n        this.splatSceneDownloadAndBuildPromise = promise;\n    }\n\n    clearSplatSceneDownloadAndBuildPromise() {\n        this.splatSceneDownloadAndBuildPromise = null;\n    }\n\n    /**\n     * Add a splat scene to the viewer and display any loading UI if appropriate.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {object} options {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     *         onProgress:                 Function to be called as file data are received, or other processing occurs\n     *\n     * }\n     * @return {AbortablePromise}\n     */\n    addSplatScene(path, options = {}) {\n\n        if (this.isLoadingOrUnloading()) {\n            throw new Error('Cannot add splat scene while another load or unload is already in progress.');\n        }\n\n        if (this.isDisposingOrDisposed()) {\n            throw new Error('Cannot add splat scene after dispose() is called.');\n        }\n\n        const format = (options.format !== undefined && options.format !== null) ? options.format : sceneFormatFromPath(path);\n        const streamBuildSections = Viewer.isStreamable(format) && options.streamView;\n        const showLoadingUI = (options.showLoadingUI !== undefined && options.showLoadingUI !== null) ? options.showLoadingUI : true;\n\n        let loadingUITaskId = null;\n        if (showLoadingUI) {\n            this.loadingSpinner.removeAllTasks();\n            loadingUITaskId = this.loadingSpinner.addTask('Downloading...');\n        }\n        const hideLoadingUI = () => {\n            this.loadingProgressBar.hide();\n            this.loadingSpinner.removeAllTasks();\n        };\n\n        const onProgressUIUpdate = (percentComplete, percentCompleteLabel, loaderStatus) => {\n            if (showLoadingUI) {\n                if (loaderStatus === LoaderStatus.Downloading) {\n                    if (percentComplete == 100) {\n                        this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Download complete!');\n                    } else {\n                        if (streamBuildSections) {\n                            this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Downloading splats...');\n                        } else {\n                            const suffix = percentCompleteLabel ? `: ${percentCompleteLabel}` : `...`;\n                            this.loadingSpinner.setMessageForTask(loadingUITaskId, `Downloading${suffix}`);\n                        }\n                    }\n                } else if (loaderStatus === LoaderStatus.Processing) {\n                    this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Processing splats...');\n                } else {\n                    this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Ready!');\n                }\n            }\n        };\n\n        let downloadDone = false;\n        let downloadedPercentage = 0;\n        const splatBuffersAddedUIUpdate = (firstBuild, finalBuild) => {\n            if (showLoadingUI) {\n                if (firstBuild && streamBuildSections || finalBuild && !streamBuildSections) {\n                    this.runAfterFirstSort.push(() => {\n                        this.loadingSpinner.removeTask(loadingUITaskId);\n                        if (!finalBuild && !downloadDone) this.loadingProgressBar.show();\n                    });\n                }\n                if (streamBuildSections) {\n                    if (finalBuild) {\n                        downloadDone = true;\n                        this.loadingProgressBar.hide();\n                    } else {\n                        this.loadingProgressBar.setProgress(downloadedPercentage);\n                    }\n                }\n            }\n        };\n\n        const onProgress = (percentComplete, percentCompleteLabel, loaderStatus) => {\n            downloadedPercentage = percentComplete;\n            onProgressUIUpdate(percentComplete, percentCompleteLabel, loaderStatus);\n            if (options.onProgress) options.onProgress(percentComplete, percentCompleteLabel, loaderStatus);\n        };\n\n        const buildSection = (splatBuffer, firstBuild, finalBuild) => {\n            if (!streamBuildSections && options.onProgress) options.onProgress(0, '0%', LoaderStatus.Processing);\n            const addSplatBufferOptions = {\n                'rotation': options.rotation || options.orientation,\n                'position': options.position,\n                'scale': options.scale,\n                'splatAlphaRemovalThreshold': options.splatAlphaRemovalThreshold,\n            };\n            return this.addSplatBuffers([splatBuffer], [addSplatBufferOptions],\n                                         finalBuild, firstBuild && showLoadingUI, showLoadingUI).then(() => {\n                if (!streamBuildSections && options.onProgress) options.onProgress(100, '100%', LoaderStatus.Processing);\n                splatBuffersAddedUIUpdate(firstBuild, finalBuild);\n            });\n        };\n\n        const loadFunc = streamBuildSections ? this.downloadAndBuildSingleSplatSceneStreaming.bind(this) :\n                                               this.downloadAndBuildSingleSplatSceneNonStreaming.bind(this);\n        return loadFunc(path, format, options.splatAlphaRemovalThreshold, buildSection.bind(this), onProgress, hideLoadingUI.bind(this));\n    }\n\n    /**\n     * Download a single non-streamed splat scene, convert to splat buffer and then rebuild the viewer's splat mesh\n     * by calling 'buildFunc'. Also sets/clears relevant instance synchronization objects, and calls appropriate functions\n     * on success or failure.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {SceneFormat} format Format of the splat scene file\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\n     * @param {function} buildFunc Function to build the viewer's splat mesh with the downloaded splat buffer\n     * @param {function} onProgress Function to be called as file data are received, or other processing occurs\n     * @param {function} onException Function to be called when exception occurs\n     * @return {AbortablePromise}\n     */\n    downloadAndBuildSingleSplatSceneNonStreaming(path, format, splatAlphaRemovalThreshold, buildFunc, onProgress, onException) {\n        const downloadPromise = this.downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold, onProgress, false, undefined, format)\n        .then((splatBuffer) => {\n            this.removeSplatSceneDownloadPromise(downloadPromise);\n            return buildFunc(splatBuffer, true, true).then(() => {\n                this.clearSplatSceneDownloadAndBuildPromise();\n            });\n        })\n        .catch((e) => {\n            if (onException) onException();\n            this.clearSplatSceneDownloadAndBuildPromise();\n            this.removeSplatSceneDownloadPromise(downloadPromise);\n            if (!(e instanceof AbortedPromiseError)) {\n                throw (new Error(`Viewer::addSplatScene -> Could not load file ${path}`));\n            }\n        });\n\n        this.addSplatSceneDownloadPromise(downloadPromise);\n        this.setSplatSceneDownloadAndBuildPromise(downloadPromise);\n\n        return downloadPromise;\n    }\n\n    /**\n     * Download a single splat scene and convert to splat buffer in a streamed manner, allowing rendering as the file downloads.\n     * As each section is downloaded, the viewer's splat mesh is rebuilt by calling 'buildFunc'\n     * Also sets/clears relevant instance synchronization objects, and calls appropriate functions on success or failure.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {SceneFormat} format Format of the splat scene file\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\n     * @param {function} buildFunc Function to rebuild the viewer's splat mesh after a new splat buffer section is downloaded\n     * @param {function} onDownloadProgress Function to be called as file data are received\n     * @param {function} onDownloadException Function to be called when exception occurs at any point during the full download\n     * @return {AbortablePromise}\n     */\n    downloadAndBuildSingleSplatSceneStreaming(path, format, splatAlphaRemovalThreshold, buildFunc,\n                                              onDownloadProgress, onDownloadException) {\n        let firstStreamedSectionDownloadAndBuildResolver;\n        let firstStreamedSectionDownloadAndBuildRejecter;\n        let splatSceneDownloadAndBuildResolver;\n        let splatSceneDownloadAndBuildRejecter;\n        let steamedSectionBuildCount = 0;\n        let streamedSectionBuilding = false;\n        const queuedStreamedSectionBuilds = [];\n\n        const checkAndBuildStreamedSections = () => {\n            if (queuedStreamedSectionBuilds.length > 0 && !streamedSectionBuilding && !this.isDisposingOrDisposed()) {\n                streamedSectionBuilding = true;\n                const queuedBuild = queuedStreamedSectionBuilds.shift();\n                buildFunc(queuedBuild.splatBuffer, queuedBuild.firstBuild, queuedBuild.finalBuild)\n                .then(() => {\n                    streamedSectionBuilding = false;\n                    if (queuedBuild.firstBuild) {\n                        firstStreamedSectionDownloadAndBuildRejecter = null;\n                        firstStreamedSectionDownloadAndBuildResolver();\n                    } else if (queuedBuild.finalBuild) {\n                        splatSceneDownloadAndBuildResolver();\n                        this.clearSplatSceneDownloadAndBuildPromise();\n                    }\n                    if (queuedStreamedSectionBuilds.length > 0) delayedExecute(() => checkAndBuildStreamedSections());\n                });\n            }\n        };\n\n        const onStreamedSectionProgress = (splatBuffer, finalBuild) => {\n            if (!this.isDisposingOrDisposed()) {\n                if (finalBuild || queuedStreamedSectionBuilds.length === 0 ||\n                    splatBuffer.getSplatCount() > queuedStreamedSectionBuilds[0].splatBuffer.getSplatCount()) {\n                    queuedStreamedSectionBuilds.push({\n                        splatBuffer,\n                        firstBuild: steamedSectionBuildCount === 0,\n                        finalBuild\n                    });\n                    steamedSectionBuildCount++;\n                    checkAndBuildStreamedSections();\n                }\n            }\n        };\n\n        let splatSceneDownloadPromise = this.downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold,\n                                                                             onDownloadProgress, true, onStreamedSectionProgress, format);\n\n        const firstStreamedSectionBuildPromise = new AbortablePromise((resolver, rejecter) => {\n            firstStreamedSectionDownloadAndBuildResolver = resolver;\n            firstStreamedSectionDownloadAndBuildRejecter = rejecter;\n        }, splatSceneDownloadPromise.abortHandler);\n\n        const splatSceneDownloadAndBuildPromise = new AbortablePromise((resolver, rejecter) => {\n            splatSceneDownloadAndBuildResolver = resolver;\n            splatSceneDownloadAndBuildRejecter = rejecter;\n        });\n\n        this.addSplatSceneDownloadPromise(splatSceneDownloadPromise);\n        this.setSplatSceneDownloadAndBuildPromise(splatSceneDownloadAndBuildPromise);\n\n        splatSceneDownloadPromise.then(() => {\n            this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\n        })\n        .catch((e) => {\n            this.clearSplatSceneDownloadAndBuildPromise();\n            this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\n            if (!(e instanceof AbortedPromiseError)) {\n                splatSceneDownloadAndBuildRejecter(e);\n                if (firstStreamedSectionDownloadAndBuildRejecter) firstStreamedSectionDownloadAndBuildRejecter(e);\n                if (onDownloadException) onDownloadException(e);\n            }\n        });\n\n        return firstStreamedSectionBuildPromise;\n    }\n\n    /**\n     * Add multiple splat scenes to the viewer and display any loading UI if appropriate.\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\n     *\n     *         path: Path to splat scene to be loaded\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\n     * @param {function} onProgress Function to be called as file data are received\n     * @return {AbortablePromise}\n     */\n    addSplatScenes(sceneOptions, showLoadingUI = true, onProgress = undefined) {\n\n        if (this.isLoadingOrUnloading()) {\n            throw new Error('Cannot add splat scene while another load or unload is already in progress.');\n        }\n\n        if (this.isDisposingOrDisposed()) {\n            throw new Error('Cannot add splat scene after dispose() is called.');\n        }\n\n        const fileCount = sceneOptions.length;\n        const percentComplete = [];\n        if (showLoadingUI) {\n            this.loadingSpinner.removeAllTasks();\n            this.loadingSpinner.show();\n        }\n        const onLoadProgress = (fileIndex, percent, percentLabel) => {\n            percentComplete[fileIndex] = percent;\n            let totalPercent = 0;\n            for (let i = 0; i < fileCount; i++) totalPercent += percentComplete[i] || 0;\n            totalPercent = totalPercent / fileCount;\n            percentLabel = `${totalPercent.toFixed(2)}%`;\n            if (showLoadingUI) {\n                this.loadingSpinner.setMessage(totalPercent == 100 ? `Download complete!` : `Downloading: ${percentLabel}`);\n            }\n            if (onProgress) onProgress(totalPercent, percentLabel, LoaderStatus.Downloading);\n        };\n\n        const downloadPromises = [];\n        const nativeLoadPromises = [];\n        const abortHandlers = [];\n        for (let i = 0; i < sceneOptions.length; i++) {\n            const options = sceneOptions[i];\n            const format = (options.format !== undefined && options.format !== null) ? options.format : sceneFormatFromPath(options.path);\n            const downloadPromise = this.downloadSplatSceneToSplatBuffer(options.path, options.splatAlphaRemovalThreshold,\n                                                                         onLoadProgress.bind(this, i), false, undefined, format);\n            abortHandlers.push(downloadPromise.abortHandler);\n            downloadPromises.push(downloadPromise);\n            nativeLoadPromises.push(downloadPromise.promise);\n            this.addSplatSceneDownloadPromise(downloadPromise);\n        }\n\n        const downloadPromise = new AbortablePromise((resolve, reject) => {\n            Promise.all(nativeLoadPromises)\n            .then((splatBuffers) => {\n                if (showLoadingUI) this.loadingSpinner.hide();\n                if (onProgress) options.onProgress(0, '0%', LoaderStatus.Processing);\n                this.addSplatBuffers(splatBuffers, sceneOptions, true, showLoadingUI, showLoadingUI).then(() => {\n                    if (onProgress) onProgress(100, '100%', LoaderStatus.Processing);\n                    this.clearSplatSceneDownloadAndBuildPromise();\n                    resolve();\n                });\n            })\n            .catch((e) => {\n                if (showLoadingUI) this.loadingSpinner.hide();\n                this.clearSplatSceneDownloadAndBuildPromise();\n                if (!(e instanceof AbortedPromiseError)) {\n                    reject(new Error(`Viewer::addSplatScenes -> Could not load one or more splat scenes.`));\n                } else {\n                    resolve();\n                }\n            })\n            .finally(() => {\n                for (let downloadPromise of downloadPromises) {\n                    this.removeSplatSceneDownloadPromise(downloadPromise);\n                }\n            });\n        }, () => {\n            for (let abortHandler of abortHandlers) abortHandler();\n        });\n        this.setSplatSceneDownloadAndBuildPromise(downloadPromise);\n        return downloadPromise;\n    }\n\n    /**\n     * Download a splat scene and convert to SplatBuffer instance.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified\n     *                                            value (valid range: 0 - 255), defaults to 1\n     *\n     * @param {function} onProgress Function to be called as file data are received\n     * @param {boolean} streamBuiltSections Construct file sections into splat buffers as they are downloaded\n     * @param {function} onSectionBuilt Function to be called when new section is added to the file\n     * @param {string} format File format of the scene\n     * @return {AbortablePromise}\n     */\n    downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold = 1, onProgress = undefined,\n                                    streamBuiltSections = false, onSectionBuilt = undefined, format) {\n        if (format === SceneFormat.Splat) {\n            return SplatLoader.loadFromURL(path, onProgress, streamBuiltSections, onSectionBuilt, splatAlphaRemovalThreshold, 0, false);\n        } else if (format === SceneFormat.KSplat) {\n            return KSplatLoader.loadFromURL(path, onProgress, streamBuiltSections, onSectionBuilt);\n        } else if (format === SceneFormat.Ply) {\n            return PlyLoader.loadFromURL(path, onProgress, streamBuiltSections, onSectionBuilt,\n                                         splatAlphaRemovalThreshold, 0, this.sphericalHarmonicsDegree);\n        }\n        return AbortablePromise.reject(new Error(`Viewer::downloadSplatSceneToSplatBuffer -> File format not supported: ${path}`));\n    }\n\n    static isStreamable(format) {\n        return format === SceneFormat.Splat || format === SceneFormat.KSplat || format === SceneFormat.Ply;\n    }\n\n    /**\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer and set up the sorting web worker.\n     * This function will terminate the existing sort worker (if there is one).\n     */\n    addSplatBuffers = function() {\n\n        return function(splatBuffers, splatBufferOptions = [], finalBuild = true,\n                        showLoadingUI = true, showLoadingUIForSplatTreeBuild = true) {\n\n            if (this.isDisposingOrDisposed()) return Promise.resolve();\n\n            this.splatRenderReady = false;\n            let splatProcessingTaskId = null;\n\n            const finish = (buildResults) => {\n                if (this.isDisposingOrDisposed()) return;\n\n                if (splatProcessingTaskId !== null) {\n                    this.loadingSpinner.removeTask(splatProcessingTaskId);\n                    splatProcessingTaskId = null;\n                }\n\n                // If we aren't calculating the splat distances from the center on the GPU, the sorting worker needs splat centers and\n                // transform indexes so that it can calculate those distance values.\n                if (!this.gpuAcceleratedSort && this.sortWorker) {\n                    this.sortWorker.postMessage({\n                        'centers': buildResults.centers.buffer,\n                        'transformIndexes': buildResults.sceneIndexes.buffer,\n                        'range': {\n                            'from': buildResults.from,\n                            'to': buildResults.to,\n                            'count': buildResults.count\n                        }\n                    });\n                }\n\n                this.splatRenderReady = true;\n                this.sortNeededForSceneChange = true;\n            };\n\n            return new Promise((resolve) => {\n                if (showLoadingUI) {\n                    splatProcessingTaskId = this.loadingSpinner.addTask('Processing splats...');\n                }\n                delayedExecute(() => {\n                    if (this.isDisposingOrDisposed()) {\n                        resolve();\n                    } else {\n                        const buildResults = this.addSplatBuffersToMesh(splatBuffers, splatBufferOptions,\n                                                                        finalBuild, showLoadingUIForSplatTreeBuild);\n                        const maxSplatCount = this.splatMesh.getMaxSplatCount();\n                        if (this.sortWorker && this.sortWorker.maxSplatCount !== maxSplatCount) this.disposeSortWorker();\n                        const sortWorkerSetupPromise = (!this.sortWorker && maxSplatCount > 0) ?\n                                                         this.setupSortWorker(this.splatMesh) : Promise.resolve();\n                        sortWorkerSetupPromise.then(() => {\n                            finish(buildResults);\n                            resolve();\n                        });\n                    }\n                }, true);\n            });\n        };\n\n    }();\n\n    /**\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer. This function is additive; all splat\n     * buffers contained by the viewer's splat mesh before calling this function will be preserved.\n     * @param {Array<SplatBuffer>} splatBuffers SplatBuffer instances\n     * @param {Array<object>} splatBufferOptions Array of options objects: {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\n     * @param {boolean} showLoadingUIForSplatTreeBuild Whether or not to show the loading spinner during construction of the splat tree.\n     * @return {object} Object containing info about the splats that are updated\n     */\n    addSplatBuffersToMesh(splatBuffers, splatBufferOptions, finalBuild = true, showLoadingUIForSplatTreeBuild = false) {\n        if (this.isDisposingOrDisposed()) return;\n        const allSplatBuffers = this.splatMesh.splatBuffers || [];\n        const allSplatBufferOptions = this.splatMesh.splatBufferOptions || [];\n        allSplatBuffers.push(...splatBuffers);\n        allSplatBufferOptions.push(...splatBufferOptions);\n        if (this.renderer) this.splatMesh.setRenderer(this.renderer);\n        let splatOptimizingTaskId;\n        const onSplatTreeIndexesUpload = (finished) => {\n            if (this.isDisposingOrDisposed()) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            if (showLoadingUIForSplatTreeBuild && splatCount >= MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER) {\n                if (!finished && !splatOptimizingTaskId) {\n                    this.loadingSpinner.setMinimized(true, true);\n                    splatOptimizingTaskId = this.loadingSpinner.addTask('Optimizing splats...');\n                }\n            }\n        };\n        const onSplatTreeReady = (finished) => {\n            if (this.isDisposingOrDisposed()) return;\n            if (finished && splatOptimizingTaskId) {\n                this.loadingSpinner.removeTask(splatOptimizingTaskId);\n            }\n        };\n        return this.splatMesh.build(allSplatBuffers, allSplatBufferOptions, true, finalBuild, onSplatTreeIndexesUpload, onSplatTreeReady);\n    }\n\n    /**\n     * Set up the splat sorting web worker.\n     * @param {SplatMesh} splatMesh SplatMesh instance that contains the splats to be sorted\n     * @return {Promise}\n     */\n    setupSortWorker(splatMesh) {\n        if (this.isDisposingOrDisposed()) return;\n        return new Promise((resolve) => {\n            const DistancesArrayType = this.integerBasedSort ? Int32Array : Float32Array;\n            const splatCount = splatMesh.getSplatCount();\n            const maxSplatCount = splatMesh.getMaxSplatCount();\n            this.sortWorker = createSortWorker(maxSplatCount, this.sharedMemoryForWorkers,\n                                               this.integerBasedSort, this.splatMesh.dynamicMode);\n            let sortCount = 0;\n            this.sortWorker.onmessage = (e) => {\n                if (e.data.sortDone) {\n                    this.sortRunning = false;\n                    if (this.sharedMemoryForWorkers) {\n                        this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes, e.data.splatRenderCount);\n                    } else {\n                        const sortedIndexes = new Uint32Array(e.data.sortedIndexes.buffer, 0, e.data.splatRenderCount);\n                        this.splatMesh.updateRenderIndexes(sortedIndexes, e.data.splatRenderCount);\n                    }\n                    this.lastSortTime = e.data.sortTime;\n                    this.sortPromiseResolver();\n                    this.sortPromiseResolver = null;\n                    this.forceRenderNextFrame();\n                    if (sortCount === 0) {\n                        this.runAfterFirstSort.forEach((func) => {\n                            func();\n                        });\n                        this.runAfterFirstSort.length = 0;\n                    }\n                    sortCount++;\n                } else if (e.data.sortCanceled) {\n                    this.sortRunning = false;\n                } else if (e.data.sortSetupPhase1Complete) {\n                    if (this.logLevel >= LogLevel.Info) console.log('Sorting web worker WASM setup complete.');\n                    if (this.sharedMemoryForWorkers) {\n                        this.sortWorkerSortedIndexes = new Uint32Array(e.data.sortedIndexesBuffer,\n                                                                       e.data.sortedIndexesOffset, maxSplatCount);\n                        this.sortWorkerIndexesToSort = new Uint32Array(e.data.indexesToSortBuffer,\n                                                                       e.data.indexesToSortOffset, maxSplatCount);\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(e.data.precomputedDistancesBuffer,\n                                                                                     e.data.precomputedDistancesOffset,\n                                                                                     maxSplatCount);\n                         this.sortWorkerTransforms = new Float32Array(e.data.transformsBuffer,\n                                                                      e.data.transformsOffset, Constants.MaxScenes * 16);\n                    } else {\n                        this.sortWorkerIndexesToSort = new Uint32Array(maxSplatCount);\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(maxSplatCount);\n                        this.sortWorkerTransforms = new Float32Array(Constants.MaxScenes * 16);\n                    }\n                    for (let i = 0; i < splatCount; i++) this.sortWorkerIndexesToSort[i] = i;\n                    this.sortWorker.maxSplatCount = maxSplatCount;\n\n                    if (this.logLevel >= LogLevel.Info) {\n                        console.log('Sorting web worker ready.');\n                        const splatDataTextures = this.splatMesh.getSplatDataTextures();\n                        const covariancesTextureSize = splatDataTextures.covariances.size;\n                        const centersColorsTextureSize = splatDataTextures.centerColors.size;\n                        console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\n                        console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\n                    }\n\n                    resolve();\n                }\n            };\n        });\n    }\n\n    disposeSortWorker() {\n        if (this.sortWorker) this.sortWorker.terminate();\n        this.sortWorker = null;\n        this.sortPromise = null;\n        if (this.sortPromiseResolver) {\n            this.sortPromiseResolver();\n            this.sortPromiseResolver = null;\n        }\n        this.sortRunning = false;\n    }\n\n    removeSplatScene(index, showLoadingUI = true) {\n        if (this.isLoadingOrUnloading()) {\n            throw new Error('Cannot remove splat scene while another load or unload is already in progress.');\n        }\n\n        if (this.isDisposingOrDisposed()) {\n            throw new Error('Cannot remove splat scene after dispose() is called.');\n        }\n\n        let sortPromise;\n\n        this.splatSceneRemovalPromise = new Promise((resolve, reject) => {\n            let revmovalTaskId;\n\n            if (showLoadingUI) {\n                this.loadingSpinner.removeAllTasks();\n                this.loadingSpinner.show();\n                revmovalTaskId = this.loadingSpinner.addTask('Removing splat scene...');\n            }\n\n            const checkAndHideLoadingUI = () => {\n                if (showLoadingUI) {\n                    this.loadingSpinner.hide();\n                    this.loadingSpinner.removeTask(revmovalTaskId);\n                }\n            };\n\n            const onDone = (error) => {\n                checkAndHideLoadingUI();\n                this.splatSceneRemovalPromise = null;\n                if (!error) resolve();\n                else reject(error);\n            };\n\n            const checkForEarlyExit = () => {\n                if (this.isDisposingOrDisposed()) {\n                    onDone();\n                    return true;\n                }\n                return false;\n            };\n\n            sortPromise = this.sortPromise || Promise.resolve();\n            sortPromise.then(() => {\n                if (checkForEarlyExit()) return;\n                const savedSplatBuffers = [];\n                const savedSceneOptions = [];\n                const savedSceneTransformComponents = [];\n                const savedVisibleRegionFadeStartRadius = this.splatMesh.visibleRegionFadeStartRadius;\n                for (let i = 0; i < this.splatMesh.scenes.length; i++) {\n                    if (i !== index) {\n                        const scene = this.splatMesh.scenes[i];\n                        savedSplatBuffers.push(scene.splatBuffer);\n                        savedSceneOptions.push(this.splatMesh.sceneOptions[i]);\n                        savedSceneTransformComponents.push({\n                            'position': scene.position.clone(),\n                            'quaternion': scene.quaternion.clone(),\n                            'scale': scene.scale.clone()\n                        });\n                    }\n                }\n                this.disposeSortWorker();\n                this.splatMesh.dispose();\n                this.createSplatMesh();\n                this.addSplatBuffers(savedSplatBuffers, savedSceneOptions, true, false, true)\n                .then(() => {\n                    if (checkForEarlyExit()) return;\n                    checkAndHideLoadingUI();\n                    this.splatMesh.visibleRegionFadeStartRadius = savedVisibleRegionFadeStartRadius;\n                    this.splatMesh.scenes.forEach((scene, index) => {\n                        scene.position.copy(savedSceneTransformComponents[index].position);\n                        scene.quaternion.copy(savedSceneTransformComponents[index].quaternion);\n                        scene.scale.copy(savedSceneTransformComponents[index].scale);\n                    });\n                    this.splatMesh.updateTransforms();\n                    this.splatRenderReady = false;\n                    this.updateSplatSort(true)\n                    .then(() => {\n                        if (checkForEarlyExit()) {\n                            this.splatRenderReady = true;\n                            return;\n                        }\n                        sortPromise = this.sortPromise || Promise.resolve();\n                        sortPromise.then(() => {\n                            this.splatRenderReady = true;\n                            onDone();\n                        });\n                    });\n                })\n                .catch((e) => {\n                    onDone(e);\n                });\n            });\n        });\n\n        return this.splatSceneRemovalPromise;\n    }\n\n    /**\n     * Start self-driven mode\n     */\n    start() {\n        if (this.selfDrivenMode) {\n            if (this.webXRMode) {\n                this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc);\n            } else {\n                this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n            }\n            this.selfDrivenModeRunning = true;\n        } else {\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\n        }\n    }\n\n    /**\n     * Stop self-driven mode\n     */\n    stop() {\n        if (this.selfDrivenMode && this.selfDrivenModeRunning) {\n            if (!this.webXRMode) {\n                cancelAnimationFrame(this.requestFrameId);\n            }\n            this.selfDrivenModeRunning = false;\n        }\n    }\n\n    /**\n     * Dispose of all resources held directly and indirectly by this viewer.\n     */\n    async dispose() {\n        this.disposing = true;\n        let waitPromises = [];\n        let promisesToAbort = [];\n        for (let promiseKey in this.splatSceneDownloadPromises) {\n            if (this.splatSceneDownloadPromises.hasOwnProperty(promiseKey)) {\n                const downloadPromiseToAbort = this.splatSceneDownloadPromises[promiseKey];\n                promisesToAbort.push(downloadPromiseToAbort);\n                waitPromises.push(downloadPromiseToAbort.promise);\n            }\n        }\n        if (this.sortPromise) {\n            waitPromises.push(this.sortPromise);\n        }\n        const disposePromise = Promise.all(waitPromises).finally(() => {\n            this.stop();\n            if (this.controls) {\n                this.controls.dispose();\n                this.controls = null;\n            }\n            if (this.splatMesh) {\n                this.splatMesh.dispose();\n                this.splatMesh = null;\n            }\n            if (this.sceneHelper) {\n                this.sceneHelper.dispose();\n                this.sceneHelper = null;\n            }\n            if (this.resizeObserver) {\n                this.resizeObserver.unobserve(this.rootElement);\n                this.resizeObserver = null;\n            }\n            this.disposeSortWorker();\n            this.removeEventHandlers();\n\n            this.loadingSpinner.removeAllTasks();\n            this.loadingSpinner.setContainer(null);\n            this.loadingProgressBar.hide();\n            this.loadingProgressBar.setContainer(null);\n            this.infoPanel.setContainer(null);\n\n            this.camera = null;\n            this.threeScene = null;\n            this.splatRenderReady = false;\n            this.initialized = false;\n            if (this.renderer) {\n                if (!this.usingExternalRenderer) {\n                    this.rootElement.removeChild(this.renderer.domElement);\n                    this.renderer.dispose();\n                }\n                this.renderer = null;\n            }\n\n            if (!this.usingExternalRenderer) {\n                document.body.removeChild(this.rootElement);\n            }\n\n            this.sortWorkerSortedIndexes = null;\n            this.sortWorkerIndexesToSort = null;\n            this.sortWorkerPrecomputedDistances = null;\n            this.sortWorkerTransforms = null;\n            this.disposed = true;\n            this.disposing = false;\n        });\n        promisesToAbort.forEach((toAbort) => {\n            toAbort.abort();\n        });\n        return disposePromise;\n    }\n\n    selfDrivenUpdate() {\n        if (this.selfDrivenMode && !this.webXRMode) {\n            this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n        }\n        this.update();\n        if (this.shouldRender()) {\n            this.render();\n            this.consecutiveRenderFrames++;\n        } else {\n            this.consecutiveRenderFrames = 0;\n        }\n        this.renderNextFrame = false;\n    }\n\n    forceRenderNextFrame() {\n        this.renderNextFrame = true;\n    }\n\n    shouldRender = function() {\n\n        let renderCount = 0;\n        const lastCameraPosition = new THREE.Vector3();\n        const lastCameraOrientation = new THREE.Quaternion();\n        const changeEpsilon = 0.0001;\n\n        return function() {\n            let shouldRender = false;\n            let cameraChanged = false;\n            if (this.camera) {\n                const cp = this.camera.position;\n                const co = this.camera.quaternion;\n                cameraChanged = Math.abs(cp.x - lastCameraPosition.x) > changeEpsilon ||\n                                Math.abs(cp.y - lastCameraPosition.y) > changeEpsilon ||\n                                Math.abs(cp.z - lastCameraPosition.z) > changeEpsilon ||\n                                Math.abs(co.x - lastCameraOrientation.x) > changeEpsilon ||\n                                Math.abs(co.y - lastCameraOrientation.y) > changeEpsilon ||\n                                Math.abs(co.z - lastCameraOrientation.z) > changeEpsilon ||\n                                Math.abs(co.w - lastCameraOrientation.w) > changeEpsilon;\n            }\n\n            shouldRender = this.renderMode !== RenderMode.Never && (renderCount === 0 || this.splatMesh.visibleRegionChanging ||\n                           cameraChanged || this.renderMode === RenderMode.Always || this.dynamicMode === true || this.renderNextFrame);\n\n            if (this.camera) {\n                lastCameraPosition.copy(this.camera.position);\n                lastCameraOrientation.copy(this.camera.quaternion);\n            }\n\n            renderCount++;\n            return shouldRender;\n        };\n\n    }();\n\n    render = function() {\n\n        return function() {\n            if (!this.initialized || !this.splatRenderReady) return;\n\n            const hasRenderables = (threeScene) => {\n                for (let child of threeScene.children) {\n                    if (child.visible) return true;\n                }\n                return false;\n            };\n\n            const savedAuoClear = this.renderer.autoClear;\n            if (hasRenderables(this.threeScene)) {\n                this.renderer.render(this.threeScene, this.camera);\n                this.renderer.autoClear = false;\n            }\n            this.renderer.render(this.splatMesh, this.camera);\n            this.renderer.autoClear = false;\n            if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) this.renderer.render(this.sceneHelper.focusMarker, this.camera);\n            if (this.showControlPlane) this.renderer.render(this.sceneHelper.controlPlane, this.camera);\n            this.renderer.autoClear = savedAuoClear;\n        };\n\n    }();\n\n    update(renderer, camera) {\n        if (this.dropInMode) this.updateForDropInMode(renderer, camera);\n        if (!this.initialized || !this.splatRenderReady) return;\n        if (this.controls) {\n            this.controls.update();\n            if (this.camera.isOrthographicCamera && !this.usingExternalCamera) {\n                Viewer.setCameraPositionFromZoom(this.camera, this.camera, this.controls);\n            }\n        }\n        this.splatMesh.updateVisibleRegionFadeDistance(this.sceneRevealMode);\n        this.updateSplatSort();\n        this.updateForRendererSizeChanges();\n        this.updateSplatMesh();\n        this.updateMeshCursor();\n        this.updateFPS();\n        this.timingSensitiveUpdates();\n        this.updateInfoPanel();\n        this.updateControlPlane();\n    }\n\n    updateForDropInMode(renderer, camera) {\n        this.renderer = renderer;\n        if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\n        this.camera = camera;\n        if (this.controls) this.controls.object = camera;\n        this.init();\n    }\n\n    updateFPS = function() {\n\n        let lastCalcTime = getCurrentTime();\n        let frameCount = 0;\n\n        return function() {\n            if (this.consecutiveRenderFrames > CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION) {\n                const currentTime = getCurrentTime();\n                const calcDelta = currentTime - lastCalcTime;\n                if (calcDelta >= 1.0) {\n                    this.currentFPS = frameCount;\n                    frameCount = 0;\n                    lastCalcTime = currentTime;\n                } else {\n                    frameCount++;\n                }\n            } else {\n                this.currentFPS = null;\n            }\n        };\n\n    }();\n\n    updateForRendererSizeChanges = function() {\n\n        const lastRendererSize = new THREE.Vector2();\n        const currentRendererSize = new THREE.Vector2();\n        let lastCameraOrthographic;\n\n        return function() {\n            if (!this.usingExternalCamera) {\n                this.renderer.getSize(currentRendererSize);\n                if (lastCameraOrthographic === undefined || lastCameraOrthographic !== this.camera.isOrthographicCamera ||\n                    currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\n                    if (this.camera.isOrthographicCamera) {\n                        this.camera.left = -currentRendererSize.x / 2.0;\n                        this.camera.right = currentRendererSize.x / 2.0;\n                        this.camera.top = currentRendererSize.y / 2.0;\n                        this.camera.bottom = -currentRendererSize.y / 2.0;\n                    } else {\n                        this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\n                    }\n                    this.camera.updateProjectionMatrix();\n                    lastRendererSize.copy(currentRendererSize);\n                    lastCameraOrthographic = this.camera.isOrthographicCamera;\n                }\n            }\n        };\n\n    }();\n\n    timingSensitiveUpdates = function() {\n\n        let lastUpdateTime;\n\n        return function() {\n            const currentTime = getCurrentTime();\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\n            const timeDelta = currentTime - lastUpdateTime;\n\n            this.updateCameraTransition(currentTime);\n            this.updateFocusMarker(timeDelta);\n\n            lastUpdateTime = currentTime;\n        };\n\n    }();\n\n    updateCameraTransition = function() {\n\n        let tempCameraTarget = new THREE.Vector3();\n        let toPreviousTarget = new THREE.Vector3();\n        let toNextTarget = new THREE.Vector3();\n\n        return function(currentTime) {\n            if (this.transitioningCameraTarget) {\n                toPreviousTarget.copy(this.previousCameraTarget).sub(this.camera.position).normalize();\n                toNextTarget.copy(this.nextCameraTarget).sub(this.camera.position).normalize();\n                const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\n                const rotationSpeed = rotationAngle / (Math.PI / 3) * .65 + .3;\n                const t = (rotationSpeed / rotationAngle * (currentTime - this.transitioningCameraTargetStartTime));\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\n                this.camera.lookAt(tempCameraTarget);\n                this.controls.target.copy(tempCameraTarget);\n                if (t >= 1.0) {\n                    this.transitioningCameraTarget = false;\n                }\n            }\n        };\n\n    }();\n\n    updateFocusMarker = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        let wasTransitioning = false;\n\n        return function(timeDelta) {\n            this.getRenderDimensions(renderDimensions);\n            if (this.transitioningCameraTarget) {\n                this.sceneHelper.setFocusMarkerVisibility(true);\n                const currentFocusMarkerOpacity = Math.max(this.sceneHelper.getFocusMarkerOpacity(), 0.0);\n                let newFocusMarkerOpacity = Math.min(currentFocusMarkerOpacity + FOCUS_MARKER_FADE_IN_SPEED * timeDelta, 1.0);\n                this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                wasTransitioning = true;\n                this.forceRenderNextFrame();\n            } else {\n                let currentFocusMarkerOpacity;\n                if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\n                else currentFocusMarkerOpacity = Math.min(this.sceneHelper.getFocusMarkerOpacity(), 1.0);\n                if (currentFocusMarkerOpacity > 0) {\n                    this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                    let newFocusMarkerOpacity = Math.max(currentFocusMarkerOpacity - FOCUS_MARKER_FADE_OUT_SPEED * timeDelta, 0.0);\n                    this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                    if (newFocusMarkerOpacity === 0.0) this.sceneHelper.setFocusMarkerVisibility(false);\n                }\n                if (currentFocusMarkerOpacity > 0.0) this.forceRenderNextFrame();\n                wasTransitioning = false;\n            }\n        };\n\n    }();\n\n    updateMeshCursor = function() {\n\n        const outHits = [];\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (this.showMeshCursor) {\n                this.forceRenderNextFrame();\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    this.sceneHelper.setMeshCursorVisibility(true);\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\n                } else {\n                    this.sceneHelper.setMeshCursorVisibility(false);\n                }\n            } else {\n                if (this.sceneHelper.getMeschCursorVisibility()) this.forceRenderNextFrame();\n                this.sceneHelper.setMeshCursorVisibility(false);\n            }\n        };\n\n    }();\n\n    updateInfoPanel = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (!this.showInfo) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            this.getRenderDimensions(renderDimensions);\n            const cameraLookAtPosition = this.controls ? this.controls.target : null;\n            const meshCursorPosition = this.showMeshCursor ? this.sceneHelper.meshCursor.position : null;\n            const splatRenderCountPct = splatCount > 0 ? this.splatRenderCount / splatCount * 100 : 0;\n            this.infoPanel.update(renderDimensions, this.camera.position, cameraLookAtPosition,\n                                  this.camera.up, this.camera.isOrthographicCamera, meshCursorPosition,\n                                  this.currentFPS || 'N/A', splatCount, this.splatRenderCount, splatRenderCountPct,\n                                  this.lastSortTime, this.focalAdjustment, this.splatMesh.getSplatScale(),\n                                  this.splatMesh.getPointCloudModeEnabled());\n        };\n\n    }();\n\n    updateControlPlane() {\n        if (this.showControlPlane) {\n            this.sceneHelper.setControlPlaneVisibility(true);\n            this.sceneHelper.positionAndOrientControlPlane(this.controls.target, this.camera.up);\n        } else {\n            this.sceneHelper.setControlPlaneVisibility(false);\n        }\n    }\n\n    updateSplatSort = function() {\n\n        const mvpMatrix = new THREE.Matrix4();\n        const cameraPositionArray = [];\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\n        const lastSortViewPos = new THREE.Vector3();\n        const sortViewOffset = new THREE.Vector3();\n        const queuedSorts = [];\n\n        const partialSorts = [\n            {\n                'angleThreshold': 0.55,\n                'sortFractions': [0.125, 0.33333, 0.75]\n            },\n            {\n                'angleThreshold': 0.65,\n                'sortFractions': [0.33333, 0.66667]\n            },\n            {\n                'angleThreshold': 0.8,\n                'sortFractions': [0.5]\n            }\n        ];\n\n        return async function(force = false) {\n            if (this.sortRunning) return;\n            if (this.splatMesh.getSplatCount() <= 0) return;\n\n            let angleDiff = 0;\n            let positionDiff = 0;\n            let needsRefreshForRotation = false;\n            let needsRefreshForPosition = false;\n\n            sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\n            angleDiff = sortViewDir.dot(lastSortViewDir);\n            positionDiff = sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length();\n\n            if (!force) {\n                if (!this.sortNeededForSceneChange && !this.splatMesh.dynamicMode && queuedSorts.length === 0) {\n                    if (angleDiff <= 0.99) needsRefreshForRotation = true;\n                    if (positionDiff >= 1.0) needsRefreshForPosition = true;\n                    if (!needsRefreshForRotation && !needsRefreshForPosition) return;\n                }\n            }\n\n            this.sortRunning = true;\n            const { splatRenderCount, shouldSortAll } = this.gatherSceneNodesForSort();\n            this.splatRenderCount = splatRenderCount;\n\n            mvpMatrix.copy(this.camera.matrixWorld).invert();\n            const mvpCamera = this.perspectiveCamera || this.camera;\n            mvpMatrix.premultiply(mvpCamera.projectionMatrix);\n            mvpMatrix.multiply(this.splatMesh.matrixWorld);\n\n            if (this.gpuAcceleratedSort && (queuedSorts.length <= 1 || queuedSorts.length % 2 === 0)) {\n                await this.splatMesh.computeDistancesOnGPU(mvpMatrix, this.sortWorkerPrecomputedDistances);\n            }\n\n            if (this.splatMesh.dynamicMode || shouldSortAll) {\n                queuedSorts.push(this.splatRenderCount);\n            } else {\n                if (queuedSorts.length === 0) {\n                    for (let partialSort of partialSorts) {\n                        if (angleDiff < partialSort.angleThreshold) {\n                            for (let sortFraction of partialSort.sortFractions) {\n                                queuedSorts.push(Math.floor(this.splatRenderCount * sortFraction));\n                            }\n                            break;\n                        }\n                    }\n                    queuedSorts.push(this.splatRenderCount);\n                }\n            }\n            let sortCount = Math.min(queuedSorts.shift(), this.splatRenderCount);\n\n            cameraPositionArray[0] = this.camera.position.x;\n            cameraPositionArray[1] = this.camera.position.y;\n            cameraPositionArray[2] = this.camera.position.z;\n\n            const sortMessage = {\n                'modelViewProj': mvpMatrix.elements,\n                'cameraPosition': cameraPositionArray,\n                'splatRenderCount': this.splatRenderCount,\n                'splatSortCount': sortCount,\n                'usePrecomputedDistances': this.gpuAcceleratedSort\n            };\n            if (this.splatMesh.dynamicMode) {\n                this.splatMesh.fillTransformsArray(this.sortWorkerTransforms);\n            }\n            if (!this.sharedMemoryForWorkers) {\n                sortMessage.indexesToSort = this.sortWorkerIndexesToSort;\n                sortMessage.transforms = this.sortWorkerTransforms;\n                if (this.gpuAcceleratedSort) {\n                    sortMessage.precomputedDistances = this.sortWorkerPrecomputedDistances;\n                }\n            }\n\n            this.sortPromise = new Promise((resolve) => {\n                this.sortPromiseResolver = resolve;\n            });\n\n            this.sortWorker.postMessage({\n                'sort': sortMessage\n            });\n\n            if (queuedSorts.length === 0) {\n                lastSortViewPos.copy(this.camera.position);\n                lastSortViewDir.copy(sortViewDir);\n            }\n\n            this.sortNeededForSceneChange = false;\n        };\n\n    }();\n\n    /**\n     * Determine which splats to render by checking which are inside or close to the view frustum\n     */\n    gatherSceneNodesForSort = function() {\n\n        const nodeRenderList = [];\n        let allSplatsSortBuffer = null;\n        const tempVectorYZ = new THREE.Vector3();\n        const tempVectorXZ = new THREE.Vector3();\n        const tempVector = new THREE.Vector3();\n        const modelView = new THREE.Matrix4();\n        const baseModelView = new THREE.Matrix4();\n        const sceneTransform = new THREE.Matrix4();\n        const renderDimensions = new THREE.Vector3();\n        const forward = new THREE.Vector3(0, 0, -1);\n\n        const tempMax = new THREE.Vector3();\n        const nodeSize = (node) => {\n            return tempMax.copy(node.max).sub(node.min).length();\n        };\n\n        return function(gatherAllNodes = false) {\n\n            this.getRenderDimensions(renderDimensions);\n            const cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\n            const cosFovXOver2 = Math.cos(fovXOver2);\n            const cosFovYOver2 = Math.cos(fovYOver2);\n\n            const splatTree = this.splatMesh.getSplatTree();\n\n            if (splatTree) {\n                baseModelView.copy(this.camera.matrixWorld).invert();\n                baseModelView.multiply(this.splatMesh.matrixWorld);\n\n                let nodeRenderCount = 0;\n                let splatRenderCount = 0;\n\n                for (let s = 0; s < splatTree.subTrees.length; s++) {\n                    const subTree = splatTree.subTrees[s];\n                    modelView.copy(baseModelView);\n                    if (this.splatMesh.dynamicMode) {\n                        this.splatMesh.getSceneTransform(s, sceneTransform);\n                        modelView.multiply(sceneTransform);\n                    }\n                    const nodeCount = subTree.nodesWithIndexes.length;\n                    for (let i = 0; i < nodeCount; i++) {\n                        const node = subTree.nodesWithIndexes[i];\n                        if (!node.data || !node.data.indexes || node.data.indexes.length === 0) continue;\n                        tempVector.copy(node.center).applyMatrix4(modelView);\n\n                        const distanceToNode = tempVector.length();\n                        tempVector.normalize();\n\n                        tempVectorYZ.copy(tempVector).setX(0).normalize();\n                        tempVectorXZ.copy(tempVector).setY(0).normalize();\n\n                        const cameraAngleXZDot = forward.dot(tempVectorXZ);\n                        const cameraAngleYZDot = forward.dot(tempVectorYZ);\n\n                        const ns = nodeSize(node);\n                        const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .6);\n                        const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .6);\n                        if (!gatherAllNodes && ((outOfFovX || outOfFovY) && distanceToNode > ns)) {\n                            continue;\n                        }\n                        splatRenderCount += node.data.indexes.length;\n                        nodeRenderList[nodeRenderCount] = node;\n                        node.data.distanceToNode = distanceToNode;\n                        nodeRenderCount++;\n                    }\n                }\n\n                nodeRenderList.length = nodeRenderCount;\n                nodeRenderList.sort((a, b) => {\n                    if (a.data.distanceToNode < b.data.distanceToNode) return -1;\n                    else return 1;\n                });\n\n                let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\n                for (let i = 0; i < nodeRenderCount; i++) {\n                    const node = nodeRenderList[i];\n                    const windowSizeInts = node.data.indexes.length;\n                    const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\n                    let destView = new Uint32Array(this.sortWorkerIndexesToSort.buffer,\n                                                   currentByteOffset - windowSizeBytes, windowSizeInts);\n                    destView.set(node.data.indexes);\n                    currentByteOffset -= windowSizeBytes;\n                }\n\n                return {\n                    'splatRenderCount': splatRenderCount,\n                    'shouldSortAll': false\n                };\n            } else {\n                const totalSplatCount = this.splatMesh.getSplatCount();\n                if (!allSplatsSortBuffer || allSplatsSortBuffer.length !== totalSplatCount) {\n                    allSplatsSortBuffer = new Uint32Array(totalSplatCount);\n                    for (let i = 0; i < totalSplatCount; i++) {\n                        allSplatsSortBuffer[i] = i;\n                    }\n                }\n                this.sortWorkerIndexesToSort.set(allSplatsSortBuffer);\n                return {\n                    'splatRenderCount': totalSplatCount,\n                    'shouldSortAll': true\n                };\n            }\n        };\n\n    }();\n\n    getSplatMesh() {\n        return this.splatMesh;\n    }\n\n    /**\n     * Get a reference to a splat scene.\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\n     * @return {SplatScene}\n     */\n    getSplatScene(sceneIndex) {\n        return this.splatMesh.getScene(sceneIndex);\n    }\n\n    isMobile() {\n        return navigator.userAgent.includes('Mobi');\n    }\n}\n", "import * as THREE from 'three';\nimport { Viewer } from './Viewer.js';\n\n/**\n * DropInViewer: Wrapper for a Viewer instance that enables it to be added to a Three.js scene like\n * any other Three.js scene object (Mesh, Object3D, etc.)\n */\nexport class DropInViewer extends THREE.Group {\n\n    constructor(options = {}) {\n        super();\n\n        options.selfDrivenMode = false;\n        options.useBuiltInControls = false;\n        options.rootElement = null;\n        options.ignoreDevicePixelRatio = false;\n        options.dropInMode = true;\n        options.camera = undefined;\n        options.renderer = undefined;\n\n        this.viewer = new Viewer(options);\n        this.splatMesh = null;\n\n        this.callbackMesh = DropInViewer.createCallbackMesh();\n        this.add(this.callbackMesh);\n        this.callbackMesh.onBeforeRender = DropInViewer.onBeforeRender.bind(this, this.viewer);\n\n    }\n\n    /**\n     * Add a single splat scene to the viewer.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {object} options {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     *         onProgress:                 Function to be called as file data are received\n     *\n     * }\n     * @return {AbortablePromise}\n     */\n    addSplatScene(path, options = {}) {\n        if (options.showLoadingUI !== false) options.showLoadingUI = true;\n        return this.viewer.addSplatScene(path, options);\n    }\n\n    /**\n     * Add multiple splat scenes to the viewer.\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\n     *\n     *         path: Path to splat scene to be loaded\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\n     * @return {AbortablePromise}\n     */\n    addSplatScenes(sceneOptions, showLoadingUI) {\n        if (showLoadingUI !== false) showLoadingUI = true;\n        return this.viewer.addSplatScenes(sceneOptions, showLoadingUI);\n    }\n\n    /**\n     * Get a reference to a splat scene.\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\n     * @return {SplatScene}\n     */\n    getSplatScene(sceneIndex) {\n        return this.viewer.getSplatScene(sceneIndex);\n    }\n\n    removeSplatScene(index) {\n        return this.viewer.removeSplatScene(index);\n    }\n\n    dispose() {\n        return this.viewer.dispose();\n    }\n\n    static onBeforeRender(viewer, renderer, threeScene, camera) {\n        if (this.splatMesh !== this.viewer.splatMesh) {\n            if (this.splatMesh) {\n                this.remove(this.splatMesh);\n            }\n            this.splatMesh = this.viewer.splatMesh;\n            this.add(this.viewer.splatMesh);\n        }\n        viewer.update(renderer, camera);\n    }\n\n    static createCallbackMesh() {\n        const geometry = new THREE.SphereGeometry(1, 8, 8);\n        const material = new THREE.MeshBasicMaterial();\n        material.colorWrite = false;\n        material.depthWrite = false;\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.frustumCulled = false;\n        return mesh;\n    }\n\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASO,IAAM,oBAAN,MAAM,kBAAiB;EAI1B,YAAY,aAAa,cAAc;AAEnC,QAAI;AACJ,QAAI;AACJ,SAAK,UAAU,IAAI,QAAQ,CAACA,UAASC,YAAW;AAC5C,uBAAiBD,SAAQ,KAAK,IAAI;AAClC,sBAAgBC,QAAO,KAAK,IAAI;IAC5C,CAAS;AAED,UAAM,UAAU,IAAI,SAAS;AACzB,qBAAe,GAAG,IAAI;IAClC;AAEQ,UAAM,SAAS,CAAC,UAAU;AACtB,oBAAc,KAAK;IAC/B;AAEQ,gBAAY,QAAQ,KAAK,IAAI,GAAG,OAAO,KAAK,IAAI,CAAC;AACjD,SAAK,eAAe;AACpB,SAAK,KAAK,kBAAiB;EACnC;EAEI,KAAK,WAAW;AACZ,WAAO,IAAI,kBAAiB,CAAC,SAAS,WAAW;AAC7C,WAAK,UAAU,KAAK,QACnB,KAAK,IAAI,SAAS;AACf,cAAM,kBAAkB,UAAU,GAAG,IAAI;AACzC,YAAI,2BAA2B,WAAW,2BAA2B,mBAAkB;AACnF,0BAAgB,KAAK,IAAI,UAAU;AAC/B,oBAAQ,GAAG,KAAK;UACxC,CAAqB;QACrB,OAAuB;AACH,kBAAQ,eAAe;QAC3C;MACA,CAAa,EACA,MAAM,CAAC,UAAU;AACd,eAAO,KAAK;MAC5B,CAAa;IACb,GAAW,KAAK,YAAY;EAC5B;EAEI,MAAM,QAAQ;AACV,WAAO,IAAI,kBAAiB,CAAC,YAAY;AACrC,WAAK,UAAU,KAAK,QAAQ,KAAK,IAAI,SAAS;AAC1C,gBAAQ,GAAG,IAAI;MAC/B,CAAa,EACA,MAAM,MAAM;IACzB,GAAW,KAAK,YAAY;EAC5B;EAEI,QAAQ;AACJ,QAAI,KAAK;AAAc,WAAK,aAAY;EAChD;AAEA;AAxDI,cAFS,mBAEF,SAAQ;AAFZ,IAAM,mBAAN;AA4DA,IAAM,sBAAN,cAAkC,MAAM;EAE3C,YAAY,KAAK;AACb,UAAM,GAAG;EACjB;AAEA;ACzEO,IAAM,cAAc,WAAW;AAElC,QAAM,YAAY,IAAI,aAAa,CAAC;AACpC,QAAM,YAAY,IAAI,WAAW,UAAU,MAAM;AAEjD,SAAO,SAAS,KAAK;AACjB,cAAU,CAAC,IAAI;AACf,UAAM,IAAI,UAAU,CAAC;AAErB,QAAI,OAAQ,KAAK,KAAM;AACvB,QAAI,IAAK,KAAK,KAAM;AACpB,UAAM,IAAK,KAAK,KAAM;AAEtB,QAAI,IAAI;AAAK,aAAO;AAEpB,QAAI,IAAI,KAAK;AACT,cAAQ;AACR,eAAU,KAAK,MAAO,IAAI,MAAO,IAAI;AACrC,aAAO;IACnB;AAEQ,QAAI,IAAI,KAAK;AACT,WAAK;AACL,eAAS,KAAM,MAAM,MAAQ,KAAM,MAAM,IAAM;AAC/C,aAAO;IACnB;AAEQ,YAAW,IAAI,OAAQ,KAAO,KAAK;AACnC,YAAQ,IAAI;AACZ,WAAO;EACf;AAEA,EAAC;AAEM,IAAM,mBAAmB,WAAW;AAEvC,QAAM,YAAY,IAAI,aAAa,CAAC;AACpC,QAAM,YAAY,IAAI,WAAW,UAAU,MAAM;AAEjD,SAAO,SAAS,GAAG;AACf,cAAU,CAAC,IAAI;AACf,WAAO,UAAU,CAAC;EAC1B;AAEA,EAAC;AAMM,IAAM,qBAAqB,SAAS,KAAK,QAAQ;AACpD,SAAO,IAAI,MAAM,KAAK,IAAI,SAAS,CAAC,KAAK,MAAM,IAAI,SAAS,CAAC,KAAK,OAAO,IAAI,SAAS,CAAC,KAAK;AAChG;AAEO,IAAM,oBAAoB,SAAS,MAAM,YAAY,aAAa,MAAM;AAE3E,QAAM,kBAAkB,IAAI,gBAAe;AAC3C,QAAM,SAAS,gBAAgB;AAC/B,MAAI,UAAU;AACd,MAAI,aAAa;AACjB,QAAM,eAAe,MAAM;AACvB,oBAAgB,MAAK;AACrB,eAAW,IAAI,oBAAoB,gBAAgB,CAAC;AACpD,cAAU;EAClB;AAEI,SAAO,IAAI,iBAAiB,CAAC,SAAS,WAAW;AAC7C,iBAAa;AACb,UAAM,MAAM,EAAE,OAAM,CAAE,EACrB,KAAK,OAAO,SAAS;AAClB,YAAM,SAAS,KAAK,KAAK,UAAS;AAClC,UAAI,kBAAkB;AACtB,UAAI,YAAY,KAAK,QAAQ,IAAI,gBAAgB;AACjD,UAAI,WAAW,YAAY,SAAS,SAAS,IAAI;AAEjD,YAAM,SAAS,CAAA;AAEf,aAAO,CAAC,SAAS;AACb,YAAI;AACA,gBAAM,EAAE,OAAO,OAAO,KAAI,IAAK,MAAM,OAAO,KAAI;AAChD,cAAI,MAAM;AACN,gBAAI,YAAY;AACZ,yBAAW,KAAK,QAAQ,OAAO,QAAQ;YACnE;AACwB,gBAAI,YAAY;AACZ,oBAAM,SAAS,IAAI,KAAK,MAAM,EAAE,YAAW;AAC3C,sBAAQ,MAAM;YAC1C,OAA+B;AACH,sBAAO;YACnC;AACwB;UACxB;AACoB,6BAAmB,MAAM;AACzB,cAAI;AACJ,cAAI;AACJ,cAAI,aAAa,QAAW;AACxB,sBAAU,kBAAkB,WAAW;AACvC,2BAAe,GAAG,QAAQ,QAAQ,CAAC,CAAC;UAC5D;AACoB,cAAI;AAAY,mBAAO,KAAK,KAAK;AACjC,cAAI,YAAY;AACZ,kBAAM,oBAAoB,WAAW,SAAS,cAAc,OAAO,QAAQ;AAC3E,gBAAI;AAAmB,2BAAa;UAC5D;QACA,SAAyB,OAAO;AACZ,iBAAO,KAAK;AACZ;QACpB;MACA;IACA,CAAS;EACT,GAAO,YAAY;AAEnB;AAEO,IAAM,QAAQ,SAAS,KAAK,KAAK,KAAK;AACzC,SAAO,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,GAAG,GAAG;AAC3C;AAEO,IAAM,iBAAiB,WAAW;AACrC,SAAO,YAAY,IAAG,IAAK;AAC/B;AAEO,IAAM,mBAAmB,CAAC,aAAa;AAC1C,MAAI,SAAS,UAAU;AACnB,aAAS,SAAS,QAAO;AACzB,aAAS,WAAW;EAC5B;AACI,MAAI,SAAS,UAAU;AACnB,aAAS,SAAS,QAAO;AACzB,aAAS,WAAW;EAC5B;AACI,MAAI,SAAS,UAAU;AACnB,aAAS,SAAS,SAAS,UAAU;AACjC,uBAAiB,KAAK;IAClC;EACA;AACA;AAEO,IAAM,iBAAiB,CAAC,MAAM,SAAS;AAC1C,SAAO,IAAI,QAAQ,CAAC,YAAY;AAC5B,WAAO,WAAW,MAAM;AACpB,cAAQ,KAAI,CAAE;IAC1B,GAAW,OAAO,IAAI,EAAE;EACxB,CAAK;AACL;AAGO,IAAM,+CAA+C,CAAC,2BAA2B,MAAM;AAC1F,UAAQ,0BAAwB;IAC5B,KAAK;AACD,aAAO;IACX,KAAK;AACD,aAAO;EACnB;AACI,SAAO;AACX;AC3JA,IAAM,uBAAuB;AAEtB,IAAM,0BAAN,MAAM,wBAAuB;EA2ChC,YAAY,2BAA2B,GAAG;AACtC,SAAK,2BAA2B;AAChC,SAAK,0BAA0B,6CAA6C,KAAK,wBAAwB;AACzG,SAAK,iBAAiB,KAAK,0BAA0B;AACrD,SAAK,4BAA4B,IAAI,MAAM,KAAK,uBAAuB,EAAE,KAAK,CAAC;AAC/E,SAAK,SAAS,CAAA;AACd,SAAK,aAAa;EAC1B;EAEI,OAAO,YAAY,2BAA2B,GAAG;AAC7C,UAAM,YAAY,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC3D,QAAI,YAAY,6CAA6C,wBAAwB;AACrF,aAAS,IAAI,GAAG,IAAI,WAAW;AAAK,gBAAU,KAAK,CAAC;AACpD,WAAO;EACf;EAEI,SAAS,OAAO;AACZ,SAAK,OAAO,KAAK,KAAK;AACtB,SAAK;EACb;EAEI,SAAS,OAAO;AACZ,WAAO,KAAK,OAAO,KAAK;EAChC;EAEI,kBAAkB;AACd,UAAM,WAAW,wBAAuB,YAAY,KAAK,wBAAwB;AACjF,SAAK,SAAS,QAAQ;AACtB,WAAO;EACf;EAEI,sBAAsB,GAAG,GAAG,GAAG,QAAQ,QAAQ,QAAQ,MAAM,MAAM,MAAM,MAAM,GAAG,GAAG,GAAG,YAAY,MAAM;AACtG,UAAM,WAAW,CAAC,GAAG,GAAG,GAAG,QAAQ,QAAQ,QAAQ,MAAM,MAAM,MAAM,MAAM,GAAG,GAAG,GAAG,SAAS,GAAG,KAAK,yBAAyB;AAC9H,aAAS,IAAI,GAAG,IAAI,KAAK,UAAU,IAAI,KAAK,yBAAyB,KAAK;AACtE,eAAS,CAAC,IAAI,KAAK,CAAC;IAChC;AACQ,SAAK,SAAS,QAAQ;AACtB,WAAO;EACf;EAEI,kBAAkB,KAAK,UAAU;AAC7B,UAAM,WAAW,IAAI,OAAO,QAAQ;AACpC,UAAM,WAAW,wBAAuB,YAAY,KAAK,wBAAwB;AACjF,aAAS,IAAI,GAAG,IAAI,KAAK,kBAAkB,IAAI,SAAS,QAAQ,KAAK;AACjE,eAAS,CAAC,IAAI,SAAS,CAAC;IACpC;AACQ,SAAK,SAAS,QAAQ;EAC9B;AACA;AAzFI,cAFS,yBAEF,UAAS;EACZ,GAAG;EACH,GAAG;EACH,GAAG;EACH,QAAQ;EACR,QAAQ;EACR,QAAQ;EACR,WAAW;EACX,WAAW;EACX,WAAW;EACX,WAAW;EACX,MAAM;EACN,MAAM;EACN,MAAM;EACN,SAAS;EACT,MAAM;EACN,MAAM;EACN,MAAM;EACN,MAAM;EACN,MAAM;EACN,MAAM;EACN,MAAM;EACN,MAAM;EACN,MAAM;EACN,MAAM;EACN,OAAO;EACP,OAAO;EACP,OAAO;EACP,OAAO;EACP,OAAO;EACP,OAAO;EACP,OAAO;EACP,OAAO;EACP,OAAO;EACP,OAAO;EACP,OAAO;EACP,OAAO;EACP,OAAO;EACP,OAAO;AACf;AAzCO,IAAM,yBAAN;ACJA,IAAM,YAAN,MAAgB;AASvB;AAPI,cAFS,WAEF,iBAAgB,KAAK;AAC5B,cAHS,WAGF,kBAAiB;AACxB,cAJS,WAIF,iBAAgB;AACvB,cALS,WAKF,eAAc;AACrB,cANS,WAMF,aAAY;AACnB,cAPS,WAOF,wBAAuB;AAC9B,cARS,WAQF,0CAAyC;ACHpD,IAAM,6CAA6C,UAAU,yCAAyC;AAEtG,IAAM,cAAoB,UAAU,YAAY,KAAW,SAAS;AAEpE,IAAM,UAAU,CAAC,MAAM;AACnB,MAAI,MAAM,GAAG,CAAC,4CAA4C,0CAA0C;AACpG,SAAO,MAAM,KAAK,OAAO,KAAK,MAAM,8CAA8C,OAAO,GAAG,GAAG,GAAG,GAAG;AACzG;AAEA,IAAM,YAAY,CAAC,MAAM;AACrB,SAAQ,IAAI,MAAO,UAAU,yCAAyC;AAC1E;AAEA,IAAM,gBAAsB,UAAU,cAAc,KAAW,SAAS;AAExE,IAAM,uBAAuB,CAAC,MAAM;AAChC,SAAO,QAAQ,cAAc,CAAC,CAAC;AACnC;AAEA,IAAM,sBAAsB,CAAC,GAAG,kBAAkB,OAAO,UAAU;AAC/D,MAAI,qBAAqB,GAAG;AACxB,WAAO;EACf,WAAe,qBAAqB,KAAK,qBAAqB,KAAK,CAAC,MAAM;AAClE,WAAa,UAAU,cAAc,CAAC;EAC9C,WAAe,qBAAqB,GAAG;AAC/B,WAAO,UAAU,CAAC;EAC1B;AACA;AAEA,IAAM,mCAAmC,CAAC,UAAU,YAAY,kBAAkB,OAAO,UAAU;AAC/F,MAAI,qBAAqB,GAAG;AACxB,WAAO,SAAS,WAAW,aAAa,GAAG,IAAI;EACvD,WAAe,qBAAqB,KAAK,qBAAqB,KAAK,CAAC,MAAM;AAClE,WAAO,SAAS,UAAU,aAAa,GAAG,IAAI;EACtD,OAAW;AACH,WAAO,SAAS,SAAS,YAAY,IAAI;EACjD;AACA;AAKO,IAAM,eAAN,MAAM,aAAY;EAkFrB,YAAY,YAAY,uBAAuB,MAAM;AAwErD,oDAA2B,WAAW;AAElC,YAAM,cAAc,IAAU,QAAO;AACrC,YAAM,iBAAiB,IAAU,QAAO;AACxC,YAAM,aAAa,IAAU,QAAO;AACpC,YAAM,eAAe,IAAU,QAAO;AACtC,YAAM,QAAQ,IAAU,QAAO;AAC/B,YAAM,WAAW,IAAU,WAAU;AAErC,aAAO,SAAS,OAAO,UAAU,aAAa,WAAW;AACrD,cAAM,eAAe,KAAK,6BAA6B,KAAK;AAC5D,cAAM,UAAU,KAAK,SAAS,YAAY;AAC1C,cAAM,kBAAkB,QAAQ,QAAQ;AAExC,cAAM,qBAAqB,QAAQ,gBAAgB,kBACxB,aAAY,kBAAkB,KAAK,gBAAgB,EAAE;AAEhF,cAAM,WAAW,IAAI,SAAS,KAAK,YAAY,QAAQ,WAAW,kBAAkB;AAEpF,cAAM;UAAI,oBAAoB,iCAAiC,UAAU,GAAG,KAAK,gBAAgB,GAAG,KAAK,gBAAgB;UAC/G,oBAAoB,iCAAiC,UAAU,GAAG,KAAK,gBAAgB,GAAG,KAAK,gBAAgB;UAC/G,oBAAoB,iCAAiC,UAAU,GAAG,KAAK,gBAAgB,GAAG,KAAK,gBAAgB;QAAC;AAE1H,iBAAS;UAAI,oBAAoB,iCAAiC,UAAU,GAAG,KAAK,gBAAgB,GAAG,KAAK,gBAAgB;UAC/G,oBAAoB,iCAAiC,UAAU,GAAG,KAAK,gBAAgB,GAAG,KAAK,gBAAgB;UAC/G,oBAAoB,iCAAiC,UAAU,GAAG,KAAK,gBAAgB,GAAG,KAAK,gBAAgB;UAC/G,oBAAoB,iCAAiC,UAAU,GAAG,KAAK,gBAAgB,GAAG,KAAK,gBAAgB;QAAC;AAE7H,YAAI,WAAW;AACX,sBAAY,UAAU,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;AAC/C,yBAAe,2BAA2B,QAAQ;AAClD,qBAAW,KAAK,WAAW,EAAE,SAAS,cAAc,EAAE,SAAS,SAAS;AACxE,qBAAW,UAAU,cAAc,aAAa,QAAQ;QACxE,OAAmB;AACH,mBAAS,KAAK,KAAK;AACnB,sBAAY,KAAK,QAAQ;QACzC;MACA;IAEA,EAAK;AAuKD,uDAA8B,WAAW;AAErC,YAAM,2BAA2B,CAAA;AACjC,eAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AACzB,iCAAyB,CAAC,IAAI,IAAU,QAAO;MAC3D;AAEQ,YAAM,cAAc,IAAU,QAAO;AAErC,YAAM,OAAO,CAAA;AACb,YAAM,OAAO,CAAA;AACb,YAAM,OAAO,CAAA;AAEb,YAAM,OAAO,CAAA;AACb,YAAM,OAAO,CAAA;AACb,YAAM,OAAO,CAAA;AACb,YAAM,OAAO,CAAA;AACb,YAAM,OAAO,CAAA;AAEb,YAAM,QAAQ,CAAA;AACd,YAAM,QAAQ,CAAA;AACd,YAAM,QAAQ,CAAA;AACd,YAAM,QAAQ,CAAA;AACd,YAAM,QAAQ,CAAA;AAEd,YAAM,SAAS,CAAA;AACf,YAAM,SAAS,CAAA;AACf,YAAM,SAAS,CAAA;AACf,YAAM,SAAS,CAAA;AACf,YAAM,SAAS,CAAA;AAEf,YAAM,OAAO,CAAC,MAAM;AAEpB,YAAM,OAAO,CAAC,OAAO,MAAM,MAAM,SAAS;AACtC,cAAM,CAAC,IAAI;AACX,cAAM,CAAC,IAAI;AACX,cAAM,CAAC,IAAI;MACvB;AAEQ,YAAM,gBAAgB,CAAC,OAAO,aAAa,QAAQ,SAAS,qBAAqB;AAC7E,cAAM,CAAC,IAAI,iCAAiC,aAAa,SAAS,kBAAkB,IAAI;AACxF,cAAM,CAAC,IAAI,iCAAiC,aAAa,UAAU,QAAQ,kBAAkB,IAAI;AACjG,cAAM,CAAC,IAAI,iCAAiC,aAAa,UAAU,SAAS,QAAQ,kBAAkB,IAAI;MACtH;AAEQ,YAAM,QAAQ,CAAC,UAAU,cAAc;AACnC,kBAAU,CAAC,IAAI,SAAS,CAAC;AACzB,kBAAU,CAAC,IAAI,SAAS,CAAC;AACzB,kBAAU,CAAC,IAAI,SAAS,CAAC;MACrC;AAEQ,YAAM,aAAa,CAAC,UAAU,WAAW,UAAU,mBAAmB;AAClE,kBAAU,QAAQ,IAAI,eAAe,SAAS,CAAC,CAAC;AAChD,kBAAU,WAAW,CAAC,IAAI,eAAe,SAAS,CAAC,CAAC;AACpD,kBAAU,WAAW,CAAC,IAAI,eAAe,SAAS,CAAC,CAAC;MAChE;AAEQ,YAAM,4BAA4B,CAAC,KAAK,MAAM,qBAAqB;AAC/D,aAAK,CAAC,IAAI,oBAAoB,IAAI,CAAC,GAAG,kBAAkB,IAAI;AAC5D,aAAK,CAAC,IAAI,oBAAoB,IAAI,CAAC,GAAG,kBAAkB,IAAI;AAC5D,aAAK,CAAC,IAAI,oBAAoB,IAAI,CAAC,GAAG,kBAAkB,IAAI;AAC5D,eAAO;MACnB;AAEQ,aAAO,SAAS,4BAA4B,6BAA6B,WACzD,SAAS,OAAO,UAAU,+BAA+B;AACrE,cAAM,aAAa,KAAK;AAExB,kBAAU,WAAW;AACrB,gBAAQ,SAAS,aAAa;AAC9B,YAAI,aAAa;AAAW,qBAAW;AAEvC,YAAI,aAAa,+BAA+B,GAAG;AAC/C,sBAAY,eAAe,SAAS;AACpC,eAAK,MAAM,YAAY,SAAS,CAAC,GAAG,CAAC,YAAY,SAAS,CAAC,GAAG,YAAY,SAAS,CAAC,CAAC;AACrF,eAAK,MAAM,CAAC,YAAY,SAAS,CAAC,GAAG,YAAY,SAAS,CAAC,GAAG,CAAC,YAAY,SAAS,CAAC,CAAC;AACtF,eAAK,MAAM,YAAY,SAAS,CAAC,GAAG,CAAC,YAAY,SAAS,CAAC,GAAG,YAAY,SAAS,CAAC,CAAC;QACrG;AAEY,iBAAS,IAAI,SAAS,KAAK,OAAO,KAAK;AAEnC,gBAAM,eAAe,KAAK,6BAA6B,CAAC;AACxD,gBAAM,UAAU,KAAK,SAAS,YAAY;AAC1C,wCAA8B,KAAK,IAAI,6BAA6B,QAAQ,wBAAwB;AACpG,gBAAM,uCAAuC,6CAA6C,2BAA2B;AAErH,gBAAM,kBAAkB,IAAI,QAAQ;AAEpC,gBAAM,iBAAiB,QAAQ,gBAAgB,kBACxB,aAAY,kBAAkB,KAAK,gBAAgB,EAAE;AAE5E,gBAAM,WAAW,IAAI,SAAS,KAAK,YAAY,QAAQ,WAAW,cAAc;AAEhF,gBAAM,cAAc,IAAI,UAAU,YAAY;AAE9C,cAAI,sCAAsC,YAAY,IAAI,KAAK;AAC/D,cAAI,uBAAuB;AAC3B,cAAI,wCAAwC,+BAA+B;AACvE,gBAAI,wCAAwC,GAAG;AAC3C,kBAAI,kCAAkC;AAAG,uCAAuB;uBACvD,iCAAiC;AAAG,uCAAuB;YAC5F,WAA+B,wCAAwC,GAAG;AAClD,kBAAI,kCAAkC;AAAG,uCAAuB;uBACvD,iCAAiC;AAAG,uCAAuB;YAC5F;UACA;AAEgB,cAAI,+BAA+B,GAAG;AAElC,0BAAc,OAAO,UAAU,GAAG,GAAG,KAAK,gBAAgB;AAC1D,0BAAc,OAAO,UAAU,GAAG,GAAG,KAAK,gBAAgB;AAC1D,0BAAc,OAAO,UAAU,GAAG,GAAG,KAAK,gBAAgB;AAE1D,gBAAI,WAAW;AACX,wCAA0B,OAAO,OAAO,KAAK,gBAAgB;AAC7D,wCAA0B,OAAO,OAAO,KAAK,gBAAgB;AAC7D,wCAA0B,OAAO,OAAO,KAAK,gBAAgB;AAC7D,2BAAY,0BAA0B,OAAO,OAAO,OAAO,MAAM,MAAM,MAAM,QAAQ,QAAQ,MAAM;YAC3H,OAA2B;AACH,oBAAM,OAAO,MAAM;AACnB,oBAAM,OAAO,MAAM;AACnB,oBAAM,OAAO,MAAM;YAC3C;AAEoB,uBAAW,QAAQ,4BAA4B,YAAY,oBAAoB;AAC/E,uBAAW,QAAQ,4BAA4B,aAAa,GAAG,oBAAoB;AACnF,uBAAW,QAAQ,4BAA4B,aAAa,GAAG,oBAAoB;AAEnF,gBAAI,+BAA+B,GAAG;AAElC,4BAAc,OAAO,UAAU,GAAG,GAAG,KAAK,gBAAgB;AAC1D,4BAAc,OAAO,UAAU,GAAG,IAAI,KAAK,gBAAgB;AAC3D,4BAAc,OAAO,UAAU,GAAG,IAAI,KAAK,gBAAgB;AAC3D,4BAAc,OAAO,UAAU,GAAG,IAAI,KAAK,gBAAgB;AAC3D,4BAAc,OAAO,UAAU,GAAG,IAAI,KAAK,gBAAgB;AAE3D,kBAAI,WAAW;AACX,0CAA0B,OAAO,OAAO,KAAK,gBAAgB;AAC7D,0CAA0B,OAAO,OAAO,KAAK,gBAAgB;AAC7D,0CAA0B,OAAO,OAAO,KAAK,gBAAgB;AAC7D,0CAA0B,OAAO,OAAO,KAAK,gBAAgB;AAC7D,0CAA0B,OAAO,OAAO,KAAK,gBAAgB;AAC7D,6BAAY;kBAA0B;kBAAO;kBAAO;kBAAO;kBAAO;kBAC5B;kBAAM;kBAAM;kBAAM;kBAAM;kBAAM;kBAAM;kBAAM;kBAC1C;kBAAQ;kBAAQ;kBAAQ;kBAAQ;gBAAM;cACxG,OAA+B;AACH,sBAAM,OAAO,MAAM;AACnB,sBAAM,OAAO,MAAM;AACnB,sBAAM,OAAO,MAAM;AACnB,sBAAM,OAAO,MAAM;AACnB,sBAAM,OAAO,MAAM;cAC/C;AAEwB,yBAAW,QAAQ,4BAA4B,aAAa,GAAG,oBAAoB;AACnF,yBAAW,QAAQ,4BAA4B,aAAa,IAAI,oBAAoB;AACpF,yBAAW,QAAQ,4BAA4B,aAAa,IAAI,oBAAoB;AACpF,yBAAW,QAAQ,4BAA4B,aAAa,IAAI,oBAAoB;AACpF,yBAAW,QAAQ,4BAA4B,aAAa,IAAI,oBAAoB;YAC5G;UACA;QACA;MACA;IAEA,EAAK;AAxbG,SAAK,oBAAoB,YAAY,oBAAoB;EACjE;EAEI,gBAAgB;AACZ,WAAO,KAAK;EACpB;EAEI,mBAAmB;AACf,WAAO,KAAK;EACpB;EAEI,iCAAiC;AAC7B,QAAI,8BAA8B;AAClC,aAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AAC3C,YAAM,UAAU,KAAK,SAAS,CAAC;AAC/B,UAAI,MAAM,KAAK,QAAQ,2BAA2B,6BAA6B;AAC3E,sCAA8B,QAAQ;MACtD;IACA;AACQ,WAAO;EACf;EAEI,eAAe,SAAS,iBAAiB;AACrC,QAAI;AACJ,UAAM,6BAA6B,QAAQ,kBAAkB,QAAQ;AACrE,QAAI,kBAAkB,4BAA4B;AAC9C,oBAAc,KAAK,MAAM,kBAAkB,QAAQ,UAAU;IACzE,OAAe;AACH,UAAI,mBAAmB;AACvB,oBAAc,QAAQ;AACtB,UAAI,2BAA2B;AAC/B,aAAO,mBAAmB,QAAQ,YAAY;AAC1C,YAAI,mCAAmC,QAAQ,6BAA6B,wBAAwB;AACpG,YAAI,mBAAmB,oBAAoB,kBAAkB,mBAAmB,kCAAkC;AAC9G;QACpB;AACgB,4BAAoB;AACpB;AACA;MAChB;IACA;AACQ,WAAO;EACf;EAEI,eAAe,kBAAkB,WAAW,WAAW;AACnD,UAAM,eAAe,KAAK,6BAA6B,gBAAgB;AACvE,UAAM,UAAU,KAAK,SAAS,YAAY;AAC1C,UAAM,kBAAkB,mBAAmB,QAAQ;AAEnD,UAAM,sBAAsB,QAAQ,gBAAgB;AACpD,UAAM,WAAW,IAAI,SAAS,KAAK,YAAY,QAAQ,WAAW,mBAAmB;AAErF,UAAM,IAAI,iCAAiC,UAAU,GAAG,KAAK,gBAAgB;AAC7E,UAAM,IAAI,iCAAiC,UAAU,GAAG,KAAK,gBAAgB;AAC7E,UAAM,IAAI,iCAAiC,UAAU,GAAG,KAAK,gBAAgB;AAC7E,QAAI,KAAK,oBAAoB,GAAG;AAC5B,YAAM,cAAc,KAAK,eAAe,SAAS,eAAe;AAChE,YAAM,aAAa,cAAc,aAAY;AAC7C,YAAM,KAAK,QAAQ;AACnB,YAAM,KAAK,QAAQ;AACnB,gBAAU,KAAK,IAAI,MAAM,KAAK,QAAQ,YAAY,UAAU;AAC5D,gBAAU,KAAK,IAAI,MAAM,KAAK,QAAQ,YAAY,aAAa,CAAC;AAChE,gBAAU,KAAK,IAAI,MAAM,KAAK,QAAQ,YAAY,aAAa,CAAC;IAC5E,OAAe;AACH,gBAAU,IAAI;AACd,gBAAU,IAAI;AACd,gBAAU,IAAI;IAC1B;AACQ,QAAI;AAAW,gBAAU,aAAa,SAAS;EACvD;EA2CI,cAAc,kBAAkB,UAAU;AACtC,UAAM,eAAe,KAAK,6BAA6B,gBAAgB;AACvE,UAAM,UAAU,KAAK,SAAS,YAAY;AAC1C,UAAM,kBAAkB,mBAAmB,QAAQ;AAEnD,UAAM,qBAAqB,QAAQ,gBAAgB,kBACxB,aAAY,kBAAkB,KAAK,gBAAgB,EAAE;AAChF,UAAM,mBAAmB,IAAI,WAAW,KAAK,YAAY,QAAQ,WAAW,oBAAoB,CAAC;AAEjG,aAAS;MAAI,iBAAiB,CAAC;MAAG,iBAAiB,CAAC;MACvC,iBAAiB,CAAC;MAAG,iBAAiB,CAAC;IAAC;EAC7D;EAEI,qBAAqB,gBAAgB,WAAW,SAAS,OAAO,UAAU;AACtE,UAAM,aAAa,KAAK;AAExB,cAAU,WAAW;AACrB,YAAQ,SAAS,aAAa;AAC9B,QAAI,aAAa;AAAW,iBAAW;AAEvC,UAAM,SAAS,IAAU,QAAO;AAChC,aAAS,IAAI,SAAS,KAAK,OAAO,KAAK;AACnC,YAAM,eAAe,KAAK,6BAA6B,CAAC;AACxD,YAAM,UAAU,KAAK,SAAS,YAAY;AAC1C,YAAM,kBAAkB,IAAI,QAAQ;AACpC,YAAM,kBAAkB,IAAI,UAAU,YAAY,aAAY;AAE9D,YAAM,sBAAsB,QAAQ,gBAAgB;AACpD,YAAM,WAAW,IAAI,SAAS,KAAK,YAAY,QAAQ,WAAW,mBAAmB;AAErF,YAAM,IAAI,iCAAiC,UAAU,GAAG,KAAK,gBAAgB;AAC7E,YAAM,IAAI,iCAAiC,UAAU,GAAG,KAAK,gBAAgB;AAC7E,YAAM,IAAI,iCAAiC,UAAU,GAAG,KAAK,gBAAgB;AAC7E,UAAI,KAAK,oBAAoB,GAAG;AAC5B,cAAM,cAAc,KAAK,eAAe,SAAS,eAAe;AAChE,cAAM,aAAa,cAAc,aAAY;AAC7C,cAAM,KAAK,QAAQ;AACnB,cAAM,KAAK,QAAQ;AACnB,eAAO,KAAK,IAAI,MAAM,KAAK,QAAQ,YAAY,UAAU;AACzD,eAAO,KAAK,IAAI,MAAM,KAAK,QAAQ,YAAY,aAAa,CAAC;AAC7D,eAAO,KAAK,IAAI,MAAM,KAAK,QAAQ,YAAY,aAAa,CAAC;MAC7E,OAAmB;AACH,eAAO,IAAI;AACX,eAAO,IAAI;AACX,eAAO,IAAI;MAC3B;AACY,UAAI,WAAW;AACX,eAAO,aAAa,SAAS;MAC7C;AACY,qBAAe,cAAc,IAAI,OAAO;AACxC,qBAAe,iBAAiB,CAAC,IAAI,OAAO;AAC5C,qBAAe,iBAAiB,CAAC,IAAI,OAAO;IACxD;EACA;EAkDI,yBAAyB,iBAAiB,WAAW,SAAS,OAAO,UAAU,+BAA+B;AAC1G,UAAM,aAAa,KAAK;AAExB,UAAM,QAAQ,IAAU,QAAO;AAC/B,UAAM,WAAW,IAAU,WAAU;AAErC,cAAU,WAAW;AACrB,YAAQ,SAAS,aAAa;AAC9B,QAAI,aAAa;AAAW,iBAAW;AAEvC,aAAS,IAAI,SAAS,KAAK,OAAO,KAAK;AACnC,YAAM,eAAe,KAAK,6BAA6B,CAAC;AACxD,YAAM,UAAU,KAAK,SAAS,YAAY;AAC1C,YAAM,kBAAkB,IAAI,QAAQ;AAEpC,YAAM,sBAAsB,IAAI,UAAU,YAAY,aAAY;AAClE,YAAM,qBAAqB,QAAQ,gBAAgB,kBACxB,aAAY,kBAAkB,KAAK,gBAAgB,EAAE;AAEhF,YAAM,WAAW,IAAI,SAAS,KAAK,YAAY,QAAQ,WAAW,kBAAkB;AAEpF,YAAM;QAAI,oBAAoB,iCAAiC,UAAU,GAAG,KAAK,gBAAgB,GAAG,KAAK,gBAAgB;QAC/G,oBAAoB,iCAAiC,UAAU,GAAG,KAAK,gBAAgB,GAAG,KAAK,gBAAgB;QAC/G,oBAAoB,iCAAiC,UAAU,GAAG,KAAK,gBAAgB,GAAG,KAAK,gBAAgB;MAAC;AAC1H,eAAS;QAAI,oBAAoB,iCAAiC,UAAU,GAAG,KAAK,gBAAgB,GAAG,KAAK,gBAAgB;QAC/G,oBAAoB,iCAAiC,UAAU,GAAG,KAAK,gBAAgB,GAAG,KAAK,gBAAgB;QAC/G,oBAAoB,iCAAiC,UAAU,GAAG,KAAK,gBAAgB,GAAG,KAAK,gBAAgB;QAC/G,oBAAoB,iCAAiC,UAAU,GAAG,KAAK,gBAAgB,GAAG,KAAK,gBAAgB;MAAC;AAE7H,mBAAY,kBAAkB,OAAO,UAAU,WAAW,iBAAiB,oBAAoB,6BAA6B;IACxI;EACA;EAEI,oBAAoB,eAAe,cAAc,SAAS,OAAO,UAAU;AACvE,UAAM,aAAa,KAAK;AAExB,cAAU,WAAW;AACrB,YAAQ,SAAS,aAAa;AAC9B,QAAI,aAAa;AAAW,iBAAW;AAEvC,aAAS,IAAI,SAAS,KAAK,OAAO,KAAK;AAEnC,YAAM,eAAe,KAAK,6BAA6B,CAAC;AACxD,YAAM,UAAU,KAAK,SAAS,YAAY;AAC1C,YAAM,kBAAkB,IAAI,QAAQ;AAEpC,YAAM,iBAAiB,IAAI,UAAU,YAAY,aAAY;AAC7D,YAAM,qBAAqB,QAAQ,gBAAgB,kBACxB,aAAY,kBAAkB,KAAK,gBAAgB,EAAE;AAEhF,YAAM,WAAW,IAAI,WAAW,KAAK,YAAY,QAAQ,WAAW,kBAAkB;AAEtF,UAAI,QAAQ,SAAS,CAAC;AACtB,cAAS,SAAS,eAAgB,QAAQ;AAE1C,oBAAc,aAAa,IAAI,SAAS,CAAC;AACzC,oBAAc,gBAAgB,CAAC,IAAI,SAAS,CAAC;AAC7C,oBAAc,gBAAgB,CAAC,IAAI,SAAS,CAAC;AAC7C,oBAAc,gBAAgB,CAAC,IAAI;IAC/C;EACA;EA0PI,OAAO,YAAY,QAAQ;AACvB,UAAM,mBAAmB,IAAI,WAAW,QAAQ,GAAG,aAAY,eAAe;AAC9E,UAAM,oBAAoB,IAAI,YAAY,QAAQ,GAAG,aAAY,kBAAkB,CAAC;AACpF,UAAM,oBAAoB,IAAI,YAAY,QAAQ,GAAG,aAAY,kBAAkB,CAAC;AACpF,UAAM,qBAAqB,IAAI,aAAa,QAAQ,GAAG,aAAY,kBAAkB,CAAC;AACtF,UAAM,eAAe,iBAAiB,CAAC;AACvC,UAAM,eAAe,iBAAiB,CAAC;AACvC,UAAM,kBAAkB,kBAAkB,CAAC;AAC3C,UAAM,eAAe,kBAAkB,CAAC;AACxC,UAAM,gBAAgB,kBAAkB,CAAC;AACzC,UAAM,aAAa,kBAAkB,CAAC;AACtC,UAAM,mBAAmB,kBAAkB,EAAE;AAC7C,UAAM,cAAc,IAAU,QAAQ,mBAAmB,CAAC,GAAG,mBAAmB,CAAC,GAAG,mBAAmB,CAAC,CAAC;AAEzG,WAAO;MACH;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACZ;EACA;EAEI,OAAO,0BAA0B,cAAc,YAAY,QAAQ;AAC/D,UAAM,oBAAoB,IAAI,YAAY,QAAQ,GAAG,aAAY,kBAAkB,CAAC;AACpF,sBAAkB,CAAC,IAAI;AACvB,sBAAkB,CAAC,IAAI;EAC/B;EAEI,OAAO,oBAAoB,QAAQ,QAAQ;AACvC,UAAM,mBAAmB,IAAI,WAAW,QAAQ,GAAG,aAAY,eAAe;AAC9E,UAAM,oBAAoB,IAAI,YAAY,QAAQ,GAAG,aAAY,kBAAkB,CAAC;AACpF,UAAM,oBAAoB,IAAI,YAAY,QAAQ,GAAG,aAAY,kBAAkB,CAAC;AACpF,UAAM,qBAAqB,IAAI,aAAa,QAAQ,GAAG,aAAY,kBAAkB,CAAC;AACtF,qBAAiB,CAAC,IAAI,OAAO;AAC7B,qBAAiB,CAAC,IAAI,OAAO;AAC7B,qBAAiB,CAAC,IAAI;AACtB,qBAAiB,CAAC,IAAI;AACtB,sBAAkB,CAAC,IAAI,OAAO;AAC9B,sBAAkB,CAAC,IAAI,OAAO;AAC9B,sBAAkB,CAAC,IAAI,OAAO;AAC9B,sBAAkB,CAAC,IAAI,OAAO;AAC9B,sBAAkB,EAAE,IAAI,OAAO;AAC/B,uBAAmB,CAAC,IAAI,OAAO,YAAY;AAC3C,uBAAmB,CAAC,IAAI,OAAO,YAAY;AAC3C,uBAAmB,CAAC,IAAI,OAAO,YAAY;EACnD;EAEI,OAAO,oBAAoB,QAAQ,QAAQ,SAAS,GAAG,sBAAsB;AACzE,UAAM,mBAAmB,OAAO;AAEhC,UAAM,kBAAkB,OAAO;AAC/B,UAAM,2BAA2B,IAAI,YAAY,QAAQ,QAAQ,kBAAkB,aAAY,yBAAyB,CAAC;AACzH,UAAM,2BAA2B,IAAI,YAAY,QAAQ,QAAQ,kBAAkB,aAAY,yBAAyB,CAAC;AACzH,UAAM,4BAA4B,IAAI,aAAa,QAAQ,QAAQ,kBAAkB,aAAY,yBAAyB,CAAC;AAE3H,UAAM,iBAAiB,CAAA;AACvB,QAAI,oBAAoB;AACxB,QAAI,0BAA0B,oBAAoB;AAClD,QAAI,0BAA0B,oBAAoB;AAClD,QAAI,cAAc,aAAY,kBAAkB,OAAO,kBAAkB,aAAY;AACrF,QAAI,mBAAmB;AACvB,aAAS,IAAI,GAAG,IAAI,iBAAiB,KAAK;AACtC,YAAM,gBAAgB,yBAAyB,0BAA0B,CAAC;AAC1E,YAAM,aAAa,yBAAyB,0BAA0B,CAAC;AACvE,YAAM,cAAc,yBAAyB,0BAA0B,CAAC;AACxE,YAAM,kBAAkB,0BAA0B,0BAA0B,CAAC;AAC7E,YAAM,sBAAsB,kBAAkB;AAC9C,YAAM,yBAAyB,yBAAyB,0BAA0B,EAAE;AACpF,YAAM,wBAAwB,yBAAyB,0BAA0B,CAAC,KACpD,aAAY,kBAAkB,gBAAgB,EAAE;AAC9E,YAAM,kBAAkB,yBAAyB,0BAA0B,CAAC;AAC5E,YAAM,6BAA6B,yBAAyB,0BAA0B,CAAC;AACvF,YAAM,2BAA2B,6BAA6B;AAC9D,YAAM,0BAA0B,yBAAyB,cAAc;AAEvE,YAAM,2BAA2B,yBAAyB,0BAA0B,EAAE;AACtF,YAAM,EAAE,cAAa,IAAK,aAAY,0BAA0B,kBAAkB,wBAAwB;AAE1G,YAAM,4BAA4B,gBAAgB;AAClD,YAAM,mBAAmB,4BAA4B;AACrD,YAAM,gBAAgB;QAClB;QACA;QACA,YAAY,uBAAuB,gBAAgB;QACnD;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,wBAAwB,sBAAsB;QAC9C,MAAM;QACN,aAAa,cAAc;QAC3B,UAAU,cAAc;QACxB;QACA;QACA;MAChB;AACY,qBAAe,CAAC,IAAI;AACpB,qBAAe;AACf,2BAAqB,aAAY;AACjC,gCAA0B,oBAAoB;AAC9C,gCAA0B,oBAAoB;AAC9C,0BAAoB;IAChC;AAEQ,WAAO;EACf;EAGI,OAAO,2BAA2B,eAAe,kBAAkB,QAAQ,SAAS,GAAG;AACnF,UAAM,0BAA0B,IAAI,YAAY,QAAQ,QAAQ,aAAY,yBAAyB,CAAC;AACtG,UAAM,0BAA0B,IAAI,YAAY,QAAQ,QAAQ,aAAY,yBAAyB,CAAC;AACtG,UAAM,2BAA2B,IAAI,aAAa,QAAQ,QAAQ,aAAY,yBAAyB,CAAC;AAExG,4BAAwB,CAAC,IAAI,cAAc;AAC3C,4BAAwB,CAAC,IAAI,cAAc;AAC3C,4BAAwB,CAAC,IAAI,oBAAoB,IAAI,cAAc,aAAa;AAChF,4BAAwB,CAAC,IAAI,oBAAoB,IAAI,cAAc,cAAc;AACjF,6BAAyB,CAAC,IAAI,oBAAoB,IAAI,cAAc,kBAAkB;AACtF,4BAAwB,EAAE,IAAI,oBAAoB,IAAI,aAAY,yBAAyB;AAC3F,4BAAwB,CAAC,IAAI,oBAAoB,IAAI,cAAc,wBAAwB;AAC3F,4BAAwB,CAAC,IAAI,cAAc;AAC3C,4BAAwB,CAAC,IAAI,oBAAoB,IAAI,cAAc,kBAAkB;AACrF,4BAAwB,CAAC,IAAI,oBAAoB,IAAI,cAAc,6BAA6B;AAChG,4BAAwB,EAAE,IAAI,cAAc;EAEpD;EAEI,OAAO,qCAAqC,YAAY,QAAQ,SAAS,GAAG;AACxE,UAAM,0BAA0B,IAAI,YAAY,QAAQ,QAAQ,aAAY,yBAAyB,CAAC;AACtG,4BAAwB,CAAC,IAAI;EACrC;EAEI,oBAAoB,YAAY,sBAAsB;AAClD,SAAK,aAAa;AAElB,SAAK,uCAAuC,CAAA;AAC5C,SAAK,+BAA+B,CAAA;AAEpC,UAAM,SAAS,aAAY,YAAY,KAAK,UAAU;AACtD,SAAK,eAAe,OAAO;AAC3B,SAAK,eAAe,OAAO;AAC3B,SAAK,kBAAkB,OAAO;AAC9B,SAAK,eAAe,uBAAuB,OAAO,kBAAkB;AACpE,SAAK,gBAAgB,OAAO;AAC5B,SAAK,aAAa,uBAAuB,OAAO,gBAAgB;AAChE,SAAK,mBAAmB,OAAO;AAC/B,SAAK,cAAc,IAAU,QAAO,EAAG,KAAK,OAAO,WAAW;AAE9D,SAAK,WAAW,aAAY,oBAAoB,QAAQ,KAAK,YAAY,aAAY,iBAAiB,oBAAoB;AAE1H,SAAK,iBAAgB;AACrB,SAAK,UAAS;EACtB;EAEI,OAAO,0BAA0B,kBAAkB,0BAA0B;AACzE,UAAM,iBAAiB,aAAY,kBAAkB,gBAAgB,EAAE;AACvE,UAAM,gBAAgB,aAAY,kBAAkB,gBAAgB,EAAE;AACtE,UAAM,mBAAmB,aAAY,kBAAkB,gBAAgB,EAAE;AACzE,UAAM,gBAAgB,aAAY,kBAAkB,gBAAgB,EAAE;AACtE,UAAM,uCAAuC,6CAA6C,wBAAwB;AAClH,UAAM,kCAAkC,aAAY,kBAAkB,gBAAgB,EAAE,sCAChD;AACxC,UAAM,gBAAgB,iBAAiB,gBAAgB,mBACjC,gBAAgB;AACtC,WAAO;MACH;MACA;MACA;MACA;MACA;MACA;MACA;IACZ;EACA;EAEI,mBAAmB;AACf,aAAS,IAAI,GAAG,IAAI,KAAK,iBAAiB,KAAK;AAC3C,YAAM,UAAU,KAAK,SAAS,CAAC;AAC/B,cAAQ,cAAc,IAAI;QAAa,KAAK;QAAY,QAAQ;QACzB,QAAQ,cAAc,aAAY;MAAuB;AAChG,UAAI,QAAQ,6BAA6B,GAAG;AACxC,gBAAQ,+BAA+B,IAAI;UAAY,KAAK;UAAY,QAAQ;UACzB,QAAQ;QAA0B;MACzG;IACA;EACA;EAEI,YAAY;AACR,QAAI,uBAAuB;AAC3B,aAAS,IAAI,GAAG,IAAI,KAAK,iBAAiB,KAAK;AAC3C,YAAM,UAAU,KAAK,SAAS,CAAC;AAC/B,eAAS,IAAI,GAAG,IAAI,QAAQ,eAAe,KAAK;AAC5C,cAAM,mBAAmB,uBAAuB;AAChD,aAAK,qCAAqC,gBAAgB,IAAI;AAC9D,aAAK,6BAA6B,gBAAgB,IAAI;MACtE;AACY,8BAAwB,QAAQ;IAC5C;EACA;EAEI,mBAAmB,iBAAiB,eAAe;AAC/C,iBAAY,0BAA0B,iBAAiB,eAAe,KAAK,UAAU;AACrF,SAAK,eAAe;AACpB,SAAK,aAAa;EAC1B;EAEI,0BAA0B,cAAc,eAAe;AACnD,UAAM,sBAAsB,aAAY,kBAAkB,aAAY,yBAAyB;AAC/F,iBAAY,qCAAqC,eAAe,KAAK,YAAY,mBAAmB;AACpG,SAAK,SAAS,YAAY,EAAE,aAAa;EACjD;EAEI,OAAO,oCAAoC,aAAa,cAAc,kBAC3B,aAAa,WAAW,YAAYC,WAAU,CAAA,GAAI;AAEzF,UAAM,qBAAqB,CAAC,WAAW,WAAW,YAAY,YAAY,YAAY,MAAM;AACxF,YAAM,MAAM,IAAI,WAAW,WAAW,SAAS;AAC/C,YAAM,OAAO,IAAI,WAAW,YAAY,UAAU;AAClD,eAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAChC,aAAK,CAAC,IAAI,IAAI,CAAC;MAC/B;IACA;AAEQ,QAAI,2BAA2B;AAE/B,aAAS,KAAK,GAAG,KAAK,YAAY,QAAQ,MAAO;AAC7C,YAAM,aAAa,YAAY,EAAE;AACjC,UAAI,OAAO,KAAK,WAAW,2BAA2B,0BAA0B;AAC5E,YAAI,KAAK,KAAK,WAAW,6BAA6B,0BAA0B;AAC5E,gBAAM,MAAM;AAEZ,gBAAM,IAAI,MAAM,GAAG;QACvC;AACgB,mCAA2B,WAAW;MACtD;IACA;AAEQ,UAAM;MAAC;MAAgB;MAAe;MAAkB;MAAe;MACjE;MAAiC;IAAa,IAC9C,aAAY,0BAA0B,kBAAkB,wBAAwB;AAEtF,UAAM,wBAAwB,aAAY,kBAAkB,gBAAgB,EAAE;AAE9E,UAAM,iBAAiB,CAAA;AACvB,UAAM,uBAAuB,CAAA;AAC7B,QAAI,kBAAkB;AAEtB,UAAM,eAAe,IAAU,WAAU;AAEzC,aAAS,KAAK,GAAG,KAAK,YAAY,QAAQ,MAAO;AAC7C,YAAM,aAAa,YAAY,EAAE;AAEjC,YAAM,iBAAiBA,SAAQ,EAAE,KAAK,CAAA;AAEtC,YAAM,oBAAoB,eAAe,mBAAmB,MAAM,aAAa,aAAY;AAC3F,YAAM,oBAAoB,KAAK,MAAM,eAAe,oBAAoB,MAAM,cAAc,aAAY,WAAW;AAEnH,YAAM,cAAc,IAAI,uBAAuB,wBAAwB;AAEvE,eAAS,IAAI,GAAG,IAAI,WAAW,YAAY,KAAK;AAC5C,cAAM,cAAc,WAAW,OAAO,CAAC;AACvC,YAAI;AACJ,YAAI,YAAY,uBAAuB,OAAO,OAAO,GAAG;AACpD,kBAAQ,YAAY,uBAAuB,OAAO,OAAO;QAC7E,OAAuB;AACH,kBAAQ;QAC5B;AACgB,YAAI,SAAS,cAAc;AACvB,sBAAY,SAAS,WAAW;QACpD;MACA;AAEY,YAAM,aAAa,aAAY,wCAAwC,aAAa,kBAAkB,iBAAiB;AACvH,YAAM,kBAAkB,WAAW,YAAY;AAC/C,YAAM,6BAA6B,WAAW,qBAAqB,IAAI,CAAC,WAAW,OAAO,OAAO,MAAM;AACvG,YAAM,6BAA6B,2BAA2B;AAC9D,YAAM,UAAU,CAAC,GAAG,WAAW,aAAa,GAAG,WAAW,oBAAoB;AAE9E,YAAM,uBAAuB,YAAY,OAAO,SAAS;AACzD,YAAM,0BAA0B,6BAA6B;AAC7D,YAAM,kBAAkB,oBAAoB,IAAI,QAAQ,SACR,aAAY,yBAAyB,0BAA0B;AAC/G,YAAM,mBAAmB,uBAAuB;AAChD,YAAM,gBAAgB,IAAI,YAAY,gBAAgB;AAEtD,YAAM,gBAAgB,mBAAmB;AACzC,YAAM,yBAAyB,wBAAwB;AACvD,YAAM,8BAA8B,wBAAwB,IAAI;AAEhE,YAAM,mBAAmB,IAAI,YAAY,cAAc;AACvD,YAAM,kBAAkB,IAAI,YAAY,aAAa;AACrD,YAAM,qBAAqB,IAAI,YAAY,gBAAgB;AAC3D,YAAM,kBAAkB,IAAI,YAAY,aAAa;AACrD,YAAM,eAAe,IAAI,YAAY,+BAA+B;AAEpE,YAAM,eAAe,IAAU,QAAO;AACtC,YAAM,oBAAoB,IAAU,QAAO;AAC3C,UAAI,gBAAgB;AACpB,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,cAAM,SAAS,QAAQ,CAAC;AACxB,qBAAa,UAAU,OAAO,MAAM;AACpC,iBAAS,IAAI,GAAG,IAAI,OAAO,OAAO,QAAQ,KAAK;AAC3C,cAAI,MAAM,OAAO,OAAO,CAAC;AACzB,gBAAM,cAAc,YAAY,OAAO,GAAG;AAE1C,gBAAM,aAAa,kBAAkB,gBAAgB;AACrD,gBAAM,YAAY,aAAa;AAC/B,gBAAM,eAAe,YAAY;AACjC,gBAAM,YAAY,eAAe;AACjC,gBAAM,yBAAyB,YAAY;AAC3C,cAAI,qBAAqB,GAAG;AACxB,kBAAM,SAAS,IAAI,aAAa,eAAe,YAAY,aAAY,oBAAoB;AAC3F,kBAAM,MAAM,IAAI,aAAa,eAAe,cAAc,aAAY,sBAAsB;AAC5F,kBAAM,QAAQ,IAAI,aAAa,eAAe,WAAW,aAAY,mBAAmB;AACxF,gBAAI,YAAY,uBAAuB,OAAO,MAAM,MAAM,QAAW;AACjE,2BAAa;gBAAI,YAAY,uBAAuB,OAAO,SAAS;gBACnD,YAAY,uBAAuB,OAAO,SAAS;gBACnD,YAAY,uBAAuB,OAAO,SAAS;gBACnD,YAAY,uBAAuB,OAAO,SAAS;cAAC;AACrE,2BAAa,UAAS;AACtB,kBAAI,IAAI,CAAC,aAAa,GAAG,aAAa,GAAG,aAAa,GAAG,aAAa,CAAC,CAAC;AACxE,oBAAM,IAAI;gBAAC,YAAY,uBAAuB,OAAO,MAAM;gBAChD,YAAY,uBAAuB,OAAO,MAAM;gBAChD,YAAY,uBAAuB,OAAO,MAAM;cAAC,CAAC;YACzF,OAA+B;AACH,kBAAI,IAAI,CAAC,GAAK,GAAK,GAAK,CAAG,CAAC;AAC5B,oBAAM,IAAI,CAAC,MAAM,MAAM,IAAI,CAAC;YACxD;AACwB,mBAAO,IAAI;cAAC,YAAY,uBAAuB,OAAO,CAAC;cAC3C,YAAY,uBAAuB,OAAO,CAAC;cAC3C,YAAY,uBAAuB,OAAO,CAAC;YAAC,CAAC;AACzD,gBAAI,2BAA2B,GAAG;AAC/B,oBAAM,QAAQ,IAAI,aAAa,eAAe,wBAAwB,oCAAoC;AAC1G,kBAAI,4BAA4B,GAAG;AAC9B,yBAAS,IAAI,GAAG,IAAI,GAAG;AAAK,wBAAM,CAAC,IAAI,YAAY,uBAAuB,OAAO,OAAO,CAAC;AACzF,oBAAI,4BAA4B,GAAG;AAC/B,2BAAS,IAAI,GAAG,IAAI,IAAI;AAAK,0BAAM,IAAI,CAAC,IAAI,YAAY,uBAAuB,OAAO,OAAO,CAAC;gBAClI;cACA;YACA;UACA,OAA2B;AACH,kBAAM,SAAS,IAAI,YAAY,kBAAkB,GAAG,aAAY,oBAAoB;AACpF,kBAAM,MAAM,IAAI,YAAY,oBAAoB,GAAG,aAAY,sBAAsB;AACrF,kBAAM,QAAQ,IAAI,YAAY,iBAAiB,GAAG,aAAY,mBAAmB;AAEjF,gBAAI,YAAY,uBAAuB,OAAO,MAAM,MAAM,QAAW;AACjE,2BAAa;gBAAI,YAAY,uBAAuB,OAAO,SAAS;gBACnD,YAAY,uBAAuB,OAAO,SAAS;gBACnD,YAAY,uBAAuB,OAAO,SAAS;gBACnD,YAAY,uBAAuB,OAAO,SAAS;cAAC;AACrE,2BAAa,UAAS;AACtB,kBAAI,IAAI;gBAAC,YAAY,aAAa,CAAC;gBAAG,YAAY,aAAa,CAAC;gBACvD,YAAY,aAAa,CAAC;gBAAG,YAAY,aAAa,CAAC;cAAC,CAAC;AAClE,oBAAM,IAAI;gBAAC,YAAY,YAAY,uBAAuB,OAAO,MAAM,CAAC;gBAC7D,YAAY,YAAY,uBAAuB,OAAO,MAAM,CAAC;gBAC7D,YAAY,YAAY,uBAAuB,OAAO,MAAM,CAAC;cAAC,CAAC;YACtG,OAA+B;AACH,kBAAI,IAAI,CAAC,YAAY,CAAE,GAAG,GAAG,GAAG,CAAC,CAAC;AAClC,oBAAM,IAAI,CAAC,YAAY,IAAI,GAAG,YAAY,IAAI,GAAG,YAAY,IAAI,CAAC,CAAC;YAC/F;AACwB,8BAAkB;cAAI,YAAY,uBAAuB,OAAO,CAAC;cAC3C,YAAY,uBAAuB,OAAO,CAAC;cAC3C,YAAY,uBAAuB,OAAO,CAAC;YAAC,EAAE,IAAI,YAAY;AACpF,8BAAkB,IAAI,KAAK,MAAM,kBAAkB,IAAI,sBAAsB,IAAI;AACjF,8BAAkB,IAAI,MAAM,kBAAkB,GAAG,GAAG,2BAA2B;AAC/E,8BAAkB,IAAI,KAAK,MAAM,kBAAkB,IAAI,sBAAsB,IAAI;AACjF,8BAAkB,IAAI,MAAM,kBAAkB,GAAG,GAAG,2BAA2B;AAC/E,8BAAkB,IAAI,KAAK,MAAM,kBAAkB,IAAI,sBAAsB,IAAI;AACjF,8BAAkB,IAAI,MAAM,kBAAkB,GAAG,GAAG,2BAA2B;AAC/E,mBAAO,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,GAAG,kBAAkB,CAAC,CAAC;AAC1E,gBAAI,2BAA2B,GAAG;AAC9B,oBAAM,cAAc,qBAAqB,IAAI,cAAc;AAC3D,oBAAM,sBAAsB,qBAAqB,IAAI,IAAI;AACzD,oBAAM,QAAQ,IAAI,YAAY,cAAc,GAAG,oCAAoC;AACnF,kBAAI,4BAA4B,GAAG;AAC/B,yBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,wBAAM,SAAS,YAAY,uBAAuB,OAAO,OAAO,CAAC;AACjE,wBAAM,CAAC,IAAI,qBAAqB,IAAI,YAAY,MAAM,IAAI,QAAQ,MAAM;gBAC5G;AACgC,sBAAM,mBAAmB,IAAI;AAC7B,mCAAmB,MAAM,QAAQ,GAAG,eAAe,wBAAwB,gBAAgB;AAC3F,oBAAI,4BAA4B,GAAG;AAC/B,2BAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AACzB,0BAAM,SAAS,YAAY,uBAAuB,OAAO,OAAO,CAAC;AACjE,0BAAM,IAAI,CAAC,IAAI,qBAAqB,IAAI,YAAY,MAAM,IAAI,QAAQ,MAAM;kBACpH;AACoC,wBAAM,mBAAmB,KAAK;AAC9B;oBAAmB,MAAM;oBAAQ;oBAAkB;oBAChC,yBAAyB;oBAAkB;kBAAgB;gBAClH;cACA;YACA;AAEwB,+BAAmB,OAAO,QAAQ,GAAG,eAAe,YAAY,CAAC;AACjE,+BAAmB,MAAM,QAAQ,GAAG,eAAe,WAAW,CAAC;AAC/D,+BAAmB,IAAI,QAAQ,GAAG,eAAe,cAAc,CAAC;UACxF;AAEoB,gBAAM,OAAO,IAAI,kBAAkB,iBAAiB,GAAG,CAAC;AAExD,cAAI,YAAY,uBAAuB,OAAO,IAAI,MAAM,QAAW;AAC/D,iBAAK,IAAI;cAAC,YAAY,uBAAuB,OAAO,IAAI;cAC9C,YAAY,uBAAuB,OAAO,IAAI;cAC9C,YAAY,uBAAuB,OAAO,IAAI;YAAC,CAAC;UAClF,OAA2B;AACH,iBAAK,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;UAC5C;AACoB,cAAI,YAAY,uBAAuB,OAAO,OAAO,MAAM,QAAW;AAClE,iBAAK,CAAC,IAAI,YAAY,uBAAuB,OAAO,OAAO;UACnF,OAA2B;AACH,iBAAK,CAAC,IAAI;UAClC;AAEoB,6BAAmB,KAAK,QAAQ,GAAG,eAAe,WAAW,CAAC;AAE9D;QACpB;MACA;AACY,yBAAmB;AAEnB,UAAI,oBAAoB,GAAG;AACvB,cAAM,sBAAsB,IAAI,YAAY,eAAe,GAAG,2BAA2B,SAAS,CAAC;AACnG,iBAAS,MAAM,GAAG,MAAM,2BAA2B,QAAQ,OAAQ;AAC/D,8BAAoB,GAAG,IAAI,2BAA2B,GAAG;QAC7E;AACgB,cAAM,cAAc,IAAI;UAAa;UAAe;UACf,QAAQ,SAAS,aAAY;QAAuB;AACzF,iBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,gBAAM,SAAS,QAAQ,CAAC;AACxB,gBAAM,OAAO,IAAI;AACjB,sBAAY,IAAI,IAAI,OAAO,OAAO,CAAC;AACnC,sBAAY,OAAO,CAAC,IAAI,OAAO,OAAO,CAAC;AACvC,sBAAY,OAAO,CAAC,IAAI,OAAO,OAAO,CAAC;QAC3D;MACA;AACY,qBAAe,KAAK,aAAa;AAEjC,YAAM,sBAAsB,IAAI,YAAY,aAAY,sBAAsB;AAC9E,mBAAY,2BAA2B;QACnC,eAAe;QACf,YAAY;QACZ,YAAY;QACZ,aAAa,QAAQ;QACrB,iBAAiB;QACjB;QACA,kBAAkB;QAClB;QACA;QACA;MAChB,GAAe,kBAAkB,qBAAqB,CAAC;AAC3C,2BAAqB,KAAK,mBAAmB;IAEzD;AAEQ,QAAI,8BAA8B;AAClC,aAAS,iBAAiB;AAAgB,qCAA+B,cAAc;AACvF,UAAM,oBAAoB,aAAY,kBACZ,aAAY,yBAAyB,eAAe,SAAS;AACvF,UAAM,gBAAgB,IAAI,YAAY,iBAAiB;AAEvD,iBAAY,oBAAoB;MAC5B,cAAc;MACd,cAAc;MACd,iBAAiB,eAAe;MAChC,cAAc,eAAe;MAC7B,eAAe;MACf,YAAY;MACZ;MACA;IACZ,GAAW,aAAa;AAEhB,QAAI,qBAAqB,aAAY;AACrC,aAAS,uBAAuB,sBAAsB;AAClD,UAAI,WAAW,eAAe,oBAAoB,aAAY,sBAAsB,EAAE,IAAI,IAAI,WAAW,mBAAmB,CAAC;AAC7H,4BAAsB,aAAY;IAC9C;AAEQ,aAAS,iBAAiB,gBAAgB;AACtC,UAAI,WAAW,eAAe,oBAAoB,cAAc,UAAU,EAAE,IAAI,IAAI,WAAW,aAAa,CAAC;AAC7G,4BAAsB,cAAc;IAChD;AAEQ,UAAM,cAAc,IAAI,aAAY,aAAa;AACjD,WAAO;EACf;EAEI,OAAO,wCAAwC,YAAY,WAAW,YAAY;AAC9E,QAAI,aAAa,WAAW;AAC5B,UAAM,gBAAgB,YAAY;AAElC,UAAM,MAAM,IAAU,QAAO;AAC7B,UAAM,MAAM,IAAU,QAAO;AAE7B,aAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACjC,YAAM,cAAc,WAAW,OAAO,CAAC;AACvC,YAAM,SAAS;QAAC,YAAY,uBAAuB,OAAO,CAAC;QAC3C,YAAY,uBAAuB,OAAO,CAAC;QAC3C,YAAY,uBAAuB,OAAO,CAAC;MAAC;AAC5D,UAAI,MAAM,KAAK,OAAO,CAAC,IAAI,IAAI;AAAG,YAAI,IAAI,OAAO,CAAC;AAClD,UAAI,MAAM,KAAK,OAAO,CAAC,IAAI,IAAI;AAAG,YAAI,IAAI,OAAO,CAAC;AAClD,UAAI,MAAM,KAAK,OAAO,CAAC,IAAI,IAAI;AAAG,YAAI,IAAI,OAAO,CAAC;AAClD,UAAI,MAAM,KAAK,OAAO,CAAC,IAAI,IAAI;AAAG,YAAI,IAAI,OAAO,CAAC;AAClD,UAAI,MAAM,KAAK,OAAO,CAAC,IAAI,IAAI;AAAG,YAAI,IAAI,OAAO,CAAC;AAClD,UAAI,MAAM,KAAK,OAAO,CAAC,IAAI,IAAI;AAAG,YAAI,IAAI,OAAO,CAAC;IAC9D;AAEQ,UAAM,aAAa,IAAU,QAAO,EAAG,KAAK,GAAG,EAAE,IAAI,GAAG;AACxD,UAAM,UAAU,KAAK,KAAK,WAAW,IAAI,SAAS;AAClD,UAAM,UAAU,KAAK,KAAK,WAAW,IAAI,SAAS;AAElD,UAAM,cAAc,IAAU,QAAO;AACrC,UAAM,cAAc,CAAA;AACpB,UAAM,uBAAuB,CAAA;AAE7B,aAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACjC,YAAM,cAAc,WAAW,OAAO,CAAC;AACvC,YAAM,SAAS;QAAC,YAAY,uBAAuB,OAAO,CAAC;QAC3C,YAAY,uBAAuB,OAAO,CAAC;QAC3C,YAAY,uBAAuB,OAAO,CAAC;MAAC;AAC5D,YAAM,SAAS,KAAK,OAAO,OAAO,CAAC,IAAI,IAAI,KAAK,SAAS;AACzD,YAAM,SAAS,KAAK,OAAO,OAAO,CAAC,IAAI,IAAI,KAAK,SAAS;AACzD,YAAM,SAAS,KAAK,OAAO,OAAO,CAAC,IAAI,IAAI,KAAK,SAAS;AAEzD,kBAAY,IAAI,SAAS,YAAY,IAAI,IAAI;AAC7C,kBAAY,IAAI,SAAS,YAAY,IAAI,IAAI;AAC7C,kBAAY,IAAI,SAAS,YAAY,IAAI,IAAI;AAE7C,YAAM,WAAW,UAAU,UAAU,WAAW,SAAS,UAAU;AACnE,UAAI,SAAS,qBAAqB,QAAQ;AAC1C,UAAI,CAAC,QAAQ;AACT,6BAAqB,QAAQ,IAAI,SAAS;UACtC,UAAU,CAAA;UACV,UAAU,YAAY,QAAO;QACjD;MACA;AAEY,aAAO,OAAO,KAAK,CAAC;AACpB,UAAI,OAAO,OAAO,UAAU,YAAY;AACpC,oBAAY,KAAK,MAAM;AACvB,6BAAqB,QAAQ,IAAI;MACjD;IACA;AAEQ,UAAM,2BAA2B,CAAA;AACjC,aAAS,YAAY,sBAAsB;AACvC,UAAI,qBAAqB,eAAe,QAAQ,GAAG;AAC/C,cAAM,SAAS,qBAAqB,QAAQ;AAC5C,YAAI,QAAQ;AACR,mCAAyB,KAAK,MAAM;QACxD;MACA;IACA;AAEQ,WAAO;MACH,eAAe;MACf,wBAAwB;IACpC;EACA;AAEA;AAvpCI,cAFS,cAEF,uBAAsB;AAC7B,cAHS,cAGF,uBAAsB;AAE7B,cALS,cAKF,wBAAuB;AAC9B,cANS,cAMF,uBAAsB;AAC7B,cAPS,cAOF,0BAAyB;AAChC,cARS,cAQF,uBAAsB;AAC7B,cATS,cASF,4BAA2B;AAElC,cAXS,cAWF,yBAAwB;AAC/B,cAZS,cAYF,4BAA2B;AAElC,cAdS,cAcF,qBAAoB;EACvB,GAAG;IACC,gBAAgB;IAChB,eAAe;IACf,kBAAkB;IAClB,eAAe;IACf,kBAAkB;IAClB,oBAAoB;IACpB,kBAAkB;IAClB,+BAA+B;IAC/B,YAAY;IACZ,qCAAqC;IACrC,+BAA+B;IAC/B,2BAA2B;MACvB,GAAG,EAAE,eAAe,GAAE;MACtB,GAAG,EAAE,eAAe,GAAE;MACtB,GAAG,EAAE,eAAe,IAAG;IACvC;EACA;EACQ,GAAG;IACC,gBAAgB;IAChB,eAAe;IACf,kBAAkB;IAClB,eAAe;IACf,kBAAkB;IAClB,oBAAoB;IACpB,kBAAkB;IAClB,+BAA+B;IAC/B,YAAY;IACZ,qCAAqC;IACrC,+BAA+B;IAC/B,2BAA2B;MACvB,GAAG,EAAE,eAAe,GAAE;MACtB,GAAG,EAAE,eAAe,GAAE;MACtB,GAAG,EAAE,eAAe,GAAE;IACtC;EACA;EACQ,GAAG;IACC,gBAAgB;IAChB,eAAe;IACf,kBAAkB;IAClB,eAAe;IACf,kBAAkB;IAClB,oBAAoB;IACpB,kBAAkB;IAClB,+BAA+B;IAC/B,YAAY;IACZ,qCAAqC;IACrC,+BAA+B;IAC/B,2BAA2B;MACvB,GAAG,EAAE,eAAe,GAAE;MACtB,GAAG,EAAE,eAAe,GAAE;MACtB,GAAG,EAAE,eAAe,GAAE;IACtC;EACA;AACA;AAEI,cAvES,cAuEF,wBAAuB;AAE9B,cAzES,cAyEF,mBAAkB;AACzB,cA1ES,cA0EF,0BAAyB;AAEhC,cA5ES,cA4EF,0BAAyB;AAChC,cA7ES,cA6EF,2BAA0B;AAEjC,cA/ES,cA+EF,mBAAkB;AACzB,cAhFS,cAgFF,cAAa;AA0KpB,cA1PS,cA0PF,qBAAoB,WAAW;AAElC,QAAM,cAAc,IAAU,QAAO;AACrC,QAAM,cAAc,IAAU,QAAO;AACrC,QAAM,iBAAiB,IAAU,QAAO;AACxC,QAAM,mBAAmB,IAAU,QAAO;AAC1C,QAAM,wBAAwB,IAAU,QAAO;AAC/C,QAAM,eAAe,IAAU,QAAO;AACtC,QAAM,wBAAwB,IAAU,QAAO;AAE/C,SAAO,SAAS,OAAO,UAAU,WAAW,eAAe,YAAY,GAAG,+BAA+B;AAErG,gBAAY,UAAU,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;AAC/C,gBAAY,eAAe,WAAW;AAEtC,gBAAY,2BAA2B,QAAQ;AAC/C,mBAAe,eAAe,WAAW;AAEzC,qBAAiB,KAAK,cAAc,EAAE,SAAS,WAAW;AAC1D,0BAAsB,KAAK,gBAAgB,EAAE,UAAS,EAAG,YAAY,gBAAgB;AAErF,QAAI,WAAW;AACX,mBAAa,eAAe,SAAS;AACrC,4BAAsB,KAAK,YAAY,EAAE,UAAS;AAClD,4BAAsB,SAAS,qBAAqB;AACpD,4BAAsB,YAAY,YAAY;IAC9D;AAEY,QAAI,iCAAiC,GAAG;AACpC,oBAAc,SAAS,IAAI,YAAY,sBAAsB,SAAS,CAAC,CAAC;AACxE,oBAAc,YAAY,CAAC,IAAI,YAAY,sBAAsB,SAAS,CAAC,CAAC;AAC5E,oBAAc,YAAY,CAAC,IAAI,YAAY,sBAAsB,SAAS,CAAC,CAAC;AAC5E,oBAAc,YAAY,CAAC,IAAI,YAAY,sBAAsB,SAAS,CAAC,CAAC;AAC5E,oBAAc,YAAY,CAAC,IAAI,YAAY,sBAAsB,SAAS,CAAC,CAAC;AAC5E,oBAAc,YAAY,CAAC,IAAI,YAAY,sBAAsB,SAAS,CAAC,CAAC;IAC5F,OAAmB;AACH,oBAAc,SAAS,IAAI,sBAAsB,SAAS,CAAC;AAC3D,oBAAc,YAAY,CAAC,IAAI,sBAAsB,SAAS,CAAC;AAC/D,oBAAc,YAAY,CAAC,IAAI,sBAAsB,SAAS,CAAC;AAC/D,oBAAc,YAAY,CAAC,IAAI,sBAAsB,SAAS,CAAC;AAC/D,oBAAc,YAAY,CAAC,IAAI,sBAAsB,SAAS,CAAC;AAC/D,oBAAc,YAAY,CAAC,IAAI,sBAAsB,SAAS,CAAC;IAC/E;EAEA;AAEA,EAAK;AAqOD,cA7gBS,cA6gBF,QAAO,CAAC,IAAI,IAAI,IAAI,cAAc,aAAa;AAClD,WAAS,CAAC,IAAI,SAAS,CAAC,IAAI,SAAS,CAAC,IAAI;AAC1C,QAAM,KAAK,aAAa,CAAC;AACzB,QAAM,KAAK,aAAa,CAAC;AACzB,QAAM,KAAK,aAAa,CAAC;AACzB,eAAY,SAAS,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,QAAQ;AACjE,eAAY,SAAS,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,QAAQ;AACjE,eAAY,SAAS,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,QAAQ;AACzE;AAEI,cAvhBS,cAuhBF,YAAW,CAAC,MAAM,MAAM,MAAM,cAAc;AAC/C,YAAU,CAAC,IAAI,UAAU,CAAC,IAAI;AAC9B,YAAU,CAAC,IAAI,UAAU,CAAC,IAAI;AAC9B,YAAU,CAAC,IAAI,UAAU,CAAC,IAAI;AACtC;AAEI,cA7hBS,cA6hBF,QAAO,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,cAAc,aAAa;AAC1D,WAAS,CAAC,IAAI,SAAS,CAAC,IAAI,SAAS,CAAC,IAAI;AAC1C,QAAM,KAAK,aAAa,CAAC;AACzB,QAAM,KAAK,aAAa,CAAC;AACzB,QAAM,KAAK,aAAa,CAAC;AACzB,QAAM,KAAK,aAAa,CAAC;AACzB,QAAM,KAAK,aAAa,CAAC;AACzB,eAAY,SAAS,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,QAAQ;AACjE,eAAY,SAAS,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,QAAQ;AACjE,eAAY,SAAS,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,QAAQ;AACjE,eAAY,SAAS,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,QAAQ;AACjE,eAAY,SAAS,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,QAAQ;AACzE;AAEI,cA3iBS,cA2iBF,6BAA4B,CAAC,KAAK,KAAK,KAAK,OAAO,OAAO,OAAO,MAAM,MAAM,SAAS;AACzF,eAAY,KAAK,KAAK,KAAK,KAAK,OAAO,IAAI;AAC3C,eAAY,KAAK,KAAK,KAAK,KAAK,OAAO,IAAI;AAC3C,eAAY,KAAK,KAAK,KAAK,KAAK,OAAO,IAAI;AACnD;AAEI,cAjjBS,cAijBF,6BAA4B,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,OAAO,OAAO,OACvC,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM,MAAM,MAAM,MAAM,SAAS;AAEpG,QAAM,YAAY,KAAK,KAAK,IAAM,CAAG;AACrC,QAAM,YAAY,KAAK,KAAK,IAAM,CAAG;AACrC,QAAM,YAAY,KAAK,KAAK,IAAM,CAAG;AACrC,QAAM,YAAY,KAAK,KAAK,IAAM,CAAG;AACrC,QAAM,YAAY,KAAK,KAAK,IAAM,EAAI;AAEtC,QAAM,CAAC,IAAI,aAAc,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,KAAM,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AAC/G,QAAM,CAAC,IAAK,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AACpD,QAAM,CAAC,IAAI,aAAa,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AAChE,QAAM,CAAC,IAAK,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AACpD,QAAM,CAAC,IAAI,aAAc,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,KAAM,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AAC/G,eAAY,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,OAAO,IAAI;AAErD,QAAM,CAAC,IAAI,aAAc,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,KAAM,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AAC/G,QAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AACnD,QAAM,CAAC,IAAI,aAAa,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AAChE,QAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AACnD,QAAM,CAAC,IAAI,aAAc,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,KAAM,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AAC/G,eAAY,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,OAAO,IAAI;AAErD,QAAM,CAAC,IAAI,aAAa,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,aACzD,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,KAAM,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AACnG,QAAM,CAAC,IAAI,YAAY,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AACnG,QAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AACvF,QAAM,CAAC,IAAI,YAAY,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AACnG,QAAM,CAAC,IAAI,aAAa,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,aACzD,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,KAAM,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AACnG,eAAY,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,OAAO,IAAI;AAErD,QAAM,CAAC,IAAI,aAAc,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,KAAM,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AAC/G,QAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AACnD,QAAM,CAAC,IAAI,aAAa,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AAChE,QAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AACnD,QAAM,CAAC,IAAI,aAAc,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,KAAM,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AAC/G,eAAY,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,OAAO,IAAI;AAErD,QAAM,CAAC,IAAI,aAAc,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,KAAM,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AAC/G,QAAM,CAAC,IAAK,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AACpD,QAAM,CAAC,IAAI,aAAa,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AAChE,QAAM,CAAC,IAAK,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AACpD,QAAM,CAAC,IAAI,aAAc,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,KAAM,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC;AAC/G,eAAY,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,OAAO,IAAI;AAC7D;AA9lBO,IAAM,cAAN;AC1CP,IAAM,mBAAmB,IAAI,WAAW,CAAC,KAAK,KAAK,KAAK,EAAE,CAAC;AAC3D,IAAM,sBAAsB,IAAI,WAAW,CAAC,IAAI,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK,EAAE,CAAC;AACnG,IAAM,iBAAiB;AAEvB,IAAM,cAAc,oBAAI,IAAI;EAC1B,CAAC,QAAQ,SAAS;EAClB,CAAC,SAAS,UAAU;EACpB,CAAC,SAAS,UAAU;EACpB,CAAC,UAAU,WAAW;EACtB,CAAC,OAAO,UAAU;EAClB,CAAC,QAAQ,WAAW;EACpB,CAAC,SAAS,YAAY;EACtB,CAAC,UAAU,YAAY;AACzB,CAAC;AAED,IAAM,cAAc,CAAC,OAAO,SAAS;AACnC,QAAM,KAAK,KAAK,QAAQ;AACxB,UAAQ,QAAQ,KAAK;AACvB;AAEA,IAAM,eAAe,CAAC,QAAQ,UAAU;AACtC,SAAO,IAAI,YAAY,UAAU,IAAI,EAAE;AACvC,SAAO,IAAI,YAAY,UAAU,IAAI,EAAE;AACvC,SAAO,IAAI,YAAY,OAAO,EAAE;AAClC;AAEA,IAAM,aAAa,CAAC,QAAQ,UAAU;AACpC,SAAO,IAAI,YAAY,UAAU,IAAI,CAAC;AACtC,SAAO,IAAI,YAAY,UAAU,IAAI,CAAC;AACtC,SAAO,IAAI,YAAY,UAAU,GAAG,CAAC;AACrC,SAAO,IAAI,YAAY,OAAO,CAAC;AACjC;AAGA,IAAM,YAAY,CAAC,QAAQ,UAAU;AACnC,QAAM,OAAO,KAAO,KAAK,KAAK,CAAC,IAAI;AACnC,QAAM,KAAK,YAAY,UAAU,IAAI,EAAE,IAAI,OAAO;AAClD,QAAM,KAAK,YAAY,UAAU,IAAI,EAAE,IAAI,OAAO;AAClD,QAAM,KAAK,YAAY,OAAO,EAAE,IAAI,OAAO;AAC3C,QAAM,IAAI,KAAK,KAAK,KAAO,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAEjD,UAAQ,UAAU,IAAE;IAClB,KAAK;AACH,aAAO,IAAI,GAAG,GAAG,GAAG,CAAC;AACrB;IACF,KAAK;AACH,aAAO,IAAI,GAAG,GAAG,GAAG,CAAC;AACrB;IACF,KAAK;AACH,aAAO,IAAI,GAAG,GAAG,GAAG,CAAC;AACrB;IACF,KAAK;AACH,aAAO,IAAI,GAAG,GAAG,GAAG,CAAC;AACrB;EACN;AACA;AAEA,IAAM,OAAO,CAAC,GAAG,GAAG,MAAM;AACxB,SAAO,KAAK,IAAI,KAAK,IAAI;AAC3B;AAEA,IAAM,wBAAwB,CAAC,SAAS,SAAS;;AAC/C,UAAO,aAAQ,WAAW,KAAK,CAAC,MAAM,EAAE,SAAS,QAAQ,EAAE,OAAO,MAA3D,mBACH;AACN;AAEO,IAAM,uBAAN,MAAM,qBAAoB;EAE/B,OAAO,iBAAiB,YAAY;AAElC,QAAI;AACJ,QAAI;AACJ,QAAI;AAEJ,UAAM,cAAc,WAAW,MAAM,IAAI,EAAE,OAAO,CAAC,SAAS,CAAC,KAAK,WAAW,UAAU,CAAC;AAExF,QAAI,gBAAgB;AACpB,QAAI,OAAO;AACX,aAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,EAAE,GAAG;AAC3C,YAAM,QAAQ,YAAY,CAAC,EAAE,MAAM,GAAG;AAEtC,cAAQ,MAAM,CAAC,GAAC;QACd,KAAK;AACH,cAAI,MAAM,CAAC,MAAM,wBAAwB;AACvC,kBAAM,IAAI,MAAM,wBAAwB;UACpD;AACU;QACF,KAAK;AACH,oBAAU;YACR,MAAM,MAAM,CAAC;YACb,OAAO,SAAS,MAAM,CAAC,GAAG,EAAE;YAC5B,YAAY,CAAA;YACZ,kBAAkB;UAC9B;AACU,cAAI,QAAQ,SAAS;AAAS,2BAAe;mBACpC,QAAQ,SAAS;AAAU,4BAAgB;AACpD;QACF,KAAK,YAAY;AACf,cAAI,CAAC,YAAY,IAAI,MAAM,CAAC,CAAC,GAAG;AAC9B,kBAAM,IAAI;cACR,oCAAoC,MAAM,CAAC,CAAC;YAC1D;UACA;AACU,gBAAM,cAAc,YAAY,IAAI,MAAM,CAAC,CAAC;AAC5C,gBAAM,kBAAkB,YAAY,oBAAoB,QAAQ;AAChE,cAAI,QAAQ,SAAS;AAAU,6BAAiB,YAAY;AAC5D,kBAAQ,WAAW,KAAK;YACtB,MAAM,MAAM,CAAC;YACb,MAAM,MAAM,CAAC;YACb,SAAS;YACT,UAAU,YAAY;YACtB;UACZ,CAAW;AACD,kBAAQ,oBAAoB;AAC5B;QACV;QACQ,KAAK;AACH,iBAAO;AACT;QACA;AACE,gBAAM,IAAI;YACR,8BAA8B,MAAM,CAAC,CAAC;UAClD;MACA;AACM,UAAI;AAAM;IAChB;AAEI,WAAO;MACL,gBAAgB;MAChB,iBAAiB;MACjB,iBAAiB;MACjB,mBAAmB,WAAW,QAAQ,cAAc,IAAI,eAAe,SAAS;IACtF;EACA;EAEE,OAAO,aAAa,WAAW;AAU7B,UAAM,OAAO,CAACC,MAAK,WAAW;AAC5B,YAAM,WAAWA,KAAI,SAAS,OAAO;AACrC,UAAI;AACJ,UAAI;AACJ,WAAK,IAAI,GAAG,KAAK,UAAU,EAAE,GAAG;AAC9B,aAAK,IAAI,GAAG,IAAI,OAAO,QAAQ,EAAE,GAAG;AAClC,cAAIA,KAAI,IAAI,CAAC,MAAM,OAAO,CAAC,GAAG;AAC5B;UACZ;QACA;AACQ,YAAI,MAAM,OAAO,QAAQ;AACvB,iBAAO;QACjB;MACA;AACM,aAAO;IACb;AAUI,UAAM,aAAa,CAAC,GAAG,MAAM;AAC3B,UAAI,EAAE,SAAS,EAAE,QAAQ;AACvB,eAAO;MACf;AAEM,eAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,EAAE,GAAG;AACjC,YAAI,EAAE,CAAC,MAAM,EAAE,CAAC,GAAG;AACjB,iBAAO;QACjB;MACA;AAEM,aAAO;IACb;AAEI,QAAI,MAAM,IAAI,WAAW,SAAS;AAClC,QAAI;AAEJ,QAAI,IAAI,UAAU,iBAAiB,UAAU,CAAC,WAAW,KAAK,gBAAgB,GAAG;AAC/E,YAAM,IAAI,MAAM,oBAAoB;IAC1C;AAEI,2BAAuB,KAAK,KAAK,mBAAmB;AACpD,QAAI,yBAAyB,IAAI;AAC/B,YAAM,IAAI,MAAM,6BAA6B;IACnD;AAEI,UAAM,aAAa,IAAI,YAAY,OAAO,EAAE;MAC1C,IAAI,MAAM,GAAG,oBAAoB;IACvC;AAEI,UAAM,EAAC,cAAc,eAAe,cAAa,IAAI,qBAAoB,iBAAiB,UAAU;AAEpG,WAAO;MACL,mBAAmB,uBAAuB,oBAAoB;MAC9D,iBAAiB;MACjB,gBAAgB;MAChB,iBAAiB;IACvB;EACA;EAEE,OAAO,gBAAgB,SAAS,YAAY,YAAY,WAAW,SAAS,iBAAiB,MAAM;AAEjG,QAAI,WAAW,sBAAsB,WAAW,aAAa,IAAI,SAAS,UAAU;AAEpF,gBAAY,aAAa;AACzB,cAAU,WAAW,QAAQ,QAAQ;AACrC,aAAS,IAAI,WAAW,KAAK,SAAS,EAAE,GAAG;AACzC,eAAS,IAAI,GAAG,IAAI,QAAQ,WAAW,QAAQ,EAAE,GAAG;AAClD,cAAM,WAAW,QAAQ,WAAW,CAAC;AAErC,cAAM,cAAc,YAAY,IAAI,SAAS,IAAI;AACjD,cAAM,2BAA2B,YAAY,oBAAoB,QAAQ;AACzE,aAAK,CAAC,SAAS,WAAW,SAAS,QAAQ,aAAa,8BACnD,CAAC,kBAAkB,eAAe,SAAS,IAAI,IAAI;AACtD,mBAAS,UAAU,IAAI,YAAY,QAAQ,KAAK;QAC1D;AAEQ,YAAI,SAAS,SAAS;AACpB,kBAAQ,SAAS,MAAI;YACnB,KAAK;AACH,uBAAS,QAAQ,CAAC,IAAI,SAAS,QAAQ,UAAU;AACjD;YACF,KAAK;AACH,uBAAS,QAAQ,CAAC,IAAI,SAAS,SAAS,UAAU;AAClD;YACF,KAAK;AACH,uBAAS,QAAQ,CAAC,IAAI,SAAS,SAAS,YAAY,IAAI;AACxD;YACF,KAAK;AACH,uBAAS,QAAQ,CAAC,IAAI,SAAS,UAAU,YAAY,IAAI;AACzD;YACF,KAAK;AACH,uBAAS,QAAQ,CAAC,IAAI,SAAS,SAAS,YAAY,IAAI;AACxD;YACF,KAAK;AACH,uBAAS,QAAQ,CAAC,IAAI,SAAS,UAAU,YAAY,IAAI;AACzD;YACF,KAAK;AACH,uBAAS,QAAQ,CAAC,IAAI,SAAS,WAAW,YAAY,IAAI;AAC1D;YACF,KAAK;AACH,uBAAS,QAAQ,CAAC,IAAI,SAAS,WAAW,YAAY,IAAI;AAC1D;UACd;QACA;AAEQ,sBAAc,SAAS;MAC/B;IACA;AAEI,WAAO;EACX;EAEE,OAAO,QAAQ,WAAW,iBAAiB,MAAM;AAE/C,UAAM,SAAS,qBAAoB,aAAa,SAAS;AAEzD,QAAI,YAAY,qBAAoB,gBAAgB,OAAO,cAAc,WAAW,OAAO,iBAAiB,MAAM,MAAM,cAAc;AACtI,yBAAoB,gBAAgB,OAAO,eAAe,WAAW,WAAW,MAAM,MAAM,cAAc;AAE1G,WAAO;MACL,gBAAgB,OAAO;MACvB,iBAAiB,OAAO;IAC9B;EACA;EAEE,OAAO,wBAAwB,cAAc,eAAe;AAC1D,UAAM,OAAO,sBAAsB,cAAc,OAAO;AACxD,UAAM,OAAO,sBAAsB,cAAc,OAAO;AACxD,UAAM,OAAO,sBAAsB,cAAc,OAAO;AACxD,UAAM,OAAO,sBAAsB,cAAc,OAAO;AACxD,UAAM,OAAO,sBAAsB,cAAc,OAAO;AACxD,UAAM,OAAO,sBAAsB,cAAc,OAAO;AACxD,UAAM,YAAY,sBAAsB,cAAc,aAAa;AACnE,UAAM,YAAY,sBAAsB,cAAc,aAAa;AACnE,UAAM,YAAY,sBAAsB,cAAc,aAAa;AACnE,UAAM,YAAY,sBAAsB,cAAc,aAAa;AACnE,UAAM,YAAY,sBAAsB,cAAc,aAAa;AACnE,UAAM,YAAY,sBAAsB,cAAc,aAAa;AACnE,UAAM,WAAW,sBAAsB,eAAe,iBAAiB;AACvE,UAAM,WAAW,sBAAsB,eAAe,iBAAiB;AACvE,UAAM,QAAQ,sBAAsB,eAAe,cAAc;AACjE,UAAM,QAAQ,sBAAsB,eAAe,cAAc;AACjE,WAAO;MACL,kBAAkB;QAChB;QAAM;QACN;QAAM;QACN;QAAM;MACd;MACM,eAAe;QACb;QAAW;QAAW;QACtB;QAAW;QAAW;MAC9B;MACM;MACA;MACA;MACA;IACN;EACA;EA6CE,OAAO,sCAAsC,cAAc,eAAe,WAAW,SAAS,uBACjD,kBAAkB,kBAAkB,WAAW,WAAW,iBAAiB,MAAM;AAE5H,yBAAoB,gBAAgB,eAAe,kBAAkB,kBAAkB,WAAW,SAAS,cAAc;AAEzH,UAAM,oBAAoB,YAAY,kBAAkB,CAAC,EAAE;AAC3D,UAAM,mBAAmB,YAAY,kBAAkB,CAAC,EAAE;AAC1D,UAAM,sBAAsB,YAAY,kBAAkB,CAAC,EAAE;AAC7D,UAAM,mBAAmB,YAAY,kBAAkB,CAAC,EAAE,0BAA0B,CAAC,EAAE;AAEvF,UAAM,EAAE,kBAAkB,eAAe,UAAU,UAAU,OAAO,MAAK,IACvE,qBAAoB,wBAAwB,cAAc,aAAa;AAEzE,UAAM,SAAS,uBAAuB;AACtC,UAAM,YAAY,uBAAuB,YAAW;AAEpD,aAAS,IAAI,WAAW,KAAK,SAAS,EAAE,GAAG;AAEzC,2BAAoB;QAAgB;QAAG;QAAuB;QAAU;QACpC;QAAO;QAAe;QAAU;QAAO;MAAS;AAEpF,YAAM,UAAU,IAAI,mBAAmB;AACvC,YAAM,YAAY,IAAI,aAAa,WAAW,SAAS,CAAC;AACxD,YAAM,WAAW,IAAI,aAAa,WAAW,UAAU,mBAAmB,CAAC;AAC3E,YAAM,cAAc,IAAI,aAAa,WAAW,UAAU,oBAAoB,kBAAkB,CAAC;AACjG,YAAM,WAAW,IAAI,WAAW,WAAW,UAAU,oBAAoB,mBAAmB,qBAAqB,CAAC;AAElH,gBAAU,CAAC,IAAI,UAAU,OAAO,CAAC;AACjC,gBAAU,CAAC,IAAI,UAAU,OAAO,CAAC;AACjC,gBAAU,CAAC,IAAI,UAAU,OAAO,CAAC;AAEjC,eAAS,CAAC,IAAI,UAAU,OAAO,MAAM;AACrC,eAAS,CAAC,IAAI,UAAU,OAAO,MAAM;AACrC,eAAS,CAAC,IAAI,UAAU,OAAO,MAAM;AAErC,kBAAY,CAAC,IAAI,UAAU,OAAO,SAAS;AAC3C,kBAAY,CAAC,IAAI,UAAU,OAAO,SAAS;AAC3C,kBAAY,CAAC,IAAI,UAAU,OAAO,SAAS;AAC3C,kBAAY,CAAC,IAAI,UAAU,OAAO,SAAS;AAE3C,eAAS,CAAC,IAAI,UAAU,OAAO,IAAI;AACnC,eAAS,CAAC,IAAI,UAAU,OAAO,IAAI;AACnC,eAAS,CAAC,IAAI,UAAU,OAAO,IAAI;AACnC,eAAS,CAAC,IAAI,UAAU,OAAO,OAAO;IAC5C;EACA;EAEE,OAAO,8BAA8B,WAAW;AAC9C,UAAM,EAAE,cAAc,cAAa,IAAK,qBAAoB,QAAQ,SAAS;AAE7E,UAAM,aAAa,IAAI,uBAAsB;AAE7C,UAAM,EAAE,kBAAkB,eAAe,UAAU,UAAU,OAAO,MAAK,IACvE,qBAAoB,wBAAwB,cAAc,aAAa;AAEzE,aAAS,IAAI,GAAG,IAAI,cAAc,OAAO,EAAE,GAAG;AAE5C,iBAAW,gBAAe;AAC1B,YAAM,WAAW,WAAW,SAAS,WAAW,aAAa,CAAC;AAE9D,2BAAoB,gBAAgB,GAAG,GAAG,UAAU,kBAAkB,OAAO,eAAe,UAAU,OAAO,QAAQ;IAC3H;AAEI,UAAM,MAAM,IAAU,QAAO;AAC7B,QAAI,SAAQ;AAEZ,WAAO;EACX;AAEA;AAhHE,cApPW,sBAoPJ,mBAAkB,WAAW;AAElC,QAAM,IAAI,IAAU,QAAO;AAC3B,QAAM,IAAI,IAAU,WAAU;AAC9B,QAAM,IAAI,IAAU,QAAO;AAC3B,QAAM,IAAI,IAAU,QAAO;AAE3B,QAAM,SAAS,uBAAuB;AAEtC,SAAO,SAAS,OAAO,uBAAuB,eAAe,kBAAkB,YAAY,eAC3E,eAAe,YAAY,UAAU;AACnD,eAAW,YAAY,uBAAuB,YAAW;AAEzD,UAAM,aAAa,KAAK,OAAO,wBAAwB,SAAS,GAAG;AAEnE,iBAAa,GAAG,cAAc,KAAK,CAAC;AACpC,cAAU,GAAG,cAAc,KAAK,CAAC;AACjC,iBAAa,GAAG,WAAW,KAAK,CAAC;AACjC,eAAW,GAAG,WAAW,KAAK,CAAC;AAE/B,aAAS,OAAO,CAAC,IAAI,KAAK,iBAAiB,KAAK,UAAU,GAAG,iBAAiB,KAAK,UAAU,GAAG,EAAE,CAAC;AACnG,aAAS,OAAO,CAAC,IAAI,KAAK,iBAAiB,KAAK,UAAU,GAAG,iBAAiB,KAAK,UAAU,GAAG,EAAE,CAAC;AACnG,aAAS,OAAO,CAAC,IAAI,KAAK,iBAAiB,KAAK,UAAU,GAAG,iBAAiB,KAAK,UAAU,GAAG,EAAE,CAAC;AAEnG,aAAS,OAAO,SAAS,IAAI,EAAE;AAC/B,aAAS,OAAO,SAAS,IAAI,EAAE;AAC/B,aAAS,OAAO,SAAS,IAAI,EAAE;AAC/B,aAAS,OAAO,SAAS,IAAI,EAAE;AAE/B,aAAS,OAAO,MAAM,IAAI,KAAK,IAAI,KAAK,cAAc,UAAU,UAAU,GAAG,cAAc,UAAU,UAAU,GAAG,EAAE,CAAC,CAAC;AACtH,aAAS,OAAO,MAAM,IAAI,KAAK,IAAI,KAAK,cAAc,UAAU,UAAU,GAAG,cAAc,UAAU,UAAU,GAAG,EAAE,CAAC,CAAC;AACtH,aAAS,OAAO,MAAM,IAAI,KAAK,IAAI,KAAK,cAAc,UAAU,UAAU,GAAG,cAAc,UAAU,UAAU,GAAG,EAAE,CAAC,CAAC;AAEtH,aAAS,OAAO,IAAI,IAAI,MAAM,KAAK,MAAM,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG;AAC3D,aAAS,OAAO,IAAI,IAAI,MAAM,KAAK,MAAM,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG;AAC3D,aAAS,OAAO,IAAI,IAAI,MAAM,KAAK,MAAM,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG;AAC3D,aAAS,OAAO,OAAO,IAAI,MAAM,KAAK,MAAM,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG;AAE9D,WAAO;EACb;AAEA,EAAG;AA7RI,IAAM,sBAAN;ACjEA,IAAM,aAAN,MAAM,WAAU;EAWnB,OAAO,sBAAsB,mBAAmB;AAC5C,QAAI,kBAAkB,SAAS,WAAU,cAAc,GAAG;AACtD,aAAO;IACnB;AACQ,WAAO;EACf;EAEI,OAAO,wBAAwB,QAAQ,aAAa,WAAW,SAAS;AACpE,UAAM,qBAAqB,IAAI,WAAW,QAAQ,KAAK,IAAI,GAAG,cAAc,SAAS,GAAG,SAAS;AACjG,UAAM,oBAAoB,QAAQ,OAAO,kBAAkB;AAC3D,WAAO,WAAU,sBAAsB,iBAAiB;EAChE;EAEI,OAAO,iBAAiB,YAAY;AAChC,UAAM,cAAc,WAAW,MAAM,IAAI;AAEzC,UAAM,cAAc,CAAA;AAEpB,QAAI,aAAa;AACjB,QAAI,gBAAgB,CAAA;AACpB,QAAI,aAAa;AAEjB,aAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AACzC,YAAM,OAAO,YAAY,CAAC,EAAE,KAAI;AAChC,kBAAY,KAAK,IAAI;AACrB,UAAI,KAAK,WAAW,eAAe,KAAK,KAAK,MAAM,2BAA2B,GAAG;AAC7E,qBAAa;MAC7B,WAAuB,KAAK,WAAW,gBAAgB,GAAG;AAC1C,cAAM,kBAAkB,KAAK,MAAM,KAAK;AACxC,YAAI,iBAAiB;AACjB,uBAAa,SAAS,gBAAgB,CAAC,CAAC;QAC5D;MACA,WAAuB,KAAK,WAAW,UAAU,GAAG;AACpC,cAAM,gBAAgB,KAAK,MAAM,uBAAuB;AACxD,YAAI,eAAe;AACf,gBAAM,eAAe,cAAc,CAAC;AACpC,gBAAM,eAAe,cAAc,CAAC;AACpC,wBAAc,YAAY,IAAI;QAClD;MACA,WAAuB,SAAS,WAAU,gBAAgB;AAC1C;MAChB;IACA;AAEQ,QAAI,gBAAgB;AACpB,QAAI,eAAe,CAAA;AACnB,UAAM,YAAY;MACd,UAAU;MACV,OAAO;MACP,QAAQ;MACR,SAAS;MACT,SAAS;MACT,UAAU;MACV,SAAS;IACrB;AAEQ,UAAM,aAAa,CAAA;AACnB,aAAS,aAAa,eAAe;AACjC,UAAI,cAAc,eAAe,SAAS,GAAG;AACzC,mBAAW,KAAK,SAAS;AACzB,cAAM,OAAO,cAAc,SAAS;AACpC,qBAAa,SAAS,IAAI;AAC1B,yBAAiB,UAAU,IAAI;MAC/C;IACA;AAEQ,QAAI,+BAA+B;AACnC,QAAI,2CAA2C;AAC/C,aAAS,aAAa,YAAY;AAC9B,UAAI,UAAU,WAAW,QAAQ;AAAG;IAChD;AACQ,+CAA2C,+BAA+B;AAC1E,QAAI,2BAA2B;AAC/B,QAAI,4CAA4C;AAAG,iCAA2B;AAC9E,QAAI,4CAA4C;AAAG,iCAA2B;AAE9E,QAAI,kCAAkC,CAAA;AACtC,QAAI,4BAA4B,GAAG;AAC/B,eAAS,MAAM,GAAG,MAAM,GAAG,OAAO;AAC9B,iBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,0CAAgC,KAAK,aAAa,IAAI,2CAA2C,IAAI;QACzH;MACA;IACA;AAEQ,QAAI,kCAAkC,CAAA;AACtC,QAAI,4BAA4B,GAAG;AAC/B,eAAS,MAAM,GAAG,MAAM,GAAG,OAAO;AAC9B,iBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,0CAAgC,KAAK,aAAa,IAAI,2CAA2C,MAAM,EAAE;QAC7H;MACA;IACA;AAEQ,WAAO;MACH,cAAc;MACd,iBAAiB;MACjB,cAAc;MACd,cAAc;MACd,eAAe;MACf,mBAAmB,WAAW,QAAQ,WAAU,cAAc,IAAI,WAAU,eAAe,SAAS;MACpG,iBAAiB;MACjB,gBAAgB;MAChB,4BAA4B;MAC5B,4CAA4C;MAC5C,mCAAmC;MACnC,mCAAmC;IAC/C;EACA;EAEI,OAAO,sBAAsB,WAAW;AACpC,UAAM,UAAU,IAAI,YAAW;AAC/B,QAAI,eAAe;AACnB,QAAI,aAAa;AACjB,UAAM,gBAAgB;AAEtB,WAAO,MAAM;AACT,UAAI,eAAe,iBAAiB,UAAU,YAAY;AACtD,cAAM,IAAI,MAAM,uDAAuD;MACvF;AACY,YAAM,cAAc,IAAI,WAAW,WAAW,cAAc,aAAa;AACzE,oBAAc,QAAQ,OAAO,WAAW;AACxC,sBAAgB;AAEhB,UAAI,WAAU,wBAAwB,WAAW,cAAc,gBAAgB,GAAG,OAAO,GAAG;AACxF;MAChB;IACA;AAEQ,WAAO,WAAU,iBAAiB,UAAU;EAEpD;EAEI,OAAO,eAAe,WAAW,QAAQ;AACrC,WAAO,IAAI,SAAS,WAAW,OAAO,eAAe;EAC7D;EAEI,OAAO,kBAAkB,YAAY,QAAQ,cAAc,kBAAkB,eAAe,WAAW;AACnG,QAAI,YAAY,aAAa,CAAA;AAC7B,aAAS,YAAY,kBAAkB;AACnC,YAAM,eAAe,cAAc,QAAQ;AAC3C,UAAI,iBAAiB,SAAS;AAC1B,kBAAU,QAAQ,IAAI,WAAW,WAAW,SAAS,aAAa,QAAQ,GAAG,IAAI;MACjG,WAAuB,iBAAiB,SAAS;AACjC,kBAAU,QAAQ,IAAI,WAAW,SAAS,SAAS,aAAa,QAAQ,CAAC,IAAI;MAC7F;IACA;EACA;EAEI,OAAO,sCAAsC,QAAQ,WAAW,SAAS,YAAY,kBACxC,UAAU,UAAU,8BAA8B,GAAG;AAC9F,kCAA8B,KAAK,IAAI,6BAA6B,OAAO,wBAAwB;AACnG,UAAM,oBAAoB,YAAY,kBAAkB,CAAC,EAAE;AAC3D,UAAM,mBAAmB,YAAY,kBAAkB,CAAC,EAAE;AAC1D,UAAM,sBAAsB,YAAY,kBAAkB,CAAC,EAAE;AAC7D,UAAM,mBAAmB,YAAY,kBAAkB,CAAC,EAAE;AAC1D,UAAM,mBAAmB,YAAY,kBAAkB,CAAC,EAAE,0BAA0B,2BAA2B,EAAE;AAEjH,aAAS,IAAI,WAAW,KAAK,SAAS,KAAK;AAEvC,YAAM,cAAc,WAAU,yBAAyB,YAAY,GAAG,QAAQ,kBAAkB,2BAA2B;AAE3H,YAAM,UAAU,IAAI,mBAAmB;AACvC,YAAM,YAAY,IAAI,aAAa,UAAU,SAAS,CAAC;AACvD,YAAM,WAAW,IAAI,aAAa,UAAU,UAAU,mBAAmB,CAAC;AAC1E,YAAM,cAAc,IAAI,aAAa,UAAU,UAAU,oBAAoB,kBAAkB,CAAC;AAChG,YAAM,WAAW,IAAI,WAAW,UAAU,UAAU,oBAAoB,mBAAmB,qBAAqB,CAAC;AAEjH,gBAAU,CAAC,IAAI,YAAY,uBAAuB,OAAO,CAAC;AAC1D,gBAAU,CAAC,IAAI,YAAY,uBAAuB,OAAO,CAAC;AAC1D,gBAAU,CAAC,IAAI,YAAY,uBAAuB,OAAO,CAAC;AAE1D,eAAS,CAAC,IAAI,YAAY,uBAAuB,OAAO,MAAM;AAC9D,eAAS,CAAC,IAAI,YAAY,uBAAuB,OAAO,MAAM;AAC9D,eAAS,CAAC,IAAI,YAAY,uBAAuB,OAAO,MAAM;AAE9D,kBAAY,CAAC,IAAI,YAAY,uBAAuB,OAAO,SAAS;AACpE,kBAAY,CAAC,IAAI,YAAY,uBAAuB,OAAO,SAAS;AACpE,kBAAY,CAAC,IAAI,YAAY,uBAAuB,OAAO,SAAS;AACpE,kBAAY,CAAC,IAAI,YAAY,uBAAuB,OAAO,SAAS;AAEpE,eAAS,CAAC,IAAI,YAAY,uBAAuB,OAAO,IAAI;AAC5D,eAAS,CAAC,IAAI,YAAY,uBAAuB,OAAO,IAAI;AAC5D,eAAS,CAAC,IAAI,YAAY,uBAAuB,OAAO,IAAI;AAC5D,eAAS,CAAC,IAAI,YAAY,uBAAuB,OAAO,OAAO;AAE/D,UAAI,+BAA+B,GAAG;AAClC,cAAM,wBAAwB,IAAI;UAAa;UAAU,UAAU,oBAAoB,mBACxC,sBAAsB;UACtB,YAAY;QAAuB;AAClF,iBAASC,KAAI,GAAGA,MAAK,GAAGA,MAAK;AACzB,gCAAsBA,EAAC,IAAI,YAAY,uBAAuB,OAAO,OAAOA,EAAC;QACjG;AACgB,YAAI,+BAA+B,GAAG;AAClC,mBAASA,KAAI,GAAGA,MAAK,IAAIA,MAAK;AAC1B,kCAAsBA,EAAC,IAAI,YAAY,uBAAuB,OAAO,OAAOA,EAAC;UACrG;QACA;MACA;IACA;EACA;EAgFI,OAAO,8BAA8B,WAAW,8BAA8B,GAAG;AAE7E,UAAM,SAAS,WAAU,sBAAsB,SAAS;AAExD,QAAI,OAAO,YAAY;AAEnB,aAAO,oBAAoB,8BAA8B,SAAS;IAE9E,OAAe;AAEH,YAAM,aAAa,OAAO;AAE1B,YAAM,aAAa,WAAU,eAAe,WAAW,MAAM;AA2B7D,YAAM,aAAa,IAAI,uBAAuB,2BAA2B;AAEzE,eAAS,MAAM,GAAG,MAAM,YAAY,OAAO;AACvC,cAAM,WAAW,WAAU,yBAAyB,YAAY,KAAK,QAAQ,GAAG,2BAA2B;AAC3G,mBAAW,SAAS,QAAQ;MAC5C;AAEY,aAAO;IACnB;EACA;AAEA;AAnVI,cAFS,YAEF,kBAAiB;AAExB,cAJS,YAIF,cAAa;EAAC;EAAW;EAAW;EAAW;EAAS;EAAS;EAAS;EAC5D;EAAK;EAAK;EAAK;EAAU;EAAU;EAAU;EAAO;EAAS;EAAQ;AAAS;AAEnG,cAPS,YAOF,4BAA2B,MAAM,KAAK,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,MAAO,UAAU,CAAC,EAAG;AAErF,cATS,YASF,UAAS,CAAC,CAAC,GAAG,WAAU,UAAU,GAAG,CAAC,GAAG,WAAU,YAAY,GAAG,WAAU,wBAAwB,CAAC;AA4M5G,cArNS,YAqNF,4BAA2B,WAAW;AAEzC,MAAI,YAAY,CAAA;AAChB,QAAM,eAAe,IAAU,WAAU;AAEzC,SAAO,SAAS,YAAY,KAAK,QAAQ,mBAAmB,GAAG,8BAA8B,GAAG;AAC5F,kCAA8B,KAAK,IAAI,6BAA6B,OAAO,wBAAwB;AACnG,eAAU;MAAkB;MAAY,MAAM,OAAO,gBAAgB;MAAkB,OAAO;MAClE,WAAU,OAAO,8BAA8B,IAAI,IAAI,CAAC;MAAG,OAAO;MAAe;IAAS;AACtH,UAAM,WAAW,uBAAuB,YAAY,2BAA2B;AAC/E,QAAI,UAAU,SAAS,MAAM,QAAW;AACpC,eAAS,uBAAuB,OAAO,MAAM,IAAI,KAAK,IAAI,UAAU,SAAS,CAAC;AAC9E,eAAS,uBAAuB,OAAO,MAAM,IAAI,KAAK,IAAI,UAAU,SAAS,CAAC;AAC9E,eAAS,uBAAuB,OAAO,MAAM,IAAI,KAAK,IAAI,UAAU,SAAS,CAAC;IAC9F,OAAmB;AACH,eAAS,uBAAuB,OAAO,MAAM,IAAI;AACjD,eAAS,uBAAuB,OAAO,MAAM,IAAI;AACjD,eAAS,uBAAuB,OAAO,MAAM,IAAI;IACjE;AAEY,QAAI,UAAU,QAAQ,MAAM,QAAW;AACnC,YAAM,QAAQ;AACd,eAAS,uBAAuB,OAAO,IAAI,KAAK,MAAM,QAAQ,UAAU,QAAQ,KAAK;AACrF,eAAS,uBAAuB,OAAO,IAAI,KAAK,MAAM,QAAQ,UAAU,QAAQ,KAAK;AACrF,eAAS,uBAAuB,OAAO,IAAI,KAAK,MAAM,QAAQ,UAAU,QAAQ,KAAK;IACrG,WAAuB,UAAU,KAAK,MAAM,QAAW;AACvC,eAAS,uBAAuB,OAAO,IAAI,IAAI,UAAU,KAAK,IAAI;AAClE,eAAS,uBAAuB,OAAO,IAAI,IAAI,UAAU,OAAO,IAAI;AACpE,eAAS,uBAAuB,OAAO,IAAI,IAAI,UAAU,MAAM,IAAI;IACnF,OAAmB;AACH,eAAS,uBAAuB,OAAO,IAAI,IAAI;AAC/C,eAAS,uBAAuB,OAAO,IAAI,IAAI;AAC/C,eAAS,uBAAuB,OAAO,IAAI,IAAI;IAC/D;AAEY,QAAI,UAAU,SAAS,MAAM,QAAW;AACpC,eAAS,uBAAuB,OAAO,OAAO,IAAK,KAAK,IAAI,KAAK,IAAI,CAAC,UAAU,SAAS,CAAC,KAAM;IAChH;AAEY,aAAS,uBAAuB,OAAO,IAAI,IAAI,MAAM,KAAK,MAAM,SAAS,uBAAuB,OAAO,IAAI,CAAC,GAAG,GAAG,GAAG;AACrH,aAAS,uBAAuB,OAAO,IAAI,IAAI,MAAM,KAAK,MAAM,SAAS,uBAAuB,OAAO,IAAI,CAAC,GAAG,GAAG,GAAG;AACrH,aAAS,uBAAuB,OAAO,IAAI,IAAI,MAAM,KAAK,MAAM,SAAS,uBAAuB,OAAO,IAAI,CAAC,GAAG,GAAG,GAAG;AACrH,aAAS,uBAAuB,OAAO,OAAO,IAAI,MAAM,KAAK,MAAM,SAAS,uBAAuB,OAAO,OAAO,CAAC,GAAG,GAAG,GAAG;AAE3H,QAAI,+BAA+B,GAAG;AAClC,UAAI,UAAU,UAAU,MAAM,QAAW;AACrC,iBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,mBAAS,uBAAuB,OAAO,OAAO,CAAC,IAAI,UAAU,OAAO,gCAAgC,CAAC,CAAC;QAC9H;AACoB,YAAI,+BAA+B,GAAG;AAClC,mBAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AACzB,qBAAS,uBAAuB,OAAO,OAAO,CAAC,IAAI,UAAU,OAAO,gCAAgC,CAAC,CAAC;UAClI;QACA;MACA,OAAuB;AACH,iBAAS,uBAAuB,OAAO,IAAI,IAAI;AAC/C,iBAAS,uBAAuB,OAAO,IAAI,IAAI;AAC/C,iBAAS,uBAAuB,OAAO,IAAI,IAAI;MACnE;IACA;AAEY,iBAAa,IAAI,UAAU,OAAO,GAAG,UAAU,OAAO,GAAG,UAAU,OAAO,GAAG,UAAU,OAAO,CAAC;AAC/F,iBAAa,UAAS;AAEtB,aAAS,uBAAuB,OAAO,SAAS,IAAI,aAAa;AACjE,aAAS,uBAAuB,OAAO,SAAS,IAAI,aAAa;AACjE,aAAS,uBAAuB,OAAO,SAAS,IAAI,aAAa;AACjE,aAAS,uBAAuB,OAAO,SAAS,IAAI,aAAa;AAEjE,aAAS,uBAAuB,OAAO,CAAC,IAAI,UAAU,GAAG;AACzD,aAAS,uBAAuB,OAAO,CAAC,IAAI,UAAU,GAAG;AACzD,aAAS,uBAAuB,OAAO,CAAC,IAAI,UAAU,GAAG;AAEzD,WAAO;EACnB;AAEA,EAAK;AAjSE,IAAM,YAAN;ACFA,IAAM,mBAAN,MAAM,kBAAiB;EAE1B,YAAY,cAAc,gBAAgB,oBAAoB,oBAAoB;AAC9E,SAAK,eAAe;AACpB,SAAK,iBAAiB;AACtB,SAAK,qBAAqB;AAC1B,SAAK,qBAAqB;EAClC;EAEI,gCAAgC,YAAY;AACxC,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI,KAAK,oBAAoB;AACzB,YAAM,UAAU,KAAK,mBAAmB,UAAU;AAClD,2BAAqB,QAAQ;AAC7B,qBAAe,QAAQ;AACvB,uBAAiB,QAAQ;IACrC,OAAe;AACH,2BAAqB,KAAK;AAC1B,qBAAe,KAAK;AACpB,uBAAiB,KAAK;IAClC;AAEQ,UAAM,YAAY,CAAA;AAClB,aAAS,IAAI,GAAG,IAAI,cAAc,KAAK;AACnC,YAAM,gBAAgB,IAAI,uBAAuB,WAAW,wBAAwB;AACpF,YAAM,gBAAgB,eAAe,CAAC;AACtC,eAAS,IAAI,GAAG,IAAI,WAAW,YAAY,KAAK;AAC5C,YAAI,cAAc,CAAC,GAAG;AAClB,wBAAc,kBAAkB,YAAY,CAAC;QACjE;MACA;AACY,gBAAU,KAAK,aAAa;IACxC;AACQ,WAAO;MACH,aAAa;MACb,YAAY;IACxB;EACA;EAEI,OAAO,uBAAuB,gBAAgB,GAAG,cAAc,IAAU,QAAO,GAClD,YAAY,YAAY,iBAAiB,aAAa,YAAY,YAAY;AACxG,UAAM,qBAAqB,CAAC,eAAe;AAEvC,UAAI,iBAAiB;AAAG,wBAAgB,WAAW;AAEnD,YAAM,UAAU,IAAU,QAAO;AACjC,YAAM,UAAU,IAAU,QAAO;AACjC,YAAM,gBAAgB;AACtB,YAAM,aAAa,CAAC,UAAU;AAC1B,cAAM,IAAI,KAAK,MAAM,MAAM,IAAI,aAAa,IAAI;AAChD,cAAM,IAAI,KAAK,MAAM,MAAM,IAAI,aAAa,IAAI;AAChD,cAAM,IAAI,KAAK,MAAM,MAAM,IAAI,aAAa,IAAI;MAChE;AACY,iBAAW,OAAO,KAAK,CAAC,GAAG,MAAM;AAC7B,gBAAQ;UAAI,EAAE,uBAAuB,OAAO,CAAC;UACjC,EAAE,uBAAuB,OAAO,CAAC;UACjC,EAAE,uBAAuB,OAAO,CAAC;QAAC,EAAE,IAAI,WAAW;AAC/D,mBAAW,OAAO;AAClB,cAAM,cAAc,QAAQ,SAAQ;AACpC,gBAAQ;UAAI,EAAE,uBAAuB,OAAO,CAAC;UACjC,EAAE,uBAAuB,OAAO,CAAC;UACjC,EAAE,uBAAuB,OAAO,CAAC;QAAC,EAAE,IAAI,WAAW;AAC/D,mBAAW,OAAO;AAClB,cAAM,cAAc,QAAQ,SAAQ;AACpC,YAAI,cAAc;AAAa,iBAAO;;AACjC,iBAAO;MAC5B,CAAa;AAED,YAAM,iBAAiB,CAAA;AACvB,YAAM,qBAAqB,CAAA;AAC3B,sBAAgB,KAAK,IAAI,WAAW,YAAY,aAAa;AAC7D,YAAM,gBAAgB,KAAK,KAAK,WAAW,aAAa,aAAa;AACrE,UAAI,oBAAoB;AACxB,eAAS,IAAI,GAAG,IAAI,eAAe,KAAM;AACrC,YAAI,aAAa;AACjB,uBAAe,KAAK,CAAC,eAAe;AAChC,iBAAO,cAAc,cAAc,aAAa,aAAa;QACjF,CAAiB;AACD,2BAAmB,KAAK;UACpB,cAAc;UACd,cAAc;QAClC,CAAiB;AACD,6BAAqB;MACrC;AACY,aAAO;QACH,gBAAgB,eAAe;QAC/B;QACA;MAChB;IACA;AACQ,WAAO,IAAI,kBAAiB,QAAW,QAAW,QAAW,kBAAkB;EACvF;AACA;AC9FO,IAAM,uBAAN,MAAM,sBAAqB;EAE9B,YAAY,kBAAkB,uBAAuB,kBAAkB,aAAa,aAAa,WAAW,YAAY;AACpH,SAAK,mBAAmB;AACxB,SAAK,wBAAwB;AAC7B,SAAK,mBAAmB;AACxB,SAAK,cAAc;AACnB,SAAK,cAAc,cAAc,IAAU,QAAO,EAAG,KAAK,WAAW,IAAI;AACzE,SAAK,YAAY;AACjB,SAAK,aAAa;EAC1B;EAEI,mCAAmC,YAAY;AAC3C,UAAM,mBAAmB,KAAK,iBAAiB,gCAAgC,UAAU;AACzF,WAAO,YAAY;MAAoC,iBAAiB;MACjB,KAAK;MAAuB,KAAK;MACjC,KAAK;MAAa,KAAK;MAAW,KAAK;MACvC,iBAAiB;IAAU;EAC1F;EAEI,OAAO,qBAAqB,wBAAwB,GAAG,mBAAmB,GAAG,cAAc,GAAG,cAAc,IAAU,QAAO,GACjG,YAAY,YAAY,iBAAiB,aAAa,YAAY,YAAY;AACtG,UAAM,mBAAmB,iBAAiB,uBAAuB,aAAa,aAAa,WAAW,UAAU;AAChH,WAAO,IAAI;MAAqB;MAAkB;MAAuB;MACzC;MAAa;MAAa;MAAW;IAAU;EACvF;AACA;AC9BO,IAAM,eAAe;EACxB,eAAe;EACf,cAAc;EACd,QAAQ;AACZ;ACKA,SAAS,oBAAoB,QAAQ,QAAQ;AACzC,MAAI,UAAU;AACd,WAAS,SAAS;AAAQ,eAAW,MAAM;AAE3C,MAAI,CAAC,UAAU,OAAO,aAAa,SAAS;AACxC,aAAS,IAAI,YAAY,OAAO;EACxC;AAEI,MAAI,SAAS;AACb,WAAS,SAAS,QAAQ;AACtB,QAAI,WAAW,QAAQ,QAAQ,MAAM,SAAS,EAAE,IAAI,MAAM,IAAI;AAC9D,cAAU,MAAM;EACxB;AAEI,SAAO;AACX;AAEO,IAAM,YAAN,MAAM,WAAU;EAEnB,OAAO,YAAY,UAAU,YAAY,gBAAgB,2BAA2B,cAAc,kBAC/E,8BAA8B,GAAG,aAAa,aAAa,WAAW,YAAY;AAEjG,UAAM,2BAA2B,UAAU;AAC3C,UAAM,uBAAuB,YAAY,kBAAkB,YAAY;AACvE,UAAM,eAAe;AAErB,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI,gBAAgB;AACpB,QAAI,aAAa;AAEjB,QAAI,eAAe;AACnB,QAAI,uBAAuB;AAC3B,QAAI,aAAa;AAEjB,QAAI;AACJ,QAAI,oBAAoB,IAAI,QAAQ,CAAC,YAAY;AAC7C,mCAA6B;IACzC,CAAS;AAED,QAAI,mBAAmB;AACvB,QAAI,iBAAiB;AACrB,QAAI,qBAAqB;AACzB,QAAI,aAAa;AACjB,QAAI,SAAS;AACb,QAAI,SAAS,CAAA;AAEb,UAAM,cAAc,IAAI,YAAW;AAEnC,UAAM,kBAAkB,CAAC,SAAS,cAAc,cAAc;AAC1D,YAAM,eAAe,WAAW;AAChC,UAAI,gBAAgB;AAEhB,YAAI,WAAW;AACX,iBAAO,KAAK;YACR,QAAQ;YACR,aAAa,UAAU;YACvB,cAAc;YACd,YAAY,qBAAqB,UAAU;UACnE,CAAqB;AACD,gCAAsB,UAAU;QACpD;AAEgB,YAAI,CAAC,cAAc;AACf,wBAAc,YAAY,OAAO,SAAS;AAC1C,cAAI,UAAU,sBAAsB,UAAU,GAAG;AAC7C,qBAAS,UAAU,iBAAiB,UAAU;AAC9C,0CAA8B,KAAK,IAAI,6BAA6B,OAAO,wBAAwB;AACnG,yBAAa,OAAO;AAEpB,gBAAI,YAAY;AACZ,uBAAS,oBAAoB,iBAAiB,UAAU;AACxD,8BAAgB,OAAO,cAAc;YACjE,OAA+B;AACH,8BAAgB,OAAO;AACvB,qCAAuB;YACnD;AAEwB,kBAAM,eAAe,YAAY,kBAAkB,CAAC,EAAE,0BAA0B,2BAA2B;AAC3G,kBAAM,uBAAuB,uBAAuB,aAAa,gBAAgB;AACjF,8BAAkB,IAAI,YAAY,oBAAoB;AACtD,wBAAY,oBAAoB;cAC5B,cAAc,YAAY;cAC1B,cAAc,YAAY;cAC1B,iBAAiB;cACjB;cACA;cACA;cACA,kBAAkB;cAClB,aAAa,IAAU,QAAO;YAC1D,GAA2B,eAAe;AAElB,+BAAmB,OAAO;AAC1B,6BAAiB,OAAO;AACxB,2BAAe;UACvC;QACA,WAA2B,cAAc,CAAC,sBAAsB;AAC5C,gBAAM,iCAAiC,OAAO,kBAAkB,OAAO,aAAa;AACpF,4CAAkC,oBAAoB,QAAQ,+BAA+B;AAC7F,cAAI,gCAAgC,cAAc,gCAAgC;AAC9E,gCAAoB,gBAAgB,OAAO,cAAc,iCAAiC,OAAO,eAAe;AAChH,+BAAmB;AACnB,6BAAiB;AACjB,mCAAuB;UAC/C;QACA;AAEgB,YAAI,gBAAgB,sBAAsB;AAEtC,cAAI,OAAO,SAAS,GAAG;AAEnB,6BAAiB,oBAAoB,QAAQ,cAAc;AAE3D,kBAAM,sCAAsC,qBAAqB;AACjE,gBAAI,sCAAsC,4BAA4B,cAAc;AAChF,oBAAM,oBAAoB,qBAAqB;AAC/C,oBAAM,kBAAkB,KAAK,MAAM,oBAAoB,OAAO,aAAa;AAC3E,oBAAM,kBAAkB,kBAAkB,OAAO;AACjD,oBAAM,mBAAmB,oBAAoB;AAC7C,oBAAM,gBAAgB,aAAa;AACnC,oBAAM,uBAAuB,iBAAiB,OAAO,CAAC,EAAE;AACxD,oBAAM,cAAc,IAAI,SAAS,gBAAgB,sBAAsB,eAAe;AAEtF,oBAAM,eAAe,YAAY,kBAAkB,CAAC,EAAE,0BAA0B,2BAA2B;AAC3G,oBAAM,YAAY,aAAa,aAAa,gBAAgB;AAE5D,kBAAI,YAAY;AACZ,oCAAoB;kBAAsC,OAAO;kBAAc,OAAO;kBAAe;kBAC3C,kBAAkB;kBAAG;kBACrB;kBAAa;kBAAG;kBAAiB;gBAAS;cACpI,OAAmC;AACH,0BAAU;kBAAsC;kBAAQ;kBAAG,kBAAkB;kBAAG;kBAAa;kBAC7C;kBAAiB;kBAAW;gBAA2B;cACvI;AAE4B,2BAAa;AACb,kBAAI,CAAC,qBAAqB;AACtB,4BAAY,2BAA2B;kBACnC;kBACA;kBACA,YAAY;kBACZ,aAAa;kBACb,iBAAiB;kBACjB,uBAAuB;kBACvB,kBAAkB;kBAClB,iBAAiB;kBACjB,4BAA4B;kBAC5B,0BAA0B;gBAC9D,GAAmC,GAAG,iBAAiB,YAAY,eAAe;AAClD,sCAAsB,IAAI,YAAY,iBAAiB,KAAK;cAC5F;AAC4B,kCAAoB,mBAAmB,GAAG,UAAU;AACpD,wCAA0B,qBAAqB,YAAY;AAC3D,kCAAoB;AACpB,gCAAkB;AAElB,kBAAI,qBAAqB,GAAG;AACxB,yBAAS,CAAA;cACzC,OAAmC;AACH,oBAAI,aAAa,CAAA;AACjB,oBAAI,WAAW;AACf,yBAAS,IAAI,OAAO,SAAS,GAAG,KAAK,GAAG,KAAK;AACzC,wBAAM,QAAQ,OAAO,CAAC;AACtB,8BAAY,MAAM;AAClB,6BAAW,QAAQ,KAAK;AACxB,sBAAI,YAAY;AAAkB;gBACtE;AACgC,yBAAS;cACzC;YACA;UACA;AAEoB,cAAI,cAAc;AACd,uCAA2B,mBAAmB;UACtE;QACA;MAEA;AACY,UAAI;AAAY,mBAAW,SAAS,cAAc,aAAa,WAAW;IACtF;AAEQ,WAAO,kBAAkB,UAAU,iBAAiB,CAAC,cAAc,EAAE,KAAK,CAAC,gBAAgB;AACvF,UAAI;AAAY,mBAAW,GAAG,MAAM,aAAa,UAAU;AAC3D,YAAM,cAAc,iBAAiB,oBACjB,WAAU;QAAiB;QAAa;QAAc;QAAkB;QAC7C;QAAa;QAAa;QAAW;MAAU;AAC9F,aAAO,YAAY,KAAK,CAAC,gBAAgB;AACrC,YAAI;AAAY,qBAAW,KAAK,QAAQ,aAAa,IAAI;AACzD,eAAO;MACvB,CAAa;IACb,CAAS;EACT;EAEI,OAAO,iBAAiB,aAAa,cAAc,kBAAkB,8BAA8B,GAC3E,aAAa,aAAa,WAAW,YAAY;AACrE,WAAO,eAAe,MAAM;AACxB,aAAO,UAAU,8BAA8B,aAAa,2BAA2B;IACnG,CAAS,EACA,KAAK,CAAC,eAAe;AAClB,YAAM,uBAAuB,qBAAqB;QAAqB;QAAc;QAAkB;QAChC;QAAa;QAAW;MAAU;AACzG,aAAO,qBAAqB,mCAAmC,UAAU;IACrF,CAAS;EACT;AACA;ACnNO,IAAM,eAAN,MAAM,aAAY;EAQrB,OAAO,sCAAsC,WAAW,SAAS,YAAY,YAAY,UAAU,UAAU;AAEzG,UAAM,oBAAoB,YAAY,kBAAkB,CAAC,EAAE;AAC3D,UAAM,mBAAmB,YAAY,kBAAkB,CAAC,EAAE;AAC1D,UAAM,sBAAsB,YAAY,kBAAkB,CAAC,EAAE;AAC7D,UAAM,mBAAmB,YAAY,kBAAkB,CAAC,EAAE,0BAA0B,CAAC,EAAE;AAEvF,aAAS,IAAI,WAAW,KAAK,SAAS,KAAK;AACvC,YAAM,SAAS,IAAI,aAAY,eAAe;AAC9C,YAAM,WAAW,IAAI,aAAa,YAAY,QAAQ,CAAC;AACvD,YAAM,UAAU,IAAI,aAAa,YAAY,SAAS,aAAY,iBAAiB,CAAC;AACpF,YAAM,UAAU,IAAI,WAAW,YAAY,SAAS,aAAY,kBAAkB,aAAY,gBAAgB,CAAC;AAC/G,YAAM,aAAa,IAAI,WAAW,YAAY,SAAS,aAAY,kBAAkB,aAAY,iBAC/D,aAAY,mBAAmB,CAAC;AAElE,YAAM,OAAO,IAAU;SAAY,WAAW,CAAC,IAAI,OAAO;SAAM,WAAW,CAAC,IAAI,OAAO;SACpD,WAAW,CAAC,IAAI,OAAO;SAAM,WAAW,CAAC,IAAI,OAAO;MAAG;AAC1F,WAAK,UAAS;AAEd,YAAM,UAAU,IAAI,mBAAmB;AACvC,YAAM,YAAY,IAAI,aAAa,UAAU,SAAS,CAAC;AACvD,YAAM,WAAW,IAAI,aAAa,UAAU,UAAU,mBAAmB,CAAC;AAC1E,YAAM,cAAc,IAAI,aAAa,UAAU,UAAU,oBAAoB,kBAAkB,CAAC;AAChG,YAAM,WAAW,IAAI,WAAW,UAAU,UAAU,oBAAoB,mBAAmB,qBAAqB,CAAC;AAEjH,gBAAU,CAAC,IAAI,SAAS,CAAC;AACzB,gBAAU,CAAC,IAAI,SAAS,CAAC;AACzB,gBAAU,CAAC,IAAI,SAAS,CAAC;AAEzB,eAAS,CAAC,IAAI,QAAQ,CAAC;AACvB,eAAS,CAAC,IAAI,QAAQ,CAAC;AACvB,eAAS,CAAC,IAAI,QAAQ,CAAC;AAEvB,kBAAY,CAAC,IAAI,KAAK;AACtB,kBAAY,CAAC,IAAI,KAAK;AACtB,kBAAY,CAAC,IAAI,KAAK;AACtB,kBAAY,CAAC,IAAI,KAAK;AAEtB,eAAS,CAAC,IAAI,QAAQ,CAAC;AACvB,eAAS,CAAC,IAAI,QAAQ,CAAC;AACvB,eAAS,CAAC,IAAI,QAAQ,CAAC;AACvB,eAAS,CAAC,IAAI,QAAQ,CAAC;IACnC;EACA;EAEI,OAAO,2CAA2C,UAAU;AAOxD,UAAM,aAAa,SAAS,aAAa,aAAY;AAErD,UAAM,aAAa,IAAI,uBAAsB;AAE7C,aAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACjC,YAAM,SAAS,IAAI,aAAY;AAC/B,YAAM,WAAW,IAAI,aAAa,UAAU,QAAQ,CAAC;AACrD,YAAM,UAAU,IAAI,aAAa,UAAU,SAAS,aAAY,iBAAiB,CAAC;AAClF,YAAM,UAAU,IAAI,WAAW,UAAU,SAAS,aAAY,kBAAkB,aAAY,gBAAgB,CAAC;AAC7G,YAAM,aAAa,IAAI,WAAW,UAAU,SAAS,aAAY,kBAC/B,aAAY,iBAAiB,aAAY,gBAAgB,CAAC;AAE5F,YAAM,OAAO,IAAU;SAAY,WAAW,CAAC,IAAI,OAAO;SAAM,WAAW,CAAC,IAAI,OAAO;SACpD,WAAW,CAAC,IAAI,OAAO;SAAM,WAAW,CAAC,IAAI,OAAO;MAAG;AAC1F,WAAK,UAAS;AAEd,iBAAW;QAAsB,SAAS,CAAC;QAAG,SAAS,CAAC;QAAG,SAAS,CAAC;QAAG,QAAQ,CAAC;QAAG,QAAQ,CAAC;QAAG,QAAQ,CAAC;QACxE,KAAK;QAAG,KAAK;QAAG,KAAK;QAAG,KAAK;QAAG,QAAQ,CAAC;QAAG,QAAQ,CAAC;QAAG,QAAQ,CAAC;QAAG,QAAQ,CAAC;MAAC;IAC3H;AAEQ,WAAO;EACf;AAEA;AAjFI,cAFS,cAEF,gBAAe;AACtB,cAHS,cAGF,mBAAkB;AACzB,cAJS,cAIF,kBAAiB;AACxB,cALS,cAKF,qBAAoB;AAC3B,cANS,cAMF,kBAAiB;AANrB,IAAM,cAAN;ACIA,IAAM,cAAN,MAAM,aAAY;EAErB,OAAO,YAAY,UAAU,YAAY,gBAAgB,2BAA2B,cAAc,kBAC/E,mBAAmB,aAAa,aAAa,WAAW,YAAY;AAEnF,UAAM,uBAAuB,YAAY,kBAAkB,YAAY;AACvE,UAAM,yBAAyB,UAAU;AACzC,UAAM,eAAe;AAErB,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI,gBAAgB;AACpB,QAAI,aAAa;AAEjB,QAAI;AACJ,QAAI,oBAAoB,IAAI,QAAQ,CAAC,YAAY;AAC7C,mCAA6B;IACzC,CAAS;AAED,QAAI,mBAAmB;AACvB,QAAI,iBAAiB;AACrB,QAAI,SAAS,CAAA;AAEb,UAAM,kBAAkB,CAAC,SAAS,YAAY,OAAO,aAAa;AAC9D,YAAM,eAAe,WAAW;AAChC,UAAI,CAAC;AAAU,yBAAiB;AAChC,UAAI,gBAAgB;AAChB,YAAI,CAAC,gBAAgB;AACjB,0BAAgB,WAAW,YAAY;AACvC,2BAAiB,IAAI,YAAY,QAAQ;AACzC,gBAAM,gBAAgB,YAAY,kBAAkB,CAAC,EAAE,0BAA0B,CAAC,EAAE;AACpF,gBAAM,uBAAuB,uBAAuB,gBAAgB;AACpE,4BAAkB,IAAI,YAAY,oBAAoB;AACtD,sBAAY,oBAAoB;YAC5B,cAAc,YAAY;YAC1B,cAAc,YAAY;YAC1B,iBAAiB;YACjB;YACA;YACA;YACA,kBAAkB;YAClB,aAAa,IAAU,QAAO;UACtD,GAAuB,eAAe;QACtC;AAEgB,YAAI,OAAO;AACP,iBAAO,KAAK,KAAK;AACjB,cAAI,WAAW,gBAAgB,gBAAgB,MAAM,UAAU,EAAE,IAAI,IAAI,WAAW,KAAK,CAAC;AAC1F,4BAAkB,MAAM;AAExB,gBAAM,8BAA8B,iBAAiB;AACrD,cAAI,8BAA8B,0BAA0B,cAAc;AACtE,kBAAM,gBAAgB,eAAe,8BAA8B;AACnE,kBAAM,kBAAkB,gBAAgB,YAAY;AACpD,kBAAM,gBAAgB,aAAa;AACnC,wBAAY;cAAsC;cAAY,gBAAgB;cAAG;cAAgB;cAC/C;cAAiB;YAAoB;AACvF,yBAAa;AACb,gBAAI,CAAC,mBAAmB;AACpB,0BAAY,2BAA2B;gBACnC;gBACA;gBACA,YAAY;gBACZ,aAAa;gBACb,iBAAiB;gBACjB,uBAAuB;gBACvB,kBAAkB;gBAClB,iBAAiB;gBACjB,4BAA4B;cAC5D,GAA+B,GAAG,iBAAiB,YAAY,eAAe;AAClD,kCAAoB,IAAI,YAAY,iBAAiB,KAAK;YACtF;AACwB,8BAAkB,mBAAmB,GAAG,UAAU;AAClD,sCAA0B,mBAAmB,YAAY;AACzD,gCAAoB;UAC5C;QACA;AACgB,YAAI,cAAc;AACd,qCAA2B,iBAAiB;QAChE;MACA;AACY,UAAI;AAAY,mBAAW,SAAS,YAAY,aAAa,WAAW;AACxE,aAAO;IACnB;AAEQ,WAAO,kBAAkB,UAAU,iBAAiB,IAAI,EAAE,KAAK,CAAC,eAAe;AAC3E,UAAI;AAAY,mBAAW,GAAG,MAAM,aAAa,UAAU;AAC3D,YAAM,cAAc,iBAAiB,oBACjC,aAAY;QAAiB;QAAY;QAAc;QAAkB;QAC5C;QAAa;QAAa;QAAW;MAAU;AAChF,aAAO,YAAY,KAAK,CAAC,gBAAgB;AACrC,YAAI;AAAY,qBAAW,KAAK,QAAQ,aAAa,IAAI;AACzD,eAAO;MACvB,CAAa;IACb,CAAS;EACT;EAEI,OAAO,iBAAiB,eAAe,cAAc,kBAAkB,mBAC/C,aAAa,aAAa,WAAW,YAAY;AACrE,WAAO,eAAe,MAAM;AACxB,YAAM,aAAa,YAAY,2CAA2C,aAAa;AACvF,UAAI,mBAAmB;AACnB,cAAM,uBAAuB,qBAAqB;UAAqB;UAAc;UACd;UAAa;UAAa;UAC1B;QAAU;AACjF,eAAO,qBAAqB,mCAAmC,UAAU;MACzF,OAAmB;AACH,eAAO,YAAY,oCAAoC,CAAC,UAAU,GAAG,cAAc,GAAG,IAAU,QAAO,CAAE;MACzH;IACA,CAAS;EACT;AAEA;ACpHO,IAAM,gBAAN,MAAM,cAAa;EAEvB,OAAO,aAAa,QAAQ;AACvB,UAAM,kBAAkB,YAAY;AACpC,UAAM,kBAAkB,YAAY;AACpC,UAAM,SAAS,YAAY,YAAY,MAAM;AAC7C,QAAI,OAAO,iBAAiB,mBACxB,OAAO,gBAAgB,mBACvB,OAAO,eAAe,iBAAiB;AACxC,aAAO;IAClB,OAAe;AACH,YAAM,IAAI,MAAM,kCAAkC,OAAO,YAAY,IAAI,OAAO,YAAY,wBACtD,eAAe,IAAI,eAAe,EAAE;IACtF;EACA;EAEI,OAAO,YAAY,UAAU,YAAY,gBAAgB,gBAAgB;AACrE,QAAI;AACJ,QAAI;AAEJ,QAAI;AACJ,QAAI;AACJ,QAAI,eAAe;AACnB,QAAI,gBAAgB;AAEpB,QAAI;AACJ,QAAI,iBAAiB,CAAA;AACrB,QAAI,uBAAuB;AAC3B,QAAI,wBAAwB;AAE5B,QAAI,iBAAiB;AACrB,QAAI,mBAAmB;AACvB,QAAI,yBAAyB,UAAU;AACvC,QAAI,uBAAuB;AAE3B,QAAI,eAAe;AAEnB,QAAI,SAAS,CAAA;AAEb,QAAI;AACJ,QAAI,oBAAoB,IAAI,QAAQ,CAAC,YAAY;AAC7C,mCAA6B;IACzC,CAAS;AAED,UAAM,qBAAqB,MAAM;AAC7B,UAAI,CAAC,gBAAgB,CAAC,iBAAiB,kBAAkB,YAAY,iBAAiB;AAClF,wBAAgB;AAChB,cAAM,wBAAwB,IAAI,KAAK,MAAM,EAAE,YAAW;AAC1D,8BAAsB,KAAK,CAAC,eAAe;AACvC,yBAAe,IAAI,YAAY,YAAY,eAAe;AAC1D,cAAI,WAAW,YAAY,EAAE,IAAI,IAAI,WAAW,YAAY,GAAG,YAAY,eAAe,CAAC;AAC3F,wBAAa,aAAa,YAAY;AACtC,0BAAgB;AAChB,yBAAe;AACf,mBAAS,YAAY,YAAY,YAAY;AAC7C,iBAAO,WAAW,MAAM;AACpB,uCAA0B;UAClD,GAAuB,CAAC;QACxB,CAAiB;MACjB;IACA;AAEQ,QAAI,kCAAkC;AACtC,UAAM,4BAA4B,MAAM;AACpC,UAAI,oCAAoC,GAAG;AACvC;AACA,eAAO,WAAW,MAAM;AACpB;AACA,+BAAqB,IAAI;QAC7C,GAAmB,CAAC;MACpB;IACA;AAEQ,UAAM,6BAA6B,MAAM;AACrC,YAAM,cAAc,MAAM;AACtB,gCAAwB;AACxB,cAAM,gCAAgC,IAAI,KAAK,MAAM,EAAE,YAAW;AAClE,sCAA8B,KAAK,CAAC,eAAe;AAC/C,kCAAwB;AACxB,iCAAuB;AACvB,iCAAuB,IAAI,YAAY,OAAO,kBAAkB,YAAY,sBAAsB;AAClG,cAAI,WAAW,oBAAoB,EAAE,IAAI,IAAI;YAAW;YAAY,YAAY;YACxB,OAAO,kBAAkB,YAAY;UAAsB,CAAC;AACpH,2BAAiB,YAAY,oBAAoB,QAAQ,sBAAsB,GAAG,KAAK;AACvF,cAAI,iCAAiC;AACrC,mBAAS,IAAI,GAAG,IAAI,OAAO,iBAAiB,KAAK;AAC7C,8CAAkC,eAAe,CAAC,EAAE;UAC5E;AACoB,gBAAM,wBAAwB,YAAY,kBAAkB,OAAO,kBACrC,YAAY,yBAAyB;AACnE,cAAI,CAAC,cAAc;AACf,2BAAe,IAAI,YAAY,qBAAqB;AACpD,gBAAI,SAAS;AACb,qBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,oBAAM,QAAQ,OAAO,CAAC;AACtB,kBAAI,WAAW,cAAc,QAAQ,MAAM,UAAU,EAAE,IAAI,IAAI,WAAW,KAAK,CAAC;AAChF,wBAAU,MAAM;YAC5C;UACA;AAEoB,iCAAuB,YAAY,kBAAkB,YAAY,yBAAyB,OAAO;AACjG,mBAAS,IAAI,GAAG,KAAK,eAAe,UAAU,IAAI,OAAO,iBAAiB,KAAK;AAC3E,oCAAwB,eAAe,CAAC,EAAE;UAClE;AAEoB,oCAAyB;QAC7C,CAAiB;MACjB;AAEY,UAAI,CAAC,yBAAyB,CAAC,wBAAwB,gBACnD,kBAAkB,YAAY,kBAAkB,YAAY,yBAAyB,OAAO,iBAAiB;AAC7G,oBAAW;MAC3B;IACA;AAEQ,UAAM,uBAAuB,MAAM;AAC/B,UAAI,sBAAsB;AAEtB,YAAI;AAAc;AAElB,uBAAe,kBAAkB;AAEjC,cAAM,8BAA8B,iBAAiB;AACrD,YAAI,8BAA8B,0BAA0B,cAAc;AAEtE,6BAAmB;AAEnB,cAAI,CAAC;AAAmB,gCAAoB,IAAI,YAAY,cAAc,KAAK;AAE/E,gBAAM,iBAAiB,YAAY,kBAAkB,YAAY,yBAAyB,OAAO;AACjG,cAAI,cAAc;AAClB,cAAI,kBAAkB;AACtB,cAAI,mBAAmB;AACvB,mBAAS,IAAI,GAAG,IAAI,OAAO,iBAAiB,KAAK;AAC7C,kBAAM,gBAAgB,eAAe,CAAC;AACtC,kBAAM,oBAAoB,cAAc,cAAc,6BAA6B,IACzD,cAAc,yBAAyB,cAAc;AAC/E,kBAAM,uCAAuC,iBAAiB;AAC9D,gBAAI,kBAAkB,sCAAsC;AACxD;AACA,oBAAM,kCAAkC,iBAAiB;AACzD,oBAAM,iBAAiB,YAAY,kBAAkB,OAAO,gBAAgB;AAC5E,oBAAM,SAAS,eAAe,0BAA0B,cAAc,wBAAwB;AAC9F,oBAAM,gBAAgB,OAAO;AAC7B,kBAAI,yBAAyB,KAAK,MAAM,kCAAkC,aAAa;AACvF,uCAAyB,KAAK,IAAI,wBAAwB,cAAc,aAAa;AACrF,kCAAoB;AACpB,gCAAkB,mBAAmB,iBAAiB,gBAAgB;AACtE,gCAAkB,0BAA0B,GAAG,sBAAsB;YACjG,OAA+B;AACH;YAC5B;AACwB,2BAAe,cAAc;UACrD;AAEoB,yBAAe,mBAAmB,YAAY;AAE9C,cAAI,cAAc;AACd,uCAA2B,iBAAiB;UACpE;QACA;MACA;IACA;AAEQ,UAAM,kBAAkB,CAAC,SAAS,YAAY,UAAU;AACpD,UAAI,OAAO;AACP,eAAO,KAAK,KAAK;AACjB,YAAI,cAAc;AACd,cAAI,WAAW,cAAc,gBAAgB,MAAM,UAAU,EAAE,IAAI,IAAI,WAAW,KAAK,CAAC;QAC5G;AACgB,0BAAkB,MAAM;MACxC;AACY,UAAI,gBAAgB;AAChB,2BAAkB;AAClB,mCAA0B;AAC1B,6BAAoB;MACpC;AACY,UAAI;AAAY,mBAAW,SAAS,YAAY,aAAa,WAAW;IACpF;AAEQ,WAAO,kBAAkB,UAAU,iBAAiB,CAAC,cAAc,EAAE,KAAK,CAAC,eAAe;AACtF,UAAI;AAAY,mBAAW,GAAG,MAAM,aAAa,UAAU;AAC3D,YAAM,cAAc,iBAAiB,oBAAoB,cAAa,iBAAiB,UAAU;AACjG,aAAO,YAAY,KAAK,CAAC,gBAAgB;AACrC,YAAI;AAAY,qBAAW,KAAK,QAAQ,aAAa,IAAI;AACzD,eAAO;MACvB,CAAa;IACb,CAAS;EACT;EAEI,OAAO,iBAAiB,UAAU;AAC9B,WAAO,eAAe,MAAM;AACxB,oBAAa,aAAa,QAAQ;AAClC,aAAO,IAAI,YAAY,QAAQ;IAC3C,CAAS;EACT;AAsBA;AApBI,cArMS,eAqMF,gBAAe,2BAAW;AAE7B,MAAI;AAEJ,SAAO,SAAS,aAAa,UAAU;AACnC,UAAM,OAAO,IAAI,KAAK,CAAC,YAAY,UAAU,GAAG;MAC5C,MAAM;IACtB,CAAa;AAED,QAAI,CAAC,cAAc;AACf,qBAAe,SAAS,cAAc,GAAG;AACzC,eAAS,KAAK,YAAY,YAAY;IACtD;AACY,iBAAa,WAAW;AACxB,iBAAa,OAAO,IAAI,gBAAgB,IAAI;AAC5C,iBAAa,MAAK;EAC9B;AAEA,EAAK;AAvNE,IAAM,eAAN;ACLK,IAAC,cAAc;EACvB,SAAS;EACT,UAAU;EACV,OAAO;AACX;ACFO,IAAM,sBAAsB,CAAC,SAAS;AACzC,MAAI,KAAK,SAAS,MAAM;AAAG,WAAO,YAAY;WACrC,KAAK,SAAS,QAAQ;AAAG,WAAO,YAAY;WAC5C,KAAK,SAAS,SAAS;AAAG,WAAO,YAAY;AACtD,SAAO;AACX;;;;;AC2BA,IAAM,eAAe,EAAE,MAAM,SAAQ;AACrC,IAAM,cAAc,EAAE,MAAM,QAAO;AACnC,IAAM,YAAY,EAAE,MAAM,MAAK;AAC/B,IAAM,OAAO,IAAIC,IAAG;AACpB,IAAM,SAAS,IAAI,MAAK;AACxB,IAAM,aAAa,KAAK,IAAK,KAAK,UAAU,OAAO;AAEnD,IAAM,gBAAN,cAA4B,gBAAgB;EAExC,YAAa,QAAQ,YAAa;AAE9B,UAAK;AAEL,SAAK,SAAS;AACd,SAAK,aAAa;AAClB,SAAK,WAAW,MAAM,cAAc;AAGpC,SAAK,UAAU;AAGf,SAAK,SAAS,IAAI,QAAO;AAGzB,SAAK,cAAc;AACnB,SAAK,cAAc;AAGnB,SAAK,UAAU;AACf,SAAK,UAAU;AAIf,SAAK,gBAAgB;AACrB,SAAK,gBAAgB,KAAK;AAI1B,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AAIvB,SAAK,gBAAgB;AACrB,SAAK,gBAAgB;AAIrB,SAAK,aAAa;AAClB,SAAK,YAAY;AAGjB,SAAK,eAAe;AACpB,SAAK,cAAc;AAGnB,SAAK,YAAY;AACjB,SAAK,WAAW;AAChB,SAAK,qBAAqB;AAC1B,SAAK,cAAc;AACnB,SAAK,eAAe;AAIpB,SAAK,aAAa;AAClB,SAAK,kBAAkB;AAGvB,SAAK,OAAO,EAAE,MAAM,QAAQ,IAAI,QAAQ,OAAO,QAAQ,QAAQ,OAAM;AAGrE,SAAK,eAAe,EAAE,MAAM,MAAM,QAAQ,QAAQ,MAAM,OAAO,OAAO,MAAM,IAAG;AAG/E,SAAK,UAAU,EAAE,KAAK,MAAM,QAAQ,KAAK,MAAM,UAAS;AAGxD,SAAK,UAAU,KAAK,OAAO,MAAK;AAChC,SAAK,YAAY,KAAK,OAAO,SAAS,MAAK;AAC3C,SAAK,QAAQ,KAAK,OAAO;AAGzB,SAAK,uBAAuB;AAM5B,SAAK,gBAAgB,WAAW;AAE5B,aAAO,UAAU;IAE7B;AAEQ,SAAK,oBAAoB,WAAW;AAEhC,aAAO,UAAU;IAE7B;AAEQ,SAAK,cAAc,WAAW;AAE1B,aAAO,KAAK,OAAO,SAAS,WAAY,KAAK,MAAM;IAE/D;AAEQ,SAAK,oBAAoB,SAAUC,aAAa;AAE5C,MAAAA,YAAW,iBAAkB,WAAW,SAAS;AACjD,WAAK,uBAAuBA;IAExC;AAEQ,SAAK,wBAAwB,WAAW;AAEpC,WAAK,qBAAqB,oBAAqB,WAAW,SAAS;AACnE,WAAK,uBAAuB;IAExC;AAEQ,SAAK,YAAY,WAAW;AAExB,YAAM,QAAQ,KAAM,MAAM,MAAM;AAChC,YAAM,UAAU,KAAM,MAAM,OAAO,QAAQ;AAC3C,YAAM,QAAQ,MAAM,OAAO;IAEvC;AAEQ,SAAK,QAAQ,WAAW;AAEpB,YAAM,OAAO,KAAM,MAAM,OAAO;AAChC,YAAM,OAAO,SAAS,KAAM,MAAM,SAAS;AAC3C,YAAM,OAAO,OAAO,MAAM;AAC1B,WAAK,oBAAmB;AACxB,WAAK,eAAc;AAEnB,YAAM,OAAO,uBAAsB;AACnC,YAAM,cAAe,YAAY;AAEjC,YAAM,OAAM;AAEZ,cAAQ,MAAM;IAE1B;AAEQ,SAAK,sBAAsB,WAAW;AAClC,qBAAe,QAAQ;AACvB,qBAAe,MAAM;IACjC;AAEQ,SAAK,iBAAiB,WAAW;AAC7B,gBAAU,IAAI,GAAG,GAAG,CAAC;IACjC;AAGQ,SAAK,SAAS,WAAW;AAErB,YAAM,SAAS,IAAI,QAAO;AAG1B,YAAM,OAAO,IAAI,WAAU,EAAG,mBAAoB,OAAO,IAAI,IAAI,QAAS,GAAG,GAAG,CAAC,CAAE;AACnF,YAAM,cAAc,KAAK,MAAK,EAAG,OAAM;AAEvC,YAAM,eAAe,IAAI,QAAO;AAChC,YAAM,iBAAiB,IAAI,WAAU;AACrC,YAAM,qBAAqB,IAAI,QAAO;AAEtC,YAAM,QAAQ,IAAI,KAAK;AAEvB,aAAO,SAAS,SAAS;AAErB,aAAK,mBAAoB,OAAO,IAAI,IAAI,QAAS,GAAG,GAAG,CAAC,CAAE;AAC1D,oBAAY,KAAK,IAAI,EAAE,OAAM;AAE7B,cAAM,WAAW,MAAM,OAAO;AAE9B,eAAO,KAAM,QAAQ,EAAG,IAAK,MAAM,MAAM;AAGzC,eAAO,gBAAiB,IAAI;AAG5B,kBAAU,eAAgB,MAAM;AAEhC,YAAK,MAAM,cAAc,UAAU,MAAM,MAAO;AAE5C,qBAAY,qBAAoB,CAAE;QAEtD;AAEgB,YAAK,MAAM,eAAgB;AAEvB,oBAAU,SAAS,eAAe,QAAQ,MAAM;AAChD,oBAAU,OAAO,eAAe,MAAM,MAAM;QAEhE,OAAuB;AAEH,oBAAU,SAAS,eAAe;AAClC,oBAAU,OAAO,eAAe;QAEpD;AAIgB,YAAI,MAAM,MAAM;AAChB,YAAI,MAAM,MAAM;AAEhB,YAAK,SAAU,GAAG,KAAM,SAAU,GAAG,GAAK;AAEtC,cAAK,MAAM,CAAE,KAAK;AAAK,mBAAO;mBAAiB,MAAM,KAAK;AAAK,mBAAO;AAEtE,cAAK,MAAM,CAAE,KAAK;AAAK,mBAAO;mBAAiB,MAAM,KAAK;AAAK,mBAAO;AAEtE,cAAK,OAAO,KAAM;AAEd,sBAAU,QAAQ,KAAK,IAAK,KAAK,KAAK,IAAK,KAAK,UAAU,KAAK,CAAE;UAEzF,OAA2B;AAEH,sBAAU,QAAU,UAAU,SAAU,MAAM,OAAQ,IAClD,KAAK,IAAK,KAAK,UAAU,KAAK,IAC9B,KAAK,IAAK,KAAK,UAAU,KAAK;UAE1D;QAEA;AAGgB,kBAAU,MAAM,KAAK,IAAK,MAAM,eAAe,KAAK,IAAK,MAAM,eAAe,UAAU,GAAG,CAAE;AAE7F,kBAAU,SAAQ;AAKlB,YAAK,MAAM,kBAAkB,MAAO;AAEhC,gBAAM,OAAO,gBAAiB,WAAW,MAAM,aAAa;QAEhF,OAAuB;AAEH,gBAAM,OAAO,IAAK,SAAS;QAE/C;AAIgB,YAAK,MAAM,gBAAgB,qBAAqB,MAAM,OAAO,sBAAuB;AAEhF,oBAAU,SAAS,cAAe,UAAU,MAAM;QAEtE,OAAuB;AAEH,oBAAU,SAAS,cAAe,UAAU,SAAS,KAAK;QAE9E;AAGgB,eAAO,iBAAkB,SAAS;AAGlC,eAAO,gBAAiB,WAAW;AAEnC,iBAAS,KAAM,MAAM,MAAM,EAAG,IAAK,MAAM;AAEzC,cAAM,OAAO,OAAQ,MAAM,MAAM;AAEjC,YAAK,MAAM,kBAAkB,MAAO;AAEhC,yBAAe,SAAW,IAAI,MAAM;AACpC,yBAAe,OAAS,IAAI,MAAM;AAElC,oBAAU,eAAgB,IAAI,MAAM,aAAa;QAErE,OAAuB;AAEH,yBAAe,IAAK,GAAG,GAAG,CAAC;AAE3B,oBAAU,IAAK,GAAG,GAAG,CAAC;QAE1C;AAGgB,YAAI,cAAc;AAClB,YAAK,MAAM,gBAAgB,mBAAoB;AAE3C,cAAI,YAAY;AAChB,cAAK,MAAM,OAAO,qBAAsB;AAIpC,kBAAM,aAAa,OAAO,OAAM;AAChC,wBAAY,cAAe,aAAa,KAAK;AAE7C,kBAAM,cAAc,aAAa;AACjC,kBAAM,OAAO,SAAS,gBAAiB,gBAAgB,WAAW;AAClE,kBAAM,OAAO,kBAAiB;UAEtD,WAAgC,MAAM,OAAO,sBAAuB;AAG5C,kBAAM,cAAc,IAAI,QAAS,MAAM,GAAG,MAAM,GAAG,CAAC;AACpD,wBAAY,UAAW,MAAM,MAAM;AAEnC,kBAAM,OAAO,OAAO,KAAK,IAAK,MAAM,SAAS,KAAK,IAAK,MAAM,SAAS,MAAM,OAAO,OAAO,KAAK,CAAE;AACjG,kBAAM,OAAO,uBAAsB;AACnC,0BAAc;AAEd,kBAAM,aAAa,IAAI,QAAS,MAAM,GAAG,MAAM,GAAG,CAAC;AACnD,uBAAW,UAAW,MAAM,MAAM;AAElC,kBAAM,OAAO,SAAS,IAAK,UAAU,EAAG,IAAK,WAAW;AACxD,kBAAM,OAAO,kBAAiB;AAE9B,wBAAY,OAAO,OAAM;UAEjD,OAA2B;AAEH,oBAAQ,KAAM,yFAAyF;AACvG,kBAAM,eAAe;UAE7C;AAGoB,cAAK,cAAc,MAAO;AAEtB,gBAAK,KAAK,oBAAqB;AAG3B,oBAAM,OAAO,IAAK,GAAG,GAAG,EAAG,EACtB,mBAAoB,MAAM,OAAO,MAAM,EACvC,eAAgB,SAAS,EACzB,IAAK,MAAM,OAAO,QAAQ;YAE3D,OAA+B;AAGH,mBAAK,OAAO,KAAM,MAAM,OAAO,QAAQ;AACvC,mBAAK,UAAU,IAAK,GAAG,GAAG,EAAG,EAAG,mBAAoB,MAAM,OAAO,MAAM;AAIvE,kBAAK,KAAK,IAAK,MAAM,OAAO,GAAG,IAAK,KAAK,SAAS,CAAE,IAAK,YAAa;AAElE,uBAAO,OAAQ,MAAM,MAAM;cAE3D,OAAmC;AAEH,uBAAO,8BAA+B,MAAM,OAAO,IAAI,MAAM,MAAM;AACnE,qBAAK,eAAgB,QAAQ,MAAM,MAAM;cAEzE;YAEA;UAEA;QAEA,WAA4B,MAAM,OAAO,sBAAuB;AAE5C,gBAAM,OAAO,OAAO,KAAK,IAAK,MAAM,SAAS,KAAK,IAAK,MAAM,SAAS,MAAM,OAAO,OAAO,KAAK,CAAE;AACjG,gBAAM,OAAO,uBAAsB;AACnC,wBAAc;QAElC;AAEgB,gBAAQ;AACR,4BAAoB;AAMpB,YAAK,eACD,aAAa,kBAAmB,MAAM,OAAO,QAAQ,IAAK,OAC1D,KAAM,IAAI,eAAe,IAAK,MAAM,OAAO,UAAU,KAAO,OAC5D,mBAAmB,kBAAmB,MAAM,MAAM,IAAK,GAAI;AAE3D,gBAAM,cAAe,YAAY;AAEjC,uBAAa,KAAM,MAAM,OAAO,QAAQ;AACxC,yBAAe,KAAM,MAAM,OAAO,UAAU;AAC5C,6BAAmB,KAAM,MAAM,MAAM;AAErC,wBAAc;AAEd,iBAAO;QAE3B;AAEgB,eAAO;MAEvB;IAEA,EAAS;AAED,SAAK,UAAU,WAAW;AAEtB,YAAM,WAAW,oBAAqB,eAAe,aAAa;AAElE,YAAM,WAAW,oBAAqB,eAAe,aAAa;AAClE,YAAM,WAAW,oBAAqB,iBAAiB,WAAW;AAClE,YAAM,WAAW,oBAAqB,SAAS,YAAY;AAE3D,YAAM,WAAW,oBAAqB,eAAe,aAAa;AAClE,YAAM,WAAW,oBAAqB,aAAa,WAAW;AAG9D,UAAK,MAAM,yBAAyB,MAAO;AAEvC,cAAM,qBAAqB,oBAAqB,WAAW,SAAS;AACpE,cAAM,uBAAuB;MAE7C;IAEA;AAMQ,UAAM,QAAQ;AAEd,UAAM,QAAQ;MACV,MAAM;MACN,QAAQ;MACR,OAAO;MACP,KAAK;MACL,cAAc;MACd,WAAW;MACX,iBAAiB;MACjB,oBAAoB;IAChC;AAEQ,QAAI,QAAQ,MAAM;AAElB,UAAM,MAAM;AAGZ,UAAM,YAAY,IAAI,UAAS;AAC/B,UAAM,iBAAiB,IAAI,UAAS;AAEpC,QAAI,QAAQ;AACZ,UAAM,YAAY,IAAI,QAAO;AAE7B,UAAM,cAAc,IAAI,QAAO;AAC/B,UAAM,YAAY,IAAI,QAAO;AAC7B,UAAM,cAAc,IAAI,QAAO;AAE/B,UAAM,WAAW,IAAI,QAAO;AAC5B,UAAM,SAAS,IAAI,QAAO;AAC1B,UAAM,WAAW,IAAI,QAAO;AAE5B,UAAM,aAAa,IAAI,QAAO;AAC9B,UAAM,WAAW,IAAI,QAAO;AAC5B,UAAM,aAAa,IAAI,QAAO;AAE9B,UAAM,iBAAiB,IAAI,QAAO;AAClC,UAAM,QAAQ,IAAI,QAAO;AACzB,QAAI,oBAAoB;AAExB,UAAM,WAAW,CAAA;AACjB,UAAM,mBAAmB,CAAA;AAEzB,aAAS,uBAAuB;AAE5B,aAAO,IAAI,KAAK,KAAK,KAAK,KAAK,MAAM;IAEjD;AAEQ,aAAS,eAAe;AAEpB,aAAO,KAAK,IAAK,MAAM,MAAM,SAAS;IAElD;AAEQ,aAAS,WAAY,OAAQ;AAEzB,qBAAe,SAAS;IAEpC;AAEQ,aAAS,SAAU,OAAQ;AAEvB,qBAAe,OAAO;IAElC;AAEQ,UAAM,UAAU,WAAW;AAEvB,YAAM,IAAI,IAAI,QAAO;AAErB,aAAO,SAASC,SAAS,UAAU,cAAe;AAE9C,UAAE,oBAAqB,cAAc,CAAC;AACtC,UAAE,eAAgB,CAAE,QAAQ;AAE5B,kBAAU,IAAK,CAAC;MAEhC;IAEA,EAAS;AAED,UAAM,QAAQ,WAAW;AAErB,YAAM,IAAI,IAAI,QAAO;AAErB,aAAO,SAASC,OAAO,UAAU,cAAe;AAE5C,YAAK,MAAM,uBAAuB,MAAO;AAErC,YAAE,oBAAqB,cAAc,CAAC;QAE1D,OAAuB;AAEH,YAAE,oBAAqB,cAAc,CAAC;AACtC,YAAE,aAAc,MAAM,OAAO,IAAI,CAAC;QAEtD;AAEgB,UAAE,eAAgB,QAAQ;AAE1B,kBAAU,IAAK,CAAC;MAEhC;IAEA,EAAS;AAGD,UAAM,MAAM,WAAW;AAEnB,YAAM,SAAS,IAAI,QAAO;AAE1B,aAAO,SAASC,KAAK,QAAQ,QAAS;AAElC,cAAM,UAAU,MAAM;AAEtB,YAAK,MAAM,OAAO,qBAAsB;AAGpC,gBAAM,WAAW,MAAM,OAAO;AAC9B,iBAAO,KAAM,QAAQ,EAAG,IAAK,MAAM,MAAM;AACzC,cAAI,iBAAiB,OAAO,OAAM;AAGlC,4BAAkB,KAAK,IAAO,MAAM,OAAO,MAAM,IAAM,KAAK,KAAK,GAAK;AAGtE,kBAAS,IAAI,SAAS,iBAAiB,QAAQ,cAAc,MAAM,OAAO,MAAM;AAChF,gBAAO,IAAI,SAAS,iBAAiB,QAAQ,cAAc,MAAM,OAAO,MAAM;QAElG,WAA4B,MAAM,OAAO,sBAAuB;AAG5C,kBAAS,UAAW,MAAM,OAAO,QAAQ,MAAM,OAAO,QAClC,MAAM,OAAO,OAAO,QAAQ,aAAa,MAAM,OAAO,MAAM;AAChF,gBAAO,UAAW,MAAM,OAAO,MAAM,MAAM,OAAO,UAAW,MAAM,OAAO,OACxD,QAAQ,cAAc,MAAM,OAAO,MAAM;QAE/E,OAAuB;AAGH,kBAAQ,KAAM,8EAA8E;AAC5F,gBAAM,YAAY;QAEtC;MAEA;IAEA,EAAS;AAED,aAAS,SAAU,YAAa;AAE5B,UAAK,MAAM,OAAO,uBAAuB,MAAM,OAAO,sBAAuB;AAEzE,iBAAS;MAEzB,OAAmB;AAEH,gBAAQ,KAAM,qFAAqF;AACnG,cAAM,aAAa;MAEnC;IAEA;AAEQ,aAAS,QAAS,YAAa;AAE3B,UAAK,MAAM,OAAO,uBAAuB,MAAM,OAAO,sBAAuB;AAEzE,iBAAS;MAEzB,OAAmB;AAEH,gBAAQ,KAAM,qFAAqF;AACnG,cAAM,aAAa;MAEnC;IAEA;AAEQ,aAAS,sBAAuB,OAAQ;AAEpC,UAAK,CAAE,MAAM,cAAe;AAExB;MAEhB;AAEY,0BAAoB;AAEpB,YAAM,OAAO,MAAM,WAAW,sBAAqB;AACnD,YAAM,IAAI,MAAM,UAAU,KAAK;AAC/B,YAAM,IAAI,MAAM,UAAU,KAAK;AAC/B,YAAM,IAAI,KAAK;AACf,YAAM,IAAI,KAAK;AAEf,YAAM,IAAM,IAAI,IAAM,IAAI;AAC1B,YAAM,IAAI,EAAI,IAAI,KAAM,IAAI;AAE5B,qBAAe,IAAK,MAAM,GAAG,MAAM,GAAG,CAAC,EAAG,UAAW,MAAM,EAAG,IAAK,OAAO,QAAQ,EAAG,UAAS;IAE1G;AAEQ,aAAS,cAAe,MAAO;AAE3B,aAAO,KAAK,IAAK,MAAM,aAAa,KAAK,IAAK,MAAM,aAAa,IAAI,CAAE;IAEnF;AAMQ,aAAS,sBAAuB,OAAQ;AAEpC,kBAAY,IAAK,MAAM,SAAS,MAAM,OAAO;IAEzD;AAEQ,aAAS,qBAAsB,OAAQ;AAEnC,4BAAuB,KAAK;AAC5B,iBAAW,IAAK,MAAM,SAAS,MAAM,OAAO;IAExD;AAEQ,aAAS,mBAAoB,OAAQ;AAEjC,eAAS,IAAK,MAAM,SAAS,MAAM,OAAO;IAEtD;AAEQ,aAAS,sBAAuB,OAAQ;AAEpC,gBAAU,IAAK,MAAM,SAAS,MAAM,OAAO;AAE3C,kBAAY,WAAY,WAAW,WAAW,EAAG,eAAgB,MAAM,WAAW;AAElF,YAAM,UAAU,MAAM;AAEtB,iBAAY,IAAI,KAAK,KAAK,YAAY,IAAI,QAAQ,YAAY;AAE9D,eAAU,IAAI,KAAK,KAAK,YAAY,IAAI,QAAQ,YAAY;AAE5D,kBAAY,KAAM,SAAS;AAE3B,YAAM,OAAM;IAExB;AAEQ,aAAS,qBAAsB,OAAQ;AAEnC,eAAS,IAAK,MAAM,SAAS,MAAM,OAAO;AAE1C,iBAAW,WAAY,UAAU,UAAU;AAE3C,UAAK,WAAW,IAAI,GAAI;AAEpB,iBAAU,aAAY,CAAE;MAExC,WAAwB,WAAW,IAAI,GAAI;AAE3B,gBAAS,aAAY,CAAE;MAEvC;AAEY,iBAAW,KAAM,QAAQ;AAEzB,YAAM,OAAM;IAExB;AAEQ,aAAS,mBAAoB,OAAQ;AAEjC,aAAO,IAAK,MAAM,SAAS,MAAM,OAAO;AAExC,eAAS,WAAY,QAAQ,QAAQ,EAAG,eAAgB,MAAM,QAAQ;AAEtE,UAAK,SAAS,GAAG,SAAS,CAAC;AAE3B,eAAS,KAAM,MAAM;AAErB,YAAM,OAAM;IAExB;AAEQ,aAAS,iBAAkB,OAAQ;AAE/B,4BAAuB,KAAK;AAE5B,UAAK,MAAM,SAAS,GAAI;AAEpB,gBAAS,aAAY,CAAE;MAEvC,WAAwB,MAAM,SAAS,GAAI;AAE3B,iBAAU,aAAY,CAAE;MAExC;AAEY,YAAM,OAAM;IAExB;AAEQ,aAAS,cAAe,OAAQ;AAE5B,UAAI,cAAc;AAElB,cAAS,MAAM,MAAI;QAEf,KAAK,MAAM,KAAK;AAEZ,cAAK,MAAM,WAAW,MAAM,WAAW,MAAM,UAAW;AAEpD,qBAAU,IAAI,KAAK,KAAK,MAAM,cAAc,MAAM,WAAW,YAAY;UAEjG,OAA2B;AAEH,gBAAK,GAAG,MAAM,WAAW;UAEjD;AAEoB,wBAAc;AACd;QAEJ,KAAK,MAAM,KAAK;AAEZ,cAAK,MAAM,WAAW,MAAM,WAAW,MAAM,UAAW;AAEpD,qBAAU,KAAM,KAAK,KAAK,MAAM,cAAc,MAAM,WAAW,YAAY;UAEnG,OAA2B;AAEH,gBAAK,GAAG,CAAE,MAAM,WAAW;UAEnD;AAEoB,wBAAc;AACd;QAEJ,KAAK,MAAM,KAAK;AAEZ,cAAK,MAAM,WAAW,MAAM,WAAW,MAAM,UAAW;AAEpD,uBAAY,IAAI,KAAK,KAAK,MAAM,cAAc,MAAM,WAAW,YAAY;UAEnG,OAA2B;AAEH,gBAAK,MAAM,aAAa,CAAC;UAEjD;AAEoB,wBAAc;AACd;QAEJ,KAAK,MAAM,KAAK;AAEZ,cAAK,MAAM,WAAW,MAAM,WAAW,MAAM,UAAW;AAEpD,uBAAY,KAAM,KAAK,KAAK,MAAM,cAAc,MAAM,WAAW,YAAY;UAErG,OAA2B;AAEH,gBAAK,CAAE,MAAM,aAAa,CAAC;UAEnD;AAEoB,wBAAc;AACd;MAEpB;AAEY,UAAK,aAAc;AAGf,cAAM,eAAc;AAEpB,cAAM,OAAM;MAE5B;IAGA;AAEQ,aAAS,yBAAyB;AAE9B,UAAK,SAAS,WAAW,GAAI;AAEzB,oBAAY,IAAK,SAAS,CAAC,EAAE,OAAO,SAAS,CAAC,EAAE,KAAK;MAErE,OAAmB;AAEH,cAAM,IAAI,OAAQ,SAAS,CAAC,EAAE,QAAQ,SAAS,CAAC,EAAE;AAClD,cAAM,IAAI,OAAQ,SAAS,CAAC,EAAE,QAAQ,SAAS,CAAC,EAAE;AAElD,oBAAY,IAAK,GAAG,CAAC;MAErC;IAEA;AAEQ,aAAS,sBAAsB;AAE3B,UAAK,SAAS,WAAW,GAAI;AAEzB,iBAAS,IAAK,SAAS,CAAC,EAAE,OAAO,SAAS,CAAC,EAAE,KAAK;MAElE,OAAmB;AAEH,cAAM,IAAI,OAAQ,SAAS,CAAC,EAAE,QAAQ,SAAS,CAAC,EAAE;AAClD,cAAM,IAAI,OAAQ,SAAS,CAAC,EAAE,QAAQ,SAAS,CAAC,EAAE;AAElD,iBAAS,IAAK,GAAG,CAAC;MAElC;IAEA;AAEQ,aAAS,wBAAwB;AAE7B,YAAM,KAAK,SAAS,CAAC,EAAE,QAAQ,SAAS,CAAC,EAAE;AAC3C,YAAM,KAAK,SAAS,CAAC,EAAE,QAAQ,SAAS,CAAC,EAAE;AAE3C,YAAM,WAAW,KAAK,KAAM,KAAK,KAAK,KAAK,EAAE;AAE7C,iBAAW,IAAK,GAAG,QAAQ;IAEvC;AAEQ,aAAS,2BAA2B;AAEhC,UAAK,MAAM;AAAa,8BAAqB;AAE7C,UAAK,MAAM;AAAY,4BAAmB;IAEtD;AAEQ,aAAS,8BAA8B;AAEnC,UAAK,MAAM;AAAa,8BAAqB;AAE7C,UAAK,MAAM;AAAe,+BAAsB;IAE5D;AAEQ,aAAS,sBAAuB,OAAQ;AAEpC,UAAK,SAAS,UAAU,GAAI;AAExB,kBAAU,IAAK,MAAM,OAAO,MAAM,KAAK;MAEvD,OAAmB;AAEH,cAAM,WAAW,yBAA0B,KAAK;AAEhD,cAAM,IAAI,OAAQ,MAAM,QAAQ,SAAS;AACzC,cAAM,IAAI,OAAQ,MAAM,QAAQ,SAAS;AAEzC,kBAAU,IAAK,GAAG,CAAC;MAEnC;AAEY,kBAAY,WAAY,WAAW,WAAW,EAAG,eAAgB,MAAM,WAAW;AAElF,YAAM,UAAU,MAAM;AAEtB,iBAAY,IAAI,KAAK,KAAK,YAAY,IAAI,QAAQ,YAAY;AAE9D,eAAU,IAAI,KAAK,KAAK,YAAY,IAAI,QAAQ,YAAY;AAE5D,kBAAY,KAAM,SAAS;IAEvC;AAEQ,aAAS,mBAAoB,OAAQ;AAEjC,UAAK,SAAS,WAAW,GAAI;AAEzB,eAAO,IAAK,MAAM,OAAO,MAAM,KAAK;MAEpD,OAAmB;AAEH,cAAM,WAAW,yBAA0B,KAAK;AAEhD,cAAM,IAAI,OAAQ,MAAM,QAAQ,SAAS;AACzC,cAAM,IAAI,OAAQ,MAAM,QAAQ,SAAS;AAEzC,eAAO,IAAK,GAAG,CAAC;MAEhC;AAEY,eAAS,WAAY,QAAQ,QAAQ,EAAG,eAAgB,MAAM,QAAQ;AAEtE,UAAK,SAAS,GAAG,SAAS,CAAC;AAE3B,eAAS,KAAM,MAAM;IAEjC;AAEQ,aAAS,qBAAsB,OAAQ;AAEnC,YAAM,WAAW,yBAA0B,KAAK;AAEhD,YAAM,KAAK,MAAM,QAAQ,SAAS;AAClC,YAAM,KAAK,MAAM,QAAQ,SAAS;AAElC,YAAM,WAAW,KAAK,KAAM,KAAK,KAAK,KAAK,EAAE;AAE7C,eAAS,IAAK,GAAG,QAAQ;AAEzB,iBAAW,IAAK,GAAG,KAAK,IAAK,SAAS,IAAI,WAAW,GAAG,MAAM,SAAS,CAAE;AAEzE,eAAU,WAAW,CAAC;AAEtB,iBAAW,KAAM,QAAQ;IAErC;AAEQ,aAAS,wBAAyB,OAAQ;AAEtC,UAAK,MAAM;AAAa,6BAAsB,KAAK;AAEnD,UAAK,MAAM;AAAY,2BAAoB,KAAK;IAE5D;AAEQ,aAAS,2BAA4B,OAAQ;AAEzC,UAAK,MAAM;AAAa,6BAAsB,KAAK;AAEnD,UAAK,MAAM;AAAe,8BAAuB,KAAK;IAElE;AAMQ,aAAS,cAAe,OAAQ;AAE5B,UAAK,MAAM,YAAY;AAAQ;AAE/B,UAAK,SAAS,WAAW,GAAI;AAEzB,cAAM,WAAW,kBAAmB,MAAM,SAAS;AAEnD,cAAM,WAAW,iBAAkB,eAAe,aAAa;AAC/D,cAAM,WAAW,iBAAkB,aAAa,WAAW;MAE3E;AAIY,iBAAY,KAAK;AAEjB,UAAK,MAAM,gBAAgB,SAAU;AAEjC,qBAAc,KAAK;MAEnC,OAAmB;AAEH,oBAAa,KAAK;MAElC;IAEA;AAEQ,aAAS,cAAe,OAAQ;AAE5B,UAAK,MAAM,YAAY;AAAQ;AAE/B,UAAK,MAAM,gBAAgB,SAAU;AAEjC,oBAAa,KAAK;MAElC,OAAmB;AAEH,oBAAa,KAAK;MAElC;IAEA;AAEQ,aAAS,YAAa,OAAQ;AAE1B,oBAAe,KAAK;AAEpB,UAAK,SAAS,WAAW,GAAI;AAEzB,cAAM,WAAW,sBAAuB,MAAM,SAAS;AAEvD,cAAM,WAAW,oBAAqB,eAAe,aAAa;AAClE,cAAM,WAAW,oBAAqB,aAAa,WAAW;MAE9E;AAEY,YAAM,cAAe,SAAS;AAE9B,cAAQ,MAAM;IAE1B;AAEQ,aAAS,YAAa,OAAQ;AAE1B,UAAI;AAEJ,cAAS,MAAM,QAAM;QAEjB,KAAK;AAED,wBAAc,MAAM,aAAa;AACjC;QAEJ,KAAK;AAED,wBAAc,MAAM,aAAa;AACjC;QAEJ,KAAK;AAED,wBAAc,MAAM,aAAa;AACjC;QAEJ;AAEI,wBAAc;MAElC;AAEY,cAAS,aAAW;QAEhB,KAAK,MAAM;AAEP,cAAK,MAAM,eAAe;AAAQ;AAElC,+BAAsB,KAAK;AAE3B,kBAAQ,MAAM;AAEd;QAEJ,KAAK,MAAM;AAEP,cAAK,MAAM,WAAW,MAAM,WAAW,MAAM,UAAW;AAEpD,gBAAK,MAAM,cAAc;AAAQ;AAEjC,+BAAoB,KAAK;AAEzB,oBAAQ,MAAM;UAEtC,OAA2B;AAEH,gBAAK,MAAM,iBAAiB;AAAQ;AAEpC,kCAAuB,KAAK;AAE5B,oBAAQ,MAAM;UAEtC;AAEoB;QAEJ,KAAK,MAAM;AAEP,cAAK,MAAM,WAAW,MAAM,WAAW,MAAM,UAAW;AAEpD,gBAAK,MAAM,iBAAiB;AAAQ;AAEpC,kCAAuB,KAAK;AAE5B,oBAAQ,MAAM;UAEtC,OAA2B;AAEH,gBAAK,MAAM,cAAc;AAAQ;AAEjC,+BAAoB,KAAK;AAEzB,oBAAQ,MAAM;UAEtC;AAEoB;QAEJ;AAEI,kBAAQ,MAAM;MAElC;AAEY,UAAK,UAAU,MAAM,MAAO;AAExB,cAAM,cAAe,WAAW;MAEhD;IAEA;AAEQ,aAAS,YAAa,OAAQ;AAE1B,cAAS,OAAK;QAEV,KAAK,MAAM;AAEP,cAAK,MAAM,iBAAiB;AAAQ;AAEpC,gCAAuB,KAAK;AAE5B;QAEJ,KAAK,MAAM;AAEP,cAAK,MAAM,eAAe;AAAQ;AAElC,+BAAsB,KAAK;AAE3B;QAEJ,KAAK,MAAM;AAEP,cAAK,MAAM,cAAc;AAAQ;AAEjC,6BAAoB,KAAK;AAEzB;MAEpB;IAEA;AAEQ,aAAS,aAAc,OAAQ;AAE3B,UAAK,MAAM,YAAY,SAAS,MAAM,eAAe,SAAS,UAAU,MAAM;AAAO;AAErF,YAAM,eAAc;AAEpB,YAAM,cAAe,WAAW;AAEhC,uBAAkB,KAAK;AAEvB,YAAM,cAAe,SAAS;IAE1C;AAEQ,aAAS,UAAW,OAAQ;AAExB,UAAK,MAAM,YAAY,SAAS,MAAM,cAAc;AAAQ;AAE5D,oBAAe,KAAK;IAEhC;AAEQ,aAAS,aAAc,OAAQ;AAE3B,mBAAc,KAAK;AAEnB,cAAS,SAAS,QAAM;QAEpB,KAAK;AAED,kBAAS,MAAM,QAAQ,KAAG;YAEtB,KAAK,MAAM;AAEP,kBAAK,MAAM,iBAAiB;AAAQ;AAEpC,qCAAsB;AAEtB,sBAAQ,MAAM;AAEd;YAEJ,KAAK,MAAM;AAEP,kBAAK,MAAM,cAAc;AAAQ;AAEjC,kCAAmB;AAEnB,sBAAQ,MAAM;AAEd;YAEJ;AAEI,sBAAQ,MAAM;UAE1C;AAEoB;QAEJ,KAAK;AAED,kBAAS,MAAM,QAAQ,KAAG;YAEtB,KAAK,MAAM;AAEP,kBAAK,MAAM,eAAe,SAAS,MAAM,cAAc;AAAQ;AAE/D,uCAAwB;AAExB,sBAAQ,MAAM;AAEd;YAEJ,KAAK,MAAM;AAEP,kBAAK,MAAM,eAAe,SAAS,MAAM,iBAAiB;AAAQ;AAElE,0CAA2B;AAE3B,sBAAQ,MAAM;AAEd;YAEJ;AAEI,sBAAQ,MAAM;UAE1C;AAEoB;QAEJ;AAEI,kBAAQ,MAAM;MAElC;AAEY,UAAK,UAAU,MAAM,MAAO;AAExB,cAAM,cAAe,WAAW;MAEhD;IAEA;AAEQ,aAAS,YAAa,OAAQ;AAE1B,mBAAc,KAAK;AAEnB,cAAS,OAAK;QAEV,KAAK,MAAM;AAEP,cAAK,MAAM,iBAAiB;AAAQ;AAEpC,gCAAuB,KAAK;AAE5B,gBAAM,OAAM;AAEZ;QAEJ,KAAK,MAAM;AAEP,cAAK,MAAM,cAAc;AAAQ;AAEjC,6BAAoB,KAAK;AAEzB,gBAAM,OAAM;AAEZ;QAEJ,KAAK,MAAM;AAEP,cAAK,MAAM,eAAe,SAAS,MAAM,cAAc;AAAQ;AAE/D,kCAAyB,KAAK;AAE9B,gBAAM,OAAM;AAEZ;QAEJ,KAAK,MAAM;AAEP,cAAK,MAAM,eAAe,SAAS,MAAM,iBAAiB;AAAQ;AAElE,qCAA4B,KAAK;AAEjC,gBAAM,OAAM;AAEZ;QAEJ;AAEI,kBAAQ,MAAM;MAElC;IAEA;AAEQ,aAAS,cAAe,OAAQ;AAE5B,UAAK,MAAM,YAAY;AAAQ;AAE/B,YAAM,eAAc;IAEhC;AAEQ,aAAS,WAAY,OAAQ;AAEzB,eAAS,KAAM,KAAK;IAEhC;AAEQ,aAAS,cAAe,OAAQ;AAE5B,aAAO,iBAAiB,MAAM,SAAS;AAEvC,eAAU,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAO;AAEzC,YAAK,SAAS,CAAC,EAAE,aAAa,MAAM,WAAY;AAE5C,mBAAS,OAAQ,GAAG,CAAC;AACrB;QAEpB;MAEA;IAEA;AAEQ,aAAS,aAAc,OAAQ;AAE3B,UAAI,WAAW,iBAAiB,MAAM,SAAS;AAE/C,UAAK,aAAa,QAAY;AAE1B,mBAAW,IAAI,QAAO;AACtB,yBAAiB,MAAM,SAAS,IAAI;MAEpD;AAEY,eAAS,IAAK,MAAM,OAAO,MAAM,KAAK;IAElD;AAEQ,aAAS,yBAA0B,OAAQ;AAEvC,YAAM,UAAY,MAAM,cAAc,SAAS,CAAC,EAAE,YAAc,SAAS,CAAC,IAAI,SAAS,CAAC;AAExF,aAAO,iBAAiB,QAAQ,SAAS;IAErD;AAIQ,UAAM,WAAW,iBAAkB,eAAe,aAAa;AAE/D,UAAM,WAAW,iBAAkB,eAAe,aAAa;AAC/D,UAAM,WAAW,iBAAkB,iBAAiB,WAAW;AAC/D,UAAM,WAAW,iBAAkB,SAAS,cAAc,EAAE,SAAS,MAAK,CAAE;AAI5E,SAAK,OAAM;EAEnB;AAEA;ACr4CO,IAAM,cAAc,CAAC,SAAS,KAAK,cAAc,UAAU,eAAe;AAC7E,QAAM,YAAY,YAAY,IAAG;AAEjC,MAAI,eAAe,QAAQ,MAAM,YAAY,SAAS,IAAI,WAAW,QAAQ,MAAM,OAAO;AAC1F,MAAI,MAAM,YAAY;AAAG,mBAAe;AAExC,QAAM,WAAW,OAAO,YAAY,MAAM;AACtC,UAAM,cAAc,YAAY,IAAG;AACnC,UAAM,UAAU,cAAc;AAE9B,QAAI,IAAI,KAAK,IAAI,UAAU,UAAU,CAAG;AACxC,QAAI,IAAI;AAAO,UAAI;AAEnB,QAAI;AACJ,QAAI,KAAK;AACL,iBAAW,IAAM,KAAK;AACtB,UAAI,UAAU;AAAQ,kBAAU;IAC5C,OAAe;AACH,iBAAW,IAAM,gBAAgB,IAAI;IACjD;AAEQ,QAAI,UAAU,GAAG;AACb,cAAQ,MAAM,UAAU;AACxB,cAAQ,MAAM,UAAU;IACpC,OAAe;AACH,cAAQ,MAAM,UAAU;IACpC;AAEQ,QAAI,KAAK,GAAG;AACR,UAAI;AAAY,mBAAU;AAC1B,aAAO,cAAc,QAAQ;IACzC;EACA,GAAO,EAAE;AACL,SAAO;AACX;AChCA,IAAM,yBAAyB;AAExB,IAAM,kBAAN,MAAM,gBAAe;EAIxB,YAAY,SAAS,WAAW;AAE5B,SAAK,YAAY;AACjB,SAAK,YAAY,gBAAe;AAEhC,SAAK,QAAQ,CAAA;AAEb,SAAK,UAAU,WAAW;AAC1B,SAAK,YAAY,aAAa,SAAS;AAEvC,SAAK,wBAAwB,SAAS,cAAc,KAAK;AACzD,SAAK,sBAAsB,YAAY,wBAAwB,KAAK,SAAS;AAC7E,SAAK,sBAAsB,MAAM,UAAU;AAE3C,SAAK,0BAA0B,SAAS,cAAc,KAAK;AAC3D,SAAK,wBAAwB,YAAY,0BAA0B,KAAK,SAAS;AACjF,SAAK,iBAAiB,SAAS,cAAc,KAAK;AAClD,SAAK,eAAe,UAAU,IAAI,UAAU,KAAK,SAAS,IAAI,iBAAiB,KAAK,SAAS,EAAE;AAC/F,SAAK,0BAA0B,SAAS,cAAc,KAAK;AAC3D,SAAK,wBAAwB,UAAU,IAAI,mBAAmB,KAAK,SAAS,IAAI,0BAA0B,KAAK,SAAS,EAAE;AAC1H,SAAK,wBAAwB,YAAY,KAAK;AAE9C,SAAK,sBAAsB,SAAS,cAAc,KAAK;AACvD,SAAK,oBAAoB,YAAY,sBAAsB,KAAK,SAAS;AACzE,SAAK,aAAa,SAAS,cAAc,KAAK;AAC9C,SAAK,WAAW,UAAU,IAAI,UAAU,KAAK,SAAS,IAAI,aAAa,KAAK,SAAS,EAAE;AACvF,SAAK,sBAAsB,SAAS,cAAc,KAAK;AACvD,SAAK,oBAAoB,UAAU,IAAI,mBAAmB,KAAK,SAAS,IAAI,sBAAsB,KAAK,SAAS,EAAE;AAClH,SAAK,oBAAoB,YAAY,KAAK;AAE1C,SAAK,wBAAwB,YAAY,KAAK,cAAc;AAC5D,SAAK,wBAAwB,YAAY,KAAK,uBAAuB;AACrE,SAAK,sBAAsB,YAAY,KAAK,uBAAuB;AAEnE,SAAK,oBAAoB,YAAY,KAAK,UAAU;AACpD,SAAK,oBAAoB,YAAY,KAAK,mBAAmB;AAC7D,SAAK,sBAAsB,YAAY,KAAK,mBAAmB;AAE/D,UAAM,QAAQ,SAAS,cAAc,OAAO;AAC5C,UAAM,YAAY;;oCAEU,KAAK,SAAS;;;;;;;;;;+BAUnB,KAAK,SAAS;;;;;;;;;sBASvB,KAAK,SAAS;;;;;;;;;;;;;;;;;;sCAkBE,KAAK,SAAS;;;;;;;;;;;;;;;;6BAgBvB,KAAK,SAAS;;;;;sCAKL,KAAK,SAAS;;;;kCAIlB,KAAK,SAAS;;;;;;;;;;;;;;;;;;kCAkBd,KAAK,SAAS;;;;yBAIvB,KAAK,SAAS;;;;;;;kCAOL,KAAK,SAAS;;;;;;;;;AASxC,SAAK,sBAAsB,YAAY,KAAK;AAC5C,SAAK,UAAU,YAAY,KAAK,qBAAqB;AAErD,SAAK,aAAa,OAAO,IAAI;AAE7B,SAAK,kBAAkB,CAAA;EAC/B;EAEI,QAAQ,SAAS;AACb,UAAM,UAAU;MACZ,WAAW;MACX,MAAM,KAAK;IACvB;AACQ,SAAK,MAAM,KAAK,OAAO;AACvB,SAAK,OAAM;AACX,WAAO,QAAQ;EACvB;EAEI,WAAW,IAAI;AACX,QAAI,QAAQ;AACZ,aAAS,QAAQ,KAAK,OAAO;AACzB,UAAI,KAAK,OAAO,IAAI;AAChB,aAAK,MAAM,OAAO,OAAO,CAAC;AAC1B;MAChB;AACY;IACZ;AACQ,SAAK,OAAM;EACnB;EAEI,iBAAiB;AACb,SAAK,QAAQ,CAAA;AACb,SAAK,OAAM;EACnB;EAEI,kBAAkB,IAAI,SAAS;AAC3B,aAAS,QAAQ,KAAK,OAAO;AACzB,UAAI,KAAK,OAAO,IAAI;AAChB,aAAK,UAAU;AACf;MAChB;IACA;AACQ,SAAK,OAAM;EACnB;EAEI,SAAS;AACL,QAAI,KAAK,MAAM,SAAS,GAAG;AACvB,WAAK,KAAI;AACT,WAAK,WAAW,KAAK,MAAM,KAAK,MAAM,SAAS,CAAC,EAAE,OAAO;IACrE,OAAe;AACH,WAAK,KAAI;IACrB;EACA;EAEI,OAAO;AACH,SAAK,sBAAsB,MAAM,UAAU;AAC3C,SAAK,UAAU;EACvB;EAEI,OAAO;AACH,SAAK,sBAAsB,MAAM,UAAU;AAC3C,SAAK,UAAU;EACvB;EAEI,aAAa,WAAW;AACpB,QAAI,KAAK,WAAW;AAChB,WAAK,UAAU,YAAY,KAAK,qBAAqB;IACjE;AACQ,QAAI,WAAW;AACX,WAAK,YAAY;AACjB,WAAK,UAAU,YAAY,KAAK,qBAAqB;AACrD,WAAK,sBAAsB,MAAM,SAAS,KAAK,UAAU,MAAM,SAAS;IACpF;EACA;EAEI,aAAa,WAAW,SAAS;AAC7B,UAAM,kBAAkB,CAAC,SAAS,MAAMC,UAAS,cAAc,yBAAyB;AACpF,UAAIA,UAAS;AACT,gBAAQ,MAAM,UAAU,OAAO,eAAe;MAC9D,OAAmB;AACH,aAAK,gBAAgB,oBAAoB,IAAI,YAAY,SAAS,CAAC,MAAM,cAAc,wBAAwB,MAAM;AACjH,eAAK,gBAAgB,oBAAoB,IAAI;QACjE,CAAiB;MACjB;IACA;AACQ,oBAAgB,KAAK,yBAAyB,CAAC,WAAW,SAAS,SAAS,CAAC;AAC7E,oBAAgB,KAAK,qBAAqB,WAAW,SAAS,QAAQ,CAAC;AACvE,SAAK,YAAY;EACzB;EAEI,WAAW,KAAK;AACZ,SAAK,wBAAwB,YAAY;AACzC,SAAK,oBAAoB,YAAY;EAC7C;AACA;AA7OI,cAFS,iBAEF,gBAAe;AAFnB,IAAM,iBAAN;ACJA,IAAM,qBAAN,MAAyB;EAE5B,YAAY,WAAW;AAEnB,SAAK,QAAQ;AAEb,SAAK,QAAQ,CAAA;AAEb,SAAK,YAAY,aAAa,SAAS;AAEvC,SAAK,4BAA4B,SAAS,cAAc,KAAK;AAC7D,SAAK,0BAA0B,YAAY;AAC3C,SAAK,0BAA0B,MAAM,UAAU;AAE/C,SAAK,iBAAiB,SAAS,cAAc,KAAK;AAClD,SAAK,eAAe,YAAY;AAEhC,SAAK,wBAAwB,SAAS,cAAc,KAAK;AACzD,SAAK,sBAAsB,YAAY;AAEvC,SAAK,cAAc,SAAS,cAAc,KAAK;AAC/C,SAAK,YAAY,YAAY;AAE7B,SAAK,sBAAsB,YAAY,KAAK,WAAW;AACvD,SAAK,eAAe,YAAY,KAAK,qBAAqB;AAC1D,SAAK,0BAA0B,YAAY,KAAK,cAAc;AAE9D,UAAM,QAAQ,SAAS,cAAc,OAAO;AAC5C,UAAM,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8ClB,SAAK,0BAA0B,YAAY,KAAK;AAChD,SAAK,UAAU,YAAY,KAAK,yBAAyB;EACjE;EAEI,OAAO;AACH,SAAK,0BAA0B,MAAM,UAAU;EACvD;EAEI,OAAO;AACH,SAAK,0BAA0B,MAAM,UAAU;EACvD;EAEI,YAAY,UAAU;AAClB,SAAK,YAAY,MAAM,QAAQ,WAAW;EAClD;EAEI,aAAa,WAAW;AACpB,QAAI,KAAK,WAAW;AAChB,WAAK,UAAU,YAAY,KAAK,yBAAyB;IACrE;AACQ,QAAI,WAAW;AACX,WAAK,YAAY;AACjB,WAAK,UAAU,YAAY,KAAK,yBAAyB;AACzD,WAAK,0BAA0B,MAAM,SAAS,KAAK,UAAU,MAAM,SAAS;IACxF;EACA;AAEA;ACrGO,IAAM,YAAN,MAAgB;EAEnB,YAAY,WAAW;AAqGvB,kCAAS,SAAS,kBAAkB,gBAAgB,sBAAsB,UAAU,oBAClE,oBAAoB,YAAY,YAAY,kBAC5C,qBAAqB,cAAc,iBAAiB,YAAY,gBAAgB;AAE9F,YAAM,kBAAkB,GAAG,eAAe,EAAE,QAAQ,CAAC,CAAC,KAAK,eAAe,EAAE,QAAQ,CAAC,CAAC,KAAK,eAAe,EAAE,QAAQ,CAAC,CAAC;AACtH,UAAI,KAAK,UAAU,eAAe,cAAc,iBAAiB;AAC7D,aAAK,UAAU,eAAe,YAAY;MACtD;AAEQ,UAAI,sBAAsB;AACtB,cAAM,MAAM;AACZ,cAAM,qBAAqB,GAAG,IAAI,EAAE,QAAQ,CAAC,CAAC,KAAK,IAAI,EAAE,QAAQ,CAAC,CAAC,KAAK,IAAI,EAAE,QAAQ,CAAC,CAAC;AACxF,YAAI,KAAK,UAAU,aAAa,cAAc,oBAAoB;AAC9D,eAAK,UAAU,aAAa,YAAY;QACxD;MACA;AAEQ,YAAM,iBAAiB,GAAG,SAAS,EAAE,QAAQ,CAAC,CAAC,KAAK,SAAS,EAAE,QAAQ,CAAC,CAAC,KAAK,SAAS,EAAE,QAAQ,CAAC,CAAC;AACnG,UAAI,KAAK,UAAU,SAAS,cAAc,gBAAgB;AACtD,aAAK,UAAU,SAAS,YAAY;MAChD;AAEQ,WAAK,UAAU,mBAAmB,YAAY,qBAAqB,iBAAiB;AAEpF,UAAI,oBAAoB;AACpB,cAAM,UAAU;AAChB,cAAM,kBAAkB,GAAG,QAAQ,EAAE,QAAQ,CAAC,CAAC,KAAK,QAAQ,EAAE,QAAQ,CAAC,CAAC,KAAK,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACjG,aAAK,UAAU,eAAe,YAAY;MACtD,OAAe;AACH,aAAK,UAAU,eAAe,YAAY;MACtD;AAEQ,WAAK,UAAU,IAAI,YAAY;AAC/B,WAAK,UAAU,aAAa,YAAY,GAAG,iBAAiB,CAAC,MAAM,iBAAiB,CAAC;AAErF,WAAK,UAAU,iBAAiB,YAC5B,GAAG,gBAAgB,kBAAkB,UAAU,KAAK,oBAAoB,QAAQ,CAAC,CAAC;AAEtF,WAAK,UAAU,SAAS,YAAY,GAAG,aAAa,QAAQ,CAAC,CAAC;AAC9D,WAAK,UAAU,gBAAgB,YAAY,GAAG,gBAAgB,QAAQ,CAAC,CAAC;AACxE,WAAK,UAAU,WAAW,YAAY,GAAG,WAAW,QAAQ,CAAC,CAAC;AAC9D,WAAK,UAAU,eAAe,YAAY,GAAG,cAAc;IACnE;AA7IQ,SAAK,YAAY,aAAa,SAAS;AAEvC,SAAK,YAAY,CAAA;AAEjB,UAAM,SAAS;MACX,CAAC,mBAAmB,gBAAgB;MACpC,CAAC,kBAAkB,cAAc;MACjC,CAAC,aAAa,UAAU;MACxB,CAAC,eAAe,oBAAoB;MACpC,CAAC,mBAAmB,gBAAgB;MACpC,CAAC,OAAO,KAAK;MACb,CAAC,cAAc,kBAAkB;MACjC,CAAC,aAAa,UAAU;MACxB,CAAC,iBAAiB,cAAc;MAChC,CAAC,oBAAoB,iBAAiB;MACtC,CAAC,eAAe,YAAY;MAC5B,CAAC,oBAAoB,gBAAgB;IACjD;AAEQ,SAAK,qBAAqB,SAAS,cAAc,KAAK;AACtD,UAAM,QAAQ,SAAS,cAAc,OAAO;AAC5C,UAAM,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgClB,SAAK,mBAAmB,OAAO,KAAK;AAEpC,SAAK,YAAY,SAAS,cAAc,KAAK;AAC7C,SAAK,UAAU,YAAY;AAE3B,UAAM,YAAY,SAAS,cAAc,KAAK;AAC9C,cAAU,MAAM,UAAU;AAE1B,aAAS,eAAe,QAAQ;AAC5B,YAAM,MAAM,SAAS,cAAc,KAAK;AACxC,UAAI,MAAM,UAAU;AACpB,UAAI,YAAY;AAEhB,YAAM,YAAY,SAAS,cAAc,KAAK;AAC9C,gBAAU,MAAM,UAAU;AAC1B,gBAAU,YAAY,GAAG,YAAY,CAAC,CAAC;AACvC,gBAAU,UAAU,IAAI,mBAAmB,YAAY;AAEvD,YAAM,aAAa,SAAS,cAAc,KAAK;AAC/C,iBAAW,MAAM,UAAU;AAC3B,iBAAW,MAAM,QAAQ;AACzB,iBAAW,YAAY;AACvB,iBAAW,YAAY;AAEvB,YAAM,WAAW,SAAS,cAAc,KAAK;AAC7C,eAAS,MAAM,UAAU;AACzB,eAAS,YAAY;AACrB,eAAS,YAAY;AAErB,WAAK,UAAU,YAAY,CAAC,CAAC,IAAI;AAEjC,UAAI,YAAY,SAAS;AACzB,UAAI,YAAY,UAAU;AAC1B,UAAI,YAAY,QAAQ;AAExB,gBAAU,YAAY,GAAG;IACrC;AAEQ,SAAK,UAAU,YAAY,SAAS;AACpC,SAAK,mBAAmB,OAAO,KAAK,SAAS;AAC7C,SAAK,mBAAmB,MAAM,UAAU;AACxC,SAAK,UAAU,YAAY,KAAK,kBAAkB;AAElD,SAAK,UAAU;EACvB;EA8CI,aAAa,WAAW;AACpB,QAAI,KAAK,WAAW;AAChB,WAAK,UAAU,YAAY,KAAK,kBAAkB;IAC9D;AACQ,QAAI,WAAW;AACX,WAAK,YAAY;AACjB,WAAK,UAAU,YAAY,KAAK,kBAAkB;AAClD,WAAK,mBAAmB,MAAM,SAAS,KAAK,UAAU,MAAM,SAAS;IACjF;EACA;EAEI,OAAO;AACH,SAAK,mBAAmB,MAAM,UAAU;AACxC,SAAK,UAAU;EACvB;EAEI,OAAO;AACH,SAAK,mBAAmB,MAAM,UAAU;AACxC,SAAK,UAAU;EACvB;AAEA;ACtKO,IAAM,cAAN,cAAgC,SAAS;EAE5C,YAAY,MAAM,IAAU,QAAQ,GAAG,GAAG,CAAC,GAAG,SAAS,IAAU,QAAQ,GAAG,GAAG,CAAC,GAAG,SAAS,GAChF,SAAS,KAAK,QAAQ,UAAU,aAAa,SAAS,KAAK,aAAa,aAAa,KAAK;AAClG,UAAK;AAEL,SAAK,OAAO;AAEZ,UAAM,eAAe,IAAU,iBAAiB,QAAQ,QAAQ,QAAQ,EAAE;AAC1E,iBAAa,UAAU,GAAG,SAAS,GAAK,CAAC;AACzC,UAAM,eAAe,IAAU,iBAAkB,GAAG,YAAY,YAAY,EAAE;AAC9E,iBAAa,UAAU,GAAG,QAAQ,CAAC;AAEnC,SAAK,SAAS,KAAM,MAAM;AAE1B,SAAK,OAAO,IAAU,KAAK,cAAc,IAAU,kBAAkB,EAAC,OAAc,YAAY,MAAK,CAAC,CAAC;AACvG,SAAK,KAAK,mBAAmB;AAC7B,SAAK,IAAI,KAAK,IAAI;AAElB,SAAK,OAAO,IAAU,KAAK,cAAc,IAAU,kBAAkB,EAAC,OAAc,YAAY,MAAK,CAAC,CAAC;AACvG,SAAK,KAAK,mBAAmB;AAC7B,SAAK,IAAI,KAAK,IAAI;AAElB,SAAK,aAAa,GAAG;EAC7B;EAEI,aAAc,KAAM;AAChB,QAAI,IAAI,IAAI,SAAS;AACjB,WAAK,WAAW,IAAI,GAAG,GAAG,GAAG,CAAC;IAC1C,WAAmB,IAAI,IAAI,UAAW;AAC1B,WAAK,WAAW,IAAI,GAAG,GAAG,GAAG,CAAC;IAC1C,OAAe;AACH,YAAM,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,UAAS;AACrC,YAAM,UAAU,KAAK,KAAK,IAAI,CAAC;AAC/B,WAAK,WAAW,iBAAiB,OAAO,OAAO;IAC3D;EACA;EAEI,SAAU,OAAQ;AACd,SAAK,KAAK,SAAS,MAAM,IAAI,KAAK;AAClC,SAAK,KAAK,SAAS,MAAM,IAAI,KAAK;EAC1C;EAEI,KAAK,QAAQ;AACT,UAAM,KAAK,QAAQ,KAAK;AACxB,SAAK,KAAK,KAAK,OAAO,IAAI;AAC1B,SAAK,KAAK,KAAK,OAAO,IAAI;AAC1B,WAAO;EACf;EAEI,UAAU;AACN,SAAK,KAAK,SAAS,QAAO;AAC1B,SAAK,KAAK,SAAS,QAAO;AAC1B,SAAK,KAAK,SAAS,QAAO;AAC1B,SAAK,KAAK,SAAS,QAAO;EAClC;AAEA;ACvDO,IAAM,cAAN,MAAM,aAAY;EAErB,YAAY,YAAY;AA6JxB,6CAAoB,WAAW;AAE3B,YAAM,eAAe,IAAU,QAAO;AACtC,YAAM,aAAa,IAAU,QAAO;AACpC,YAAM,WAAW,IAAU,QAAO;AAElC,aAAO,SAAS,UAAU,QAAQ,UAAU;AACxC,mBAAW,KAAK,OAAO,WAAW,EAAE,OAAM;AAC1C,qBAAa,KAAK,QAAQ,EAAE,aAAa,UAAU;AACnD,qBAAa,UAAS,EAAG,eAAe,EAAE;AAC1C,qBAAa,aAAa,OAAO,WAAW;AAC5C,iBAAS,KAAK,OAAO,QAAQ,EAAE,IAAI,QAAQ;AAC3C,cAAM,mBAAmB,SAAS,OAAM;AACxC,aAAK,YAAY,SAAS,KAAK,QAAQ;AACvC,aAAK,YAAY,MAAM,IAAI,kBAAkB,kBAAkB,gBAAgB;AAC/E,aAAK,YAAY,SAAS,SAAS,kBAAkB,MAAM,KAAK,QAAQ;AACxE,aAAK,YAAY,SAAS,SAAS,SAAS,MAAM,KAAK,QAAQ;AAC/D,aAAK,YAAY,SAAS,qBAAqB;MAC3D;IAEA,EAAK;AAoDD,yDAAgC,WAAW;AAEvC,YAAM,iBAAiB,IAAU,WAAU;AAC3C,YAAM,YAAY,IAAU,QAAQ,GAAG,GAAG,CAAC;AAE3C,aAAO,SAAS,UAAU,IAAI;AAC1B,uBAAe,mBAAmB,WAAW,EAAE;AAC/C,aAAK,aAAa,SAAS,KAAK,QAAQ;AACxC,aAAK,aAAa,WAAW,KAAK,cAAc;MAC5D;IAEA,EAAK;AA/OG,SAAK,aAAa;AAClB,SAAK,oBAAoB;AACzB,SAAK,uBAAuB;AAC5B,SAAK,yBAAyB;AAC9B,SAAK,aAAa;AAClB,SAAK,cAAc;AACnB,SAAK,eAAe;AACpB,SAAK,YAAY;AACjB,SAAK,qBAAqB;EAClC;EAEI,2CAA2C,OAAO,QAAQ;AACtD,SAAK,yBAAwB;AAC7B,SAAK,oBAAoB,IAAU,kBAAkB,OAAO,QAAQ;MAChE,QAAc;MACd,eAAe;MACf,aAAa;IAEzB,CAAS;AACD,SAAK,kBAAkB,eAAe,IAAU,aAAa,OAAO,MAAM;AAC1E,SAAK,kBAAkB,aAAa,SAAe;AACnD,SAAK,kBAAkB,aAAa,OAAa;EACzD;EAEI,2BAA2B;AACvB,QAAI,KAAK,mBAAmB;AACxB,WAAK,oBAAoB;IACrC;EACA;EAEI,+BAA+B;AAC3B,UAAM,WAAW;MACb,sBAAsB;QAClB,QAAQ;QACR,SAAS;MACzB;MACY,sBAAsB;QAClB,QAAQ;QACR,SAAS;MACzB;IACA;AACQ,UAAM,2BAA2B,IAAU,eAAe;MACtD,cAAc;;;;;;;MAOd,gBAAgB;;;;;;;;;;;;;MAahB;MACA,YAAY;MACZ,WAAW;MACX,aAAa;MACb,UAAgB;MAChB,UAAgB;MAChB,eAAqB;MACrB,UAAgB;MAChB,eAAqB;IACjC,CAAS;AACD,6BAAyB,WAAW,YAAY;AAChD,SAAK,uBAAuB,IAAU,KAAK,IAAU,cAAc,GAAG,CAAC,GAAG,wBAAwB;AAClG,SAAK,yBAAyB,IAAU,mBAAmB,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC;EACrF;EAEI,iCAAiC;AAC7B,QAAI,KAAK,sBAAsB;AAC3B,uBAAiB,KAAK,oBAAoB;AAC1C,WAAK,uBAAuB;IACxC;EACA;EAEI,kBAAkB;AACd,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,eAAe,IAAU,aAAa,KAAK,KAAK,EAAE;AACxD,YAAM,eAAe,IAAU,kBAAkB,EAAC,OAAO,SAAQ,CAAC;AAElE,YAAM,YAAY,IAAU,KAAK,cAAc,YAAY;AAC3D,gBAAU,SAAS,IAAI,GAAG,GAAG,KAAK,EAAE;AACpC,gBAAU,SAAS,IAAI,GAAG,GAAG,CAAC;AAC9B,YAAM,UAAU,IAAU,KAAK,cAAc,YAAY;AACzD,cAAQ,SAAS,IAAI,GAAG,IAAI,CAAC;AAC7B,YAAM,YAAY,IAAU,KAAK,cAAc,YAAY;AAC3D,gBAAU,SAAS,IAAI,GAAG,GAAG,KAAK,KAAK,CAAG;AAC1C,gBAAU,SAAS,IAAI,GAAG,GAAG,CAAC;AAC9B,YAAM,aAAa,IAAU,KAAK,cAAc,YAAY;AAC5D,iBAAW,SAAS,IAAI,GAAG,GAAG,CAAC,KAAK,KAAK,CAAG;AAC5C,iBAAW,SAAS,IAAI,IAAI,GAAG,CAAC;AAEhC,WAAK,aAAa,IAAU,SAAQ;AACpC,WAAK,WAAW,IAAI,SAAS;AAC7B,WAAK,WAAW,IAAI,OAAO;AAC3B,WAAK,WAAW,IAAI,SAAS;AAC7B,WAAK,WAAW,IAAI,UAAU;AAC9B,WAAK,WAAW,MAAM,IAAI,KAAK,KAAK,GAAG;AACvC,WAAK,WAAW,IAAI,KAAK,UAAU;AACnC,WAAK,WAAW,UAAU;IACtC;EACA;EAEI,oBAAoB;AAChB,QAAI,KAAK,YAAY;AACjB,uBAAiB,KAAK,UAAU;AAChC,WAAK,WAAW,OAAO,KAAK,UAAU;AACtC,WAAK,aAAa;IAC9B;EACA;EAEI,wBAAwB,SAAS;AAC7B,SAAK,WAAW,UAAU;EAClC;EAEI,2BAA2B;AACvB,WAAO,KAAK,WAAW;EAC/B;EAEI,sBAAsB,UAAU;AAC5B,SAAK,WAAW,SAAS,KAAK,QAAQ;EAC9C;EAEI,4BAA4B,UAAU,QAAQ;AAC1C,SAAK,WAAW,SAAS,KAAK,QAAQ;AACtC,SAAK,WAAW,GAAG,KAAK,OAAO,EAAE;AACjC,SAAK,WAAW,OAAO,OAAO,QAAQ;EAC9C;EAEI,mBAAmB;AACf,QAAI,CAAC,KAAK,aAAa;AACnB,YAAM,iBAAiB,IAAU,eAAe,KAAI,IAAI,EAAE;AAC1D,YAAM,sBAAsB,aAAY,yBAAwB;AAChE,0BAAoB,YAAY;AAChC,0BAAoB,aAAa;AACjC,0BAAoB,cAAc;AAClC,WAAK,cAAc,IAAU,KAAK,gBAAgB,mBAAmB;IACjF;EACA;EAEI,qBAAqB;AACjB,QAAI,KAAK,aAAa;AAClB,uBAAiB,KAAK,WAAW;AACjC,WAAK,cAAc;IAC/B;EACA;EAwBI,yBAAyB,SAAS;AAC9B,SAAK,YAAY,UAAU;EACnC;EAEI,sBAAsB,SAAS;AAC3B,SAAK,YAAY,SAAS,SAAS,QAAQ,QAAQ;AACnD,SAAK,YAAY,SAAS,qBAAqB;EACvD;EAEI,wBAAwB;AACpB,WAAO,KAAK,YAAY,SAAS,SAAS,QAAQ;EAC1D;EAEI,oBAAoB;AAChB,QAAI,CAAC,KAAK,cAAc;AACpB,YAAM,gBAAgB,IAAU,cAAc,GAAG,CAAC;AAClD,oBAAc,QAAQ,CAAC,KAAK,KAAK,CAAC;AAClC,YAAM,gBAAgB,IAAU,kBAAkB,EAAC,OAAO,SAAQ,CAAC;AACnE,oBAAc,cAAc;AAC5B,oBAAc,UAAU;AACxB,oBAAc,YAAY;AAC1B,oBAAc,aAAa;AAC3B,oBAAc,OAAa;AAC3B,YAAM,YAAY,IAAU,KAAK,eAAe,aAAa;AAE7D,YAAM,WAAW,IAAU,QAAQ,GAAG,GAAG,CAAC;AAC1C,eAAS,UAAS;AAClB,YAAM,cAAc,IAAU,QAAQ,GAAG,GAAG,CAAC;AAC7C,YAAM,cAAc;AACpB,YAAM,cAAc;AACpB,YAAM,aAAa;AACnB,YAAM,cAAc,IAAI,YAAY,UAAU,aAAa,aAAa,aAAa,YAAY,KAAK,IAAI;AAE1G,WAAK,eAAe,IAAU,SAAQ;AACtC,WAAK,aAAa,IAAI,SAAS;AAC/B,WAAK,aAAa,IAAI,WAAW;IAC7C;EACA;EAEI,sBAAsB;AAClB,QAAI,KAAK,cAAc;AACnB,uBAAiB,KAAK,YAAY;AAClC,WAAK,eAAe;IAChC;EACA;EAEI,0BAA0B,SAAS;AAC/B,SAAK,aAAa,UAAU;EACpC;EAeI,iBAAiB;AACb,SAAK,YAAY,KAAK,kBAAiB;AACvC,SAAK,qBAAqB,KAAK,2BAA0B;AACzD,SAAK,WAAW,IAAI,KAAK,SAAS;AAClC,SAAK,WAAW,IAAI,KAAK,kBAAkB;EACnD;EAEI,qBAAqB;AACjB,aAAS,aAAa,CAAC,KAAK,WAAW,KAAK,kBAAkB,GAAG;AAC7D,UAAI,WAAW;AACX,yBAAiB,SAAS;AAC1B,aAAK,WAAW,OAAO,SAAS;MAChD;IACA;AACQ,SAAK,YAAY;AACjB,SAAK,qBAAqB;EAClC;EAEI,kBAAkB,aAAa;AAC3B,UAAM,iBAAiB,IAAU,eAAe,GAAG,IAAI,EAAE;AACzD,UAAM,gBAAgB,IAAU,SAAQ;AAExC,UAAM,aAAa,CAAC,OAAO,aAAa;AACpC,UAAI,aAAa,IAAU,KAAK,gBAAgB,aAAY,mBAAmB,KAAK,CAAC;AACrF,iBAAW,cAAc;AACzB,oBAAc,IAAI,UAAU;AAC5B,iBAAW,SAAS,UAAU,QAAQ;IAClD;AAEQ,eAAW,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC;AAChC,eAAW,UAAU,CAAC,IAAI,GAAG,CAAC,CAAC;AAC/B,eAAW,OAAU,CAAC,GAAG,GAAG,GAAG,CAAC;AAChC,eAAW,OAAU,CAAC,GAAG,GAAG,EAAE,CAAC;AAC/B,eAAW,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC;AAE9B,WAAO;EACf;EAEI,2BAA2B,aAAa;AACpC,UAAM,cAAc,IAAU,YAAY,GAAG,GAAG,CAAC;AACjD,UAAM,gBAAgB,IAAU,SAAQ;AAExC,QAAI,WAAW;AACf,UAAM,aAAa,CAAC,aAAa;AAC7B,UAAI,UAAU,IAAU,KAAK,aAAa,aAAY,mBAAmB,QAAQ,CAAC;AAClF,cAAQ,cAAc;AACtB,oBAAc,IAAI,OAAO;AACzB,cAAQ,SAAS,UAAU,QAAQ;IAC/C;AAEQ,QAAI,aAAa;AACjB,eAAW,CAAC,CAAC,YAAY,GAAG,CAAC,UAAU,CAAC;AACxC,eAAW,CAAC,CAAC,YAAY,GAAG,UAAU,CAAC;AACvC,eAAW,CAAC,YAAY,GAAG,CAAC,UAAU,CAAC;AACvC,eAAW,CAAC,YAAY,GAAG,UAAU,CAAC;AAEtC,WAAO;EACf;EAEI,OAAO,mBAAmB,OAAO;AAC7B,UAAM,qBAAqB;;;;;;;;;;;;;;AAe3B,UAAM,uBAAuB;;;;;;;;;AAU7B,UAAM,WAAW;MACb,SAAS;QACL,QAAQ;QACR,SAAS,IAAU,MAAM,KAAK;MAC9C;IACA;AAEQ,UAAM,WAAW,IAAU,eAAe;MACtC;MACA,cAAc;MACd,gBAAgB;MAChB,aAAa;MACb,WAAW;MACX,YAAY;MACZ,MAAY;IACxB,CAAS;AACD,aAAS,WAAW,YAAY;AAEhC,WAAO;EACf;EAEI,OAAO,yBAAyB,OAAO;AACnC,UAAM,qBAAqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+B3B,UAAM,uBAAuB;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4B7B,UAAM,WAAW;MACb,SAAS;QACL,QAAQ;QACR,SAAS,IAAU,MAAM,KAAK;MAC9C;MACY,qBAAqB;QACjB,QAAQ;QACR,SAAS,IAAU,QAAO;MAC1C;MACY,YAAY;QACR,QAAQ;QACR,SAAS,IAAU,QAAO;MAC1C;MACY,WAAW;QACP,SAAS;MACzB;IACA;AAEQ,UAAM,WAAW,IAAU,eAAe;MACtC;MACA,cAAc;MACd,gBAAgB;MAChB,aAAa;MACb,WAAW;MACX,YAAY;MACZ,MAAY;IACxB,CAAS;AAED,WAAO;EACf;EAEI,UAAU;AACN,SAAK,kBAAiB;AACtB,SAAK,mBAAkB;AACvB,SAAK,mBAAkB;AACvB,SAAK,oBAAmB;AACxB,SAAK,+BAA8B;AACnC,SAAK,yBAAwB;EACrC;AACA;ACncA,IAAM,cAAc,IAAU,QAAQ,GAAG,GAAG,CAAC;AAC7C,IAAM,WAAW,IAAU,QAAQ,GAAG,GAAG,CAAC;AAC1C,IAAM,iBAAiB,IAAU,QAAQ,GAAG,GAAG,CAAC;AAEzC,IAAMC,OAAN,MAAU;EAEb,YAAY,SAAS,IAAU,QAAO,GAAI,YAAY,IAAU,QAAO,GAAI;AAiB3E,wCAAe,WAAW;AAEtB,YAAM,yBAAyB,IAAU,QAAO;AAChD,YAAM,8BAA8B,CAAA;AACpC,YAAM,cAAc,CAAA;AACpB,YAAM,iBAAiB,CAAA;AAEvB,aAAO,SAAS,KAAK,QAAQ;AAEzB,oBAAY,CAAC,IAAI,KAAK,OAAO;AAC7B,oBAAY,CAAC,IAAI,KAAK,OAAO;AAC7B,oBAAY,CAAC,IAAI,KAAK,OAAO;AAC7B,uBAAe,CAAC,IAAI,KAAK,UAAU;AACnC,uBAAe,CAAC,IAAI,KAAK,UAAU;AACnC,uBAAe,CAAC,IAAI,KAAK,UAAU;AAEnC,YAAI,KAAK,iBAAiB,KAAK,KAAK,QAAQ,IAAM,GAAG;AACjD,cAAI,QAAQ;AACR,mBAAO,OAAO,KAAK,KAAK,MAAM;AAC9B,mBAAO,OAAO,IAAI,GAAG,GAAG,CAAC;AACzB,mBAAO,WAAW;UACtC;AACgB,iBAAO;QACvB;AAEY,iBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,cAAI,eAAe,CAAC,KAAK;AAAK;AAE9B,gBAAM,YAAY,KAAK,IAAI,cAAc,KAAK,IAAI,WAAW;AAC7D,gBAAM,aAAa,eAAe,CAAC,IAAI,IAAI,IAAI,MAAM,IAAI;AACzD,cAAI,aAAa,CAAC,KAAK,KAAK,eAAe,CAAC,CAAC;AAC7C,sCAA4B,CAAC,IAAI,KAAK,IAAI,WAAW,IAAI,KAAK,IAAI,WAAW,IAAI,WAAW;AAC5F,cAAI,SAAS,4BAA4B,CAAC,IAAI,YAAY,CAAC;AAE3D,cAAI,SAAS,aAAa,GAAG;AACzB,kBAAM,QAAQ,IAAI,KAAK;AACvB,kBAAM,QAAQ,IAAI,KAAK;AACvB,wCAA4B,CAAC,IAAI,eAAe,IAAI,IAAI,eAAe,CAAC,IAAI,SAAS,YAAY,IAAI;AACrG,wCAA4B,CAAC,IAAI,eAAe,IAAI,IAAI,eAAe,CAAC,IAAI,SAAS,YAAY,IAAI;AACrG,mCAAuB;cAAI,4BAA4B,CAAC;cAC7B,4BAA4B,IAAI;cAChC,4BAA4B,IAAI;YAAC;AAC5D,gBAAI,KAAK,iBAAiB,KAAK,wBAAwB,IAAM,GAAG;AAC5D,kBAAI,QAAQ;AACR,uBAAO,OAAO,KAAK,sBAAsB;AACzC,uBAAO,OAAO,KAAK,SAAS,EAAE,eAAe,UAAU;AACvD,uBAAO,WAAW,uBAAuB,IAAI,KAAK,MAAM,EAAE,OAAM;cAC5F;AACwB,qBAAO;YAC/B;UACA;QACA;AAEY,eAAO;MACnB;IAEA,EAAK;AAED,2CAAkB,WAAW;AAEzB,YAAM,oBAAoB,IAAU,QAAO;AAE3C,aAAO,SAAS,QAAQ,QAAQ,QAAQ;AACpC,0BAAkB,KAAK,MAAM,EAAE,IAAI,KAAK,MAAM;AAC9C,cAAM,oBAAoB,kBAAkB,IAAI,KAAK,SAAS;AAC9D,cAAM,sBAAsB,oBAAoB;AAChD,cAAM,mBAAmB,kBAAkB,IAAI,iBAAiB;AAChE,cAAM,SAAS,mBAAmB;AAClC,cAAM,WAAW,SAAS;AAE1B,YAAI,SAAS;AAAU,iBAAO;AAE9B,cAAM,MAAM,KAAK,KAAK,WAAW,MAAM;AACvC,cAAM,KAAK,oBAAoB;AAC/B,cAAM,KAAK,oBAAoB;AAE/B,YAAI,KAAK;AAAG,iBAAO;AACnB,YAAI,IAAI,KAAK,IAAI,KAAK;AAEtB,YAAI,QAAQ;AACR,iBAAO,OAAO,KAAK,KAAK,MAAM,EAAE,gBAAgB,KAAK,WAAW,CAAC;AACjE,iBAAO,OAAO,KAAK,OAAO,MAAM,EAAE,IAAI,MAAM,EAAE,UAAS;AACvD,iBAAO,WAAW;QAClC;AACY,eAAO;MACnB;IAEA,EAAK;AAvGG,SAAK,SAAS,IAAU,QAAO;AAC/B,SAAK,YAAY,IAAU,QAAO;AAClC,SAAK,cAAc,QAAQ,SAAS;EAC5C;EAEI,cAAc,QAAQ,WAAW;AAC7B,SAAK,OAAO,KAAK,MAAM;AACvB,SAAK,UAAU,KAAK,SAAS,EAAE,UAAS;EAChD;EAEI,iBAAiB,KAAK,OAAO,SAAS;AAClC,WAAO,MAAM,IAAI,IAAI,IAAI,IAAI,WAAW,MAAM,IAAI,IAAI,IAAI,IAAI,WACvD,MAAM,IAAI,IAAI,IAAI,IAAI,WAAW,MAAM,IAAI,IAAI,IAAI,IAAI,WACvD,MAAM,IAAI,IAAI,IAAI,IAAI,WAAW,MAAM,IAAI,IAAI,IAAI,IAAI,UAAU,QAAQ;EACxF;AA0FA;AC/GO,IAAM,MAAN,MAAM,KAAI;EAEb,cAAc;AACV,SAAK,SAAS,IAAU,QAAO;AAC/B,SAAK,SAAS,IAAU,QAAO;AAC/B,SAAK,WAAW;AAChB,SAAK,aAAa;EAC1B;EAEI,IAAI,QAAQ,QAAQ,UAAU,YAAY;AACtC,SAAK,OAAO,KAAK,MAAM;AACvB,SAAK,OAAO,KAAK,MAAM;AACvB,SAAK,WAAW;AAChB,SAAK,aAAa;EAC1B;EAEI,QAAQ;AACJ,UAAM,WAAW,IAAI,KAAG;AACxB,aAAS,OAAO,KAAK,KAAK,MAAM;AAChC,aAAS,OAAO,KAAK,KAAK,MAAM;AAChC,aAAS,WAAW,KAAK;AACzB,aAAS,aAAa,KAAK;AAC3B,WAAO;EACf;AAEA;ACvBO,IAAM,YAAN,MAAgB;EAEnB,YAAY,QAAQ,WAAW,mCAAmC,OAAO;AAKzE,0DAAiC,WAAW;AAExC,YAAM,YAAY,IAAU,QAAO;AAEnC,aAAO,SAAS,QAAQ,gBAAgB,kBAAkB;AACtD,kBAAU,IAAI,eAAe,IAAI,iBAAiB,IAAI,IAAM;AAC5D,kBAAU,KAAK,iBAAiB,IAAI,eAAe,KAAK,iBAAiB,IAAI,IAAM;AACnF,YAAI,OAAO,qBAAqB;AAC5B,eAAK,IAAI,OAAO,sBAAsB,OAAO,WAAW;AACxD,eAAK,IAAI,UAAU,IAAI,UAAU,GAAG,UAAU,GAAG,GAAG,EAAG,UAAU,MAAM,EAAE,IAAI,KAAK,IAAI,MAAM,EAAE,UAAS;AACvG,eAAK,SAAS;QAC9B,WAAuB,OAAO,sBAAsB;AACpC,eAAK,IAAI,OAAO;YAAI,UAAU;YAAG,UAAU;aACvB,OAAO,OAAO,OAAO,QAAQ,OAAO,OAAO,OAAO;UAAI,EAAE,UAAU,MAAM;AAC5F,eAAK,IAAI,UAAU,IAAI,GAAG,GAAG,EAAE,EAAE,mBAAmB,OAAO,WAAW;AACtE,eAAK,SAAS;QAC9B,OAAmB;AACH,gBAAM,IAAI,MAAM,wEAAwE;QACxG;MACA;IAEA,EAAK;AAED,8CAAqB,WAAW;AAE5B,YAAM,UAAU,IAAU,QAAO;AACjC,YAAM,YAAY,IAAU,QAAO;AACnC,YAAM,iBAAiB,IAAU,QAAO;AACxC,YAAM,WAAW,IAAIA,KAAG;AACxB,YAAM,YAAY,IAAU,QAAO;AAEnC,aAAO,SAAS,WAAW,UAAU,CAAA,GAAI;AACrC,cAAM,YAAY,UAAU,aAAY;AAExC,YAAI,CAAC;AAAW;AAEhB,iBAAS,IAAI,GAAG,IAAI,UAAU,SAAS,QAAQ,KAAK;AAChD,gBAAM,UAAU,UAAU,SAAS,CAAC;AAEpC,oBAAU,KAAK,UAAU,WAAW;AACpC,cAAI,UAAU,aAAa;AACvB,sBAAU,kBAAkB,GAAG,cAAc;AAC7C,sBAAU,SAAS,cAAc;UACrD;AACgB,kBAAQ,KAAK,SAAS,EAAE,OAAM;AAE9B,mBAAS,OAAO,KAAK,KAAK,IAAI,MAAM,EAAE,aAAa,OAAO;AAC1D,mBAAS,UAAU,KAAK,KAAK,IAAI,MAAM,EAAE,IAAI,KAAK,IAAI,SAAS;AAC/D,mBAAS,UAAU,aAAa,OAAO,EAAE,IAAI,SAAS,MAAM,EAAE,UAAS;AAEvE,gBAAM,oBAAoB,CAAA;AAC1B,cAAI,QAAQ,UAAU;AAClB,iBAAK,uBAAuB,UAAU,WAAW,QAAQ,UAAU,iBAAiB;UACxG;AAEgB,4BAAkB,QAAQ,CAAC,QAAQ;AAC/B,gBAAI,OAAO,aAAa,SAAS;AACjC,gBAAI,OAAO,aAAa,SAAS,EAAE,UAAS;AAC5C,gBAAI,WAAW,UAAU,KAAK,IAAI,MAAM,EAAE,IAAI,KAAK,IAAI,MAAM,EAAE,OAAM;UACzF,CAAiB;AAED,kBAAQ,KAAK,GAAG,iBAAiB;QACjD;AAEY,gBAAQ,KAAK,CAAC,GAAG,MAAM;AACnB,cAAI,EAAE,WAAW,EAAE;AAAU,mBAAO;;AAC/B,mBAAO;QAC5B,CAAa;AAED,eAAO;MACnB;IAEA,EAAK;AAED,kDAAyB,WAAW;AAEhC,YAAM,YAAY,IAAU,QAAO;AACnC,YAAM,aAAa,IAAU,QAAO;AACpC,YAAM,YAAY,IAAU,QAAO;AACnC,YAAM,eAAe,IAAU,WAAU;AACzC,YAAM,UAAU,IAAI,IAAG;AACvB,YAAM,eAAe;AAErB,YAAM,SAAS,IAAU,QAAQ,GAAG,GAAG,CAAC;AACxC,YAAM,qBAAqB,IAAU,QAAO;AAC5C,YAAM,cAAc,IAAU,QAAO;AACrC,YAAM,iBAAiB,IAAU,QAAO;AACxC,YAAM,gBAAgB,IAAU,QAAO;AACvC,YAAM,kBAAkB,IAAU,QAAO;AACzC,YAAM,UAAU,IAAIA,KAAG;AAEvB,aAAO,SAAS,KAAK,WAAW,MAAM,UAAU,CAAA,GAAI;AAChD,YAAI,CAAC,IAAI,aAAa,KAAK,WAAW,GAAG;AACrC;QAChB;AACY,YAAI,KAAK,QAAQ,KAAK,KAAK,WAAW,KAAK,KAAK,QAAQ,SAAS,GAAG;AAChE,mBAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,QAAQ,KAAK;AAC/C,kBAAM,mBAAmB,KAAK,KAAK,QAAQ,CAAC;AAC5C,sBAAU,UAAU,cAAc,kBAAkB,SAAS;AAC7D,sBAAU,UAAU,eAAe,kBAAkB,UAAU;AAC/D,sBAAU,UAAU,yBAAyB,kBAAkB,WAAW,YAAY;AAEtF,gBAAI,UAAU,KAAK,gBAAgB,UAAU,KAAK,gBAAgB,UAAU,KAAK,cAAc;AAC3F;YACxB;AAEoB,gBAAI,CAAC,KAAK,kCAAkC;AACxC,oBAAM,UAAU,UAAU,IAAI,UAAU,IAAI,UAAU,KAAK;AAC3D,kBAAI,IAAI,gBAAgB,YAAY,QAAQ,OAAO,GAAG;AAClD,sBAAM,WAAW,QAAQ,MAAK;AAC9B,yBAAS,aAAa;AACtB,wBAAQ,KAAK,QAAQ;cACjD;YACA,OAA2B;AACH,0BAAY,UAAU,UAAU,GAAG,UAAU,GAAG,UAAU,CAAC;AAC3D,6BAAe,2BAA2B,YAAY;AACtD,oBAAM,eAAe,KAAK,MAAM,UAAU,CAAC,IAAI;AAC/C,iCAAmB,UAAU,cAAc,cAAc,YAAY;AACrE,8BAAgB,KAAK,kBAAkB,EAAE,SAAS,cAAc,EAAE,SAAS,WAAW;AACtF,4BAAc,KAAK,eAAe,EAAE,OAAM;AAC1C,sBAAQ,OAAO,KAAK,IAAI,MAAM,EAAE,IAAI,UAAU,EAAE,aAAa,aAAa;AAC1E,sBAAQ,UAAU,KAAK,IAAI,MAAM,EAAE,IAAI,IAAI,SAAS,EAAE,IAAI,UAAU;AACpE,sBAAQ,UAAU,aAAa,aAAa,EAAE,IAAI,QAAQ,MAAM,EAAE,UAAS;AAC3E,kBAAI,QAAQ,gBAAgB,QAAQ,GAAK,OAAO,GAAG;AAC/C,sBAAM,WAAW,QAAQ,MAAK;AAC9B,yBAAS,aAAa;AACtB,yBAAS,OAAO,aAAa,eAAe,EAAE,IAAI,UAAU;AAC5D,wBAAQ,KAAK,QAAQ;cACjD;YACA;UACA;QACA;AACY,YAAI,KAAK,YAAY,KAAK,SAAS,SAAS,GAAG;AAC3C,mBAAS,SAAS,KAAK,UAAU;AAC7B,iBAAK,uBAAuB,KAAK,WAAW,OAAO,OAAO;UAC9E;QACA;AACY,eAAO;MACnB;IAEA,EAAK;AAhJG,SAAK,MAAM,IAAIA,KAAI,QAAQ,SAAS;AACpC,SAAK,mCAAmC;EAChD;AA+IA;ACnJO,IAAM,aAAN,MAAiB;EAEpB,YAAY,aAAa,WAAW,IAAU,QAAO,GAAI,aAAa,IAAU,WAAU,GAC9E,QAAQ,IAAU,QAAQ,GAAG,GAAG,CAAC,GAAG,eAAe,GAAG;AAC9D,SAAK,cAAc;AACnB,SAAK,WAAW,SAAS,MAAK;AAC9B,SAAK,aAAa,WAAW,MAAK;AAClC,SAAK,QAAQ,MAAM,MAAK;AACxB,SAAK,YAAY,IAAU,QAAO;AAClC,SAAK,eAAe;AACpB,SAAK,gBAAe;EAC5B;EAEI,kBAAkB,YAAY;AAC1B,SAAK,SAAS,KAAK,WAAW,QAAQ;AACtC,SAAK,WAAW,KAAK,WAAW,UAAU;AAC1C,SAAK,MAAM,KAAK,WAAW,KAAK;AAChC,SAAK,UAAU,KAAK,WAAW,SAAS;EAChD;EAEI,kBAAkB;AACd,SAAK,UAAU,QAAQ,KAAK,UAAU,KAAK,YAAY,KAAK,KAAK;EACzE;AACA;ACzBA,IAAM,iBAAN,MAAM,eAAc;EAIhB,YAAY,KAAK,KAAK,OAAO,IAAI;AAC7B,SAAK,MAAM,IAAU,QAAO,EAAG,KAAK,GAAG;AACvC,SAAK,MAAM,IAAU,QAAO,EAAG,KAAK,GAAG;AACvC,SAAK,cAAc,IAAU,KAAK,KAAK,KAAK,KAAK,GAAG;AACpD,SAAK,SAAS,IAAU,QAAO,EAAG,KAAK,KAAK,GAAG,EAAE,IAAI,KAAK,GAAG,EAAE,eAAe,GAAG,EAAE,IAAI,KAAK,GAAG;AAC/F,SAAK,QAAQ;AACb,SAAK,WAAW,CAAA;AAChB,SAAK,OAAO;AACZ,SAAK,KAAK,MAAM,eAAc;EACtC;AAEA;AAbI,cAFE,gBAEK,SAAQ;AAFnB,IAAM,gBAAN;AAiBA,IAAM,eAAN,MAAM,cAAa;EAEf,YAAY,UAAU,mBAAmB;AACrC,SAAK,WAAW;AAChB,SAAK,oBAAoB;AACzB,SAAK,kBAAkB,IAAU,QAAO;AACxC,SAAK,WAAW,IAAU,QAAO;AACjC,SAAK,WAAW,IAAU,QAAO;AACjC,SAAK,WAAW;AAChB,SAAK,mBAAmB,CAAA;AACxB,SAAK,YAAY;EACzB;EAEI,OAAO,yBAAyB,mBAAmB;AAC/C,UAAM,YAAY,IAAU,QAAO,EAAG,UAAU,kBAAkB,GAAG;AACrE,UAAM,YAAY,IAAU,QAAO,EAAG,UAAU,kBAAkB,GAAG;AACrE,UAAM,gBAAgB,IAAI,cAAc,WAAW,WAAW,kBAAkB,OAAO,kBAAkB,EAAE;AAC3G,QAAI,kBAAkB,KAAK,SAAS;AAChC,oBAAc,OAAO;QACjB,WAAW,CAAA;MAC3B;AACY,eAAS,SAAS,kBAAkB,KAAK,SAAS;AAC9C,sBAAc,KAAK,QAAQ,KAAK,KAAK;MACrD;IACA;AACQ,QAAI,kBAAkB,UAAU;AAC5B,eAAS,SAAS,kBAAkB,UAAU;AAC1C,sBAAc,SAAS,KAAK,cAAa,yBAAyB,KAAK,CAAC;MACxF;IACA;AACQ,WAAO;EACf;EAEI,OAAO,qBAAqB,eAAe,WAAW;AAClD,UAAM,mBAAmB,IAAI,cAAa,cAAc,UAAU,cAAc,iBAAiB;AACjG,qBAAiB,WAAW,IAAU,QAAO,EAAG,UAAU,cAAc,QAAQ;AAChF,qBAAiB,WAAW,IAAU,QAAO,EAAG,UAAU,cAAc,QAAQ;AAEhF,qBAAiB,YAAY;AAC7B,qBAAiB,WAAW,cAAa,yBAAyB,cAAc,QAAQ;AAGxF,UAAM,sBAAsB,CAAC,MAAM,cAAc;AAC7C,UAAI,KAAK,SAAS,WAAW;AAAG,kBAAU,IAAI;AAC9C,eAAS,SAAS,KAAK,UAAU;AAC7B,4BAAoB,OAAO,SAAS;MACpD;IACA;AAEQ,qBAAiB,mBAAmB,CAAA;AACpC,wBAAoB,iBAAiB,UAAU,CAAC,SAAS;AACrD,UAAI,KAAK,QAAQ,KAAK,KAAK,WAAW,KAAK,KAAK,QAAQ,SAAS,GAAG;AAChE,yBAAiB,iBAAiB,KAAK,IAAI;MAC3D;IACA,CAAS;AAED,WAAO;EACf;AACA;AAEA,SAAS,sBAAsB,MAAM;AAEjC,MAAI,2BAA2B;EAE/B,MAAM,WAAW;IAEb,YAAY,KAAK,KAAK;AAClB,WAAK,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AAClC,WAAK,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;IAC9C;IAEQ,cAAc,OAAO;AACjB,aAAO,MAAM,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,MAAM,CAAC,KAAK,KAAK,IAAI,CAAC,KACjD,MAAM,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,MAAM,CAAC,KAAK,KAAK,IAAI,CAAC,KACjD,MAAM,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,MAAM,CAAC,KAAK,KAAK,IAAI,CAAC;IACpE;EACA;EAEI,MAAM,mBAAmB;IAErB,YAAY,UAAU,mBAAmB;AACrC,WAAK,WAAW;AAChB,WAAK,oBAAoB;AACzB,WAAK,kBAAkB,CAAA;AACvB,WAAK,WAAW,CAAA;AAChB,WAAK,WAAW,CAAA;AAChB,WAAK,WAAW;AAChB,WAAK,eAAe,CAAA;AACpB,WAAK,mBAAmB,CAAA;AACxB,WAAK,YAAY;AACjB,WAAK,WAAW;IAC5B;EAEA;EAEI,MAAM,oBAAoB;IAEtB,YAAY,KAAK,KAAK,OAAO,IAAI;AAC7B,WAAK,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AAClC,WAAK,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;AAClC,WAAK,SAAS;SAAE,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,MAAM,IAAI,CAAC;SAC9B,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,MAAM,IAAI,CAAC;SAC9B,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,MAAM,IAAI,CAAC;MAAC;AAC/C,WAAK,QAAQ;AACb,WAAK,WAAW,CAAA;AAChB,WAAK,OAAO;AACZ,WAAK,KAAK,MAAM;IAC5B;EAEA;AAEI,yBAAuB,SAAS,MAAM,MAAM,eAAe,cAAc;AACrE,UAAM,aAAa,KAAK,KAAK,QAAQ;AAErC,QAAI,aAAa,KAAK,qBAAqB,KAAK,QAAQ,KAAK,UAAU;AACnE,YAAM,aAAa,CAAA;AACnB,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,QAAQ,KAAK;AAC/C,YAAI,CAAC,KAAK,aAAa,KAAK,KAAK,QAAQ,CAAC,CAAC,GAAG;AAC1C,qBAAW,KAAK,KAAK,KAAK,QAAQ,CAAC,CAAC;AACpC,eAAK,aAAa,KAAK,KAAK,QAAQ,CAAC,CAAC,IAAI;QAC9D;MACA;AACY,WAAK,KAAK,UAAU;AACpB,WAAK,KAAK,QAAQ,KAAK,CAAC,GAAG,MAAM;AAC7B,YAAI,IAAI;AAAG,iBAAO;;AACb,iBAAO;MAC5B,CAAa;AACD,WAAK,iBAAiB,KAAK,IAAI;AAC/B;IACZ;AAEQ,UAAM,iBAAiB;MAAC,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC;MACxB,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC;MACxB,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC;IAAC;AACjD,UAAM,iBAAiB;MAAC,eAAe,CAAC,IAAI;MACpB,eAAe,CAAC,IAAI;MACpB,eAAe,CAAC,IAAI;IAAG;AAC/C,UAAM,aAAa;MAAC,KAAK,IAAI,CAAC,IAAI,eAAe,CAAC;MAC9B,KAAK,IAAI,CAAC,IAAI,eAAe,CAAC;MAC9B,KAAK,IAAI,CAAC,IAAI,eAAe,CAAC;IAAC;AAEnD,UAAM,iBAAiB;;MAEnB,IAAI;QAAW,CAAC,WAAW,CAAC,IAAI,eAAe,CAAC,GAAG,WAAW,CAAC,GAAG,WAAW,CAAC,IAAI,eAAe,CAAC,CAAC;QACpF,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC,IAAI,eAAe,CAAC,GAAG,WAAW,CAAC,CAAC;MAAC;MAChF,IAAI;QAAW,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC,GAAG,WAAW,CAAC,IAAI,eAAe,CAAC,CAAC;QAChE,CAAC,WAAW,CAAC,IAAI,eAAe,CAAC,GAAG,WAAW,CAAC,IAAI,eAAe,CAAC,GAAG,WAAW,CAAC,CAAC;MAAC;MACpG,IAAI;QAAW,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC,GAAG,WAAW,CAAC,CAAC;QAC5C,CAAC,WAAW,CAAC,IAAI,eAAe,CAAC,GAAG,WAAW,CAAC,IAAI,eAAe,CAAC,GAAG,WAAW,CAAC,IAAI,eAAe,CAAC,CAAC;MAAC;MACxH,IAAI;QAAW,CAAC,WAAW,CAAC,IAAI,eAAe,CAAC,GAAG,WAAW,CAAC,GAAG,WAAW,CAAC,CAAC;QAChE,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC,IAAI,eAAe,CAAC,GAAG,WAAW,CAAC,IAAI,eAAe,CAAC,CAAC;MAAC;;MAGpG,IAAI;QAAW,CAAC,WAAW,CAAC,IAAI,eAAe,CAAC,GAAG,WAAW,CAAC,IAAI,eAAe,CAAC,GAAG,WAAW,CAAC,IAAI,eAAe,CAAC,CAAC;QACxG,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC,GAAG,WAAW,CAAC,CAAC;MAAC;MAC5D,IAAI;QAAW,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC,IAAI,eAAe,CAAC,GAAG,WAAW,CAAC,IAAI,eAAe,CAAC,CAAC;QACpF,CAAC,WAAW,CAAC,IAAI,eAAe,CAAC,GAAG,WAAW,CAAC,GAAG,WAAW,CAAC,CAAC;MAAC;MAChF,IAAI;QAAW,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC,IAAI,eAAe,CAAC,GAAG,WAAW,CAAC,CAAC;QAChE,CAAC,WAAW,CAAC,IAAI,eAAe,CAAC,GAAG,WAAW,CAAC,GAAG,WAAW,CAAC,IAAI,eAAe,CAAC,CAAC;MAAC;MACpG,IAAI;QAAW,CAAC,WAAW,CAAC,IAAI,eAAe,CAAC,GAAG,WAAW,CAAC,IAAI,eAAe,CAAC,GAAG,WAAW,CAAC,CAAC;QACpF,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC,GAAG,WAAW,CAAC,IAAI,eAAe,CAAC,CAAC;MAAC;IAC5F;AAEQ,UAAM,cAAc,CAAA;AACpB,UAAM,cAAc,CAAA;AACpB,aAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC5C,kBAAY,CAAC,IAAI;AACjB,kBAAY,CAAC,IAAI,CAAA;IAC7B;AAEQ,UAAM,SAAS,CAAC,GAAG,GAAG,CAAC;AACvB,aAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACjC,YAAM,mBAAmB,KAAK,KAAK,QAAQ,CAAC;AAC5C,YAAM,aAAa,cAAc,gBAAgB;AACjD,aAAO,CAAC,IAAI,aAAa,UAAU;AACnC,aAAO,CAAC,IAAI,aAAa,aAAa,CAAC;AACvC,aAAO,CAAC,IAAI,aAAa,aAAa,CAAC;AACvC,eAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC5C,YAAI,eAAe,CAAC,EAAE,cAAc,MAAM,GAAG;AACzC,sBAAY,CAAC;AACb,sBAAY,CAAC,EAAE,KAAK,gBAAgB;QACxD;MACA;IACA;AAEQ,aAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC5C,YAAM,YAAY,IAAI,oBAAoB,eAAe,CAAC,EAAE,KAAK,eAAe,CAAC,EAAE,KAAK,KAAK,QAAQ,CAAC;AACtG,gBAAU,OAAO;QACb,WAAW,YAAY,CAAC;MACxC;AACY,WAAK,SAAS,KAAK,SAAS;IACxC;AAEQ,SAAK,OAAO,CAAA;AACZ,aAAS,SAAS,KAAK,UAAU;AAC7B,2BAAqB,MAAM,OAAO,eAAe,YAAY;IACzE;AACQ;EACR;AAEI,QAAM,eAAe,CAAC,cAAc,UAAU,sBAAsB;AAEhE,UAAM,WAAW,CAAC,GAAG,GAAG,CAAC;AACzB,UAAM,WAAW,CAAC,GAAG,GAAG,CAAC;AACzB,UAAM,UAAU,CAAA;AAChB,UAAM,cAAc,KAAK,MAAM,aAAa,SAAS,CAAC;AACtD,aAAU,IAAI,GAAG,IAAI,aAAa,KAAM;AACpC,YAAM,OAAO,IAAI;AACjB,YAAM,IAAI,aAAa,IAAI;AAC3B,YAAM,IAAI,aAAa,OAAO,CAAC;AAC/B,YAAM,IAAI,aAAa,OAAO,CAAC;AAC/B,YAAM,QAAQ,KAAK,MAAM,aAAa,OAAO,CAAC,CAAC;AAC/C,UAAI,MAAM,KAAK,IAAI,SAAS,CAAC;AAAG,iBAAS,CAAC,IAAI;AAC9C,UAAI,MAAM,KAAK,IAAI,SAAS,CAAC;AAAG,iBAAS,CAAC,IAAI;AAC9C,UAAI,MAAM,KAAK,IAAI,SAAS,CAAC;AAAG,iBAAS,CAAC,IAAI;AAC9C,UAAI,MAAM,KAAK,IAAI,SAAS,CAAC;AAAG,iBAAS,CAAC,IAAI;AAC9C,UAAI,MAAM,KAAK,IAAI,SAAS,CAAC;AAAG,iBAAS,CAAC,IAAI;AAC9C,UAAI,MAAM,KAAK,IAAI,SAAS,CAAC;AAAG,iBAAS,CAAC,IAAI;AAC9C,cAAQ,KAAK,KAAK;IAC9B;AACQ,UAAM,UAAU,IAAI,mBAAmB,UAAU,iBAAiB;AAClE,YAAQ,WAAW;AACnB,YAAQ,WAAW;AACnB,YAAQ,WAAW,IAAI,oBAAoB,QAAQ,UAAU,QAAQ,UAAU,CAAC;AAChF,YAAQ,SAAS,OAAO;MACpB,WAAW;IACvB;AAEQ,WAAO;EACf;AAEI,WAAS,gBAAgB,YAAY,UAAU,mBAAmB;AAC9D,UAAM,gBAAgB,CAAA;AACtB,aAAS,gBAAgB,YAAY;AACjC,YAAM,cAAc,KAAK,MAAM,aAAa,SAAS,CAAC;AACtD,eAAU,IAAI,GAAG,IAAI,aAAa,KAAM;AACpC,cAAM,OAAO,IAAI;AACjB,cAAM,QAAQ,KAAK,MAAM,aAAa,OAAO,CAAC,CAAC;AAC/C,sBAAc,KAAK,IAAI;MACvC;IACA;AACQ,UAAM,WAAW,CAAA;AACjB,aAAS,gBAAgB,YAAY;AACjC,YAAM,UAAU,aAAa,cAAc,UAAU,iBAAiB;AACtE,eAAS,KAAK,OAAO;AACrB,2BAAqB,SAAS,QAAQ,UAAU,eAAe,YAAY;IACvF;AACQ,SAAK,YAAY;MACb,YAAY;IACxB,CAAS;EACT;AAEI,OAAK,YAAY,CAAC,MAAM;AACpB,QAAI,EAAE,KAAK,SAAS;AAChB,sBAAgB,EAAE,KAAK,QAAQ,SAAS,EAAE,KAAK,QAAQ,UAAU,EAAE,KAAK,QAAQ,iBAAiB;IAC7G;EACA;AACA;AAEA,SAAS,qBAAqB,iBAAiBC,UAAS,iBAAiB,UAAU,mBAAmB;AAClG,kBAAgB,YAAY;IACxB,WAAW;MACP,WAAWA;MACX,YAAY;MACZ,qBAAqB;IACjC;EACA,GAAO,eAAe;AACtB;AAEA,SAAS,uBAAuB;AAC5B,QAAM,kBAAkB,IAAI;IACxB,IAAI;MACA,IAAI,KAAK,CAAC,KAAK,sBAAsB,SAAQ,GAAI,SAAS,GAAG;QACzD,MAAM;MACtB,CAAa;IACb;EACA;AACI,SAAO;AACX;AAKO,IAAM,YAAN,MAAgB;EAEnB,YAAY,UAAU,mBAAmB;AA6BzC;;;;;;;;;;;4CAAmB,SAAS,WAAW,aAAa,MAAM,MAAM,iBAAiB,yBAAyB;AACtG,UAAI,CAAC,KAAK;AAAiB,aAAK,kBAAkB,qBAAoB;AAEtE,WAAK,YAAY;AACjB,WAAK,WAAW,CAAA;AAChB,YAAM,SAAS,IAAU,QAAO;AAEhC,YAAM,qBAAqB,CAAC,aAAa,eAAe;AACpD,cAAM,eAAe,IAAI,aAAa,aAAa,CAAC;AACpD,YAAI,aAAa;AACjB,iBAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACjC,gBAAM,mBAAmB,IAAI;AAC7B,cAAI,WAAW,gBAAgB,GAAG;AAC9B,sBAAU,eAAe,kBAAkB,MAAM;AACjD,kBAAM,UAAU,aAAa;AAC7B,yBAAa,OAAO,IAAI,OAAO;AAC/B,yBAAa,UAAU,CAAC,IAAI,OAAO;AACnC,yBAAa,UAAU,CAAC,IAAI,OAAO;AACnC,yBAAa,UAAU,CAAC,IAAI;AAC5B;UACpB;QACA;AACY,eAAO;MACnB;AAEQ,aAAO,IAAI,QAAQ,CAAC,YAAY;AAE5B,cAAM,oBAAoB,MAAM;AAC5B,cAAI,KAAK,UAAU;AACf,iBAAK,sBAAqB;AAC1B,oBAAO;AACP,mBAAO;UAC3B;AACgB,iBAAO;QACvB;AAEY,YAAI;AAAiB,0BAAgB,KAAK;AAE1C,uBAAe,MAAM;AAEjB,cAAI,kBAAiB;AAAI;AAEzB,gBAAM,aAAa,CAAA;AACnB,cAAI,UAAU,aAAa;AACvB,gBAAI,cAAc;AAClB,qBAAS,IAAI,GAAG,IAAI,UAAU,OAAO,QAAQ,KAAK;AAC9C,oBAAM,QAAQ,UAAU,SAAS,CAAC;AAClC,oBAAM,aAAa,MAAM,YAAY,cAAa;AAClD,oBAAM,eAAe,mBAAmB,aAAa,UAAU;AAC/D,yBAAW,KAAK,YAAY;AAC5B,6BAAe;YACvC;UACA,OAAuB;AACH,kBAAM,eAAe,mBAAmB,GAAG,UAAU,cAAa,CAAE;AACpE,uBAAW,KAAK,YAAY;UAChD;AAEgB,eAAK,gBAAgB,YAAY,CAAC,MAAM;AAEpC,gBAAI,kBAAiB;AAAI;AAEzB,gBAAI,EAAE,KAAK,UAAU;AAEjB,kBAAI;AAAyB,wCAAwB,KAAK;AAE1D,6BAAe,MAAM;AAEjB,oBAAI,kBAAiB;AAAI;AAEzB,yBAAS,iBAAiB,EAAE,KAAK,UAAU;AACvC,wBAAM,mBAAmB,aAAa,qBAAqB,eAAe,SAAS;AACnF,uBAAK,SAAS,KAAK,gBAAgB;gBACnE;AAC4B,qBAAK,sBAAqB;AAE1B,oBAAI;AAAyB,0CAAwB,IAAI;AAEzD,+BAAe,MAAM;AACjB,0BAAO;gBACvC,CAA6B;cAE7B,CAAyB;YACzB;UACA;AAEgB,yBAAe,MAAM;AACjB,gBAAI,kBAAiB;AAAI;AACzB,gBAAI;AAAiB,8BAAgB,IAAI;AACzC,kBAAM,kBAAkB,WAAW,IAAI,CAAC,UAAU,MAAM,MAAM;AAC9D,iCAAqB,KAAK,iBAAiB,YAAY,iBAAiB,KAAK,UAAU,KAAK,iBAAiB;UACjI,CAAiB;QAEjB,CAAa;MAEb,CAAS;IAET;AA5HQ,SAAK,WAAW;AAChB,SAAK,oBAAoB;AACzB,SAAK,WAAW,CAAA;AAChB,SAAK,YAAY;EACzB;EAGI,UAAU;AACN,SAAK,sBAAqB;AAC1B,SAAK,WAAW;EACxB;EAEI,wBAAwB;AACpB,QAAI,KAAK;AAAiB,WAAK,gBAAgB,UAAS;AACxD,SAAK,kBAAkB;EAC/B;EA+GI,cAAc;AAEV,QAAI,YAAY;AAChB,SAAK,YAAY,MAAM;AACnB;IACZ,CAAS;AAED,WAAO;EACf;EAEI,YAAY,WAAW;AAEnB,UAAM,sBAAsB,CAAC,MAAMC,eAAc;AAC7C,UAAI,KAAK,SAAS,WAAW;AAAG,QAAAA,WAAU,IAAI;AAC9C,eAAS,SAAS,KAAK,UAAU;AAC7B,4BAAoB,OAAOA,UAAS;MACpD;IACA;AAEQ,aAAS,WAAW,KAAK,UAAU;AAC/B,0BAAoB,QAAQ,UAAU,SAAS;IAC3D;EACA;AAEA;ACxcA,SAAS,gBAAiB,IAAK;AAE3B,QAAM,aAAa,CAAA;AAEnB,WAAS,aAAc,MAAO;AAE1B,QAAK,WAAW,IAAI,MAAM,QAAY;AAElC,aAAO,WAAW,IAAI;IAElC;AAEQ,QAAI;AAEJ,YAAS,MAAI;MAET,KAAK;AACD,oBAAY,GAAG,aAAc,qBAAqB,KAAM,GAAG,aAAc,yBAAyB,KACtF,GAAG,aAAc,4BAA4B;AACzD;MAEJ,KAAK;AACD,oBAAY,GAAG,aAAc,gCAAgC,KACjD,GAAG,aAAc,oCAAoC,KACrD,GAAG,aAAc,uCAAuC;AACpE;MAEJ,KAAK;AACD,oBAAY,GAAG,aAAc,+BAA+B,KAChD,GAAG,aAAc,mCAAmC,KACpD,GAAG,aAAc,sCAAsC;AACnE;MAEJ,KAAK;AACD,oBAAY,GAAG,aAAc,gCAAgC,KAClD,GAAG,aAAc,uCAAuC;AACnE;MAEJ;AACI,oBAAY,GAAG,aAAc,IAAI;IAEjD;AAEQ,eAAW,IAAI,IAAI;AAEnB,WAAO;EAEf;AAEI,SAAO;IAEH,KAAK,SAAU,MAAO;AAElB,aAAO,aAAc,IAAI,MAAO;IAE5C;IAEQ,MAAM,SAAU,cAAe;AAE3B,UAAK,aAAa,UAAW;AAEzB,qBAAc,wBAAwB;AACtC,qBAAc,0BAA0B;MAExD,OAAmB;AAEH,qBAAc,qBAAqB;AACnC,qBAAc,mBAAmB;AACjC,qBAAc,wBAAwB;AACtC,qBAAc,+BAA+B;AAC7C,qBAAc,0BAA0B;AACxC,qBAAc,wBAAwB;AACtC,qBAAc,yBAAyB;AACvC,qBAAc,wBAAwB;MAEtD;AAEY,mBAAc,0BAA0B;AACxC,mBAAc,6BAA6B;AAC3C,mBAAc,sCAAsC;IAEhE;IAEQ,KAAK,SAAU,MAAO;AAElB,YAAM,YAAY,aAAc,IAAI;AAEpC,UAAK,cAAc,MAAO;AAEtB,gBAAQ,KAAM,0BAA0B,OAAO,2BAA2B;MAE1F;AAEY,aAAO;IAEnB;EAEA;AAEA;ACnGA,SAAS,kBAAmB,IAAI,YAAY,YAAa;AAErD,MAAI;AAEJ,WAAS,mBAAmB;AAExB,QAAK,kBAAkB;AAAY,aAAO;AAE1C,QAAK,WAAW,IAAK,gCAAgC,MAAO,MAAO;AAE/D,YAAM,YAAY,WAAW,IAAK,gCAAgC;AAElE,sBAAgB,GAAG,aAAc,UAAU,8BAA8B;IAErF,OAAe;AAEH,sBAAgB;IAE5B;AAEQ,WAAO;EAEf;AAEI,WAAS,gBAAiBC,YAAY;AAElC,QAAKA,eAAc,SAAU;AAEzB,UAAK,GAAG,yBAA0B,GAAG,eAAe,GAAG,UAAU,EAAG,YAAY,KAC5E,GAAG,yBAA0B,GAAG,iBAAiB,GAAG,UAAU,EAAG,YAAY,GAAI;AAEjF,eAAO;MAEvB;AAEY,MAAAA,aAAY;IAExB;AAEQ,QAAKA,eAAc,WAAY;AAE3B,UAAK,GAAG,yBAA0B,GAAG,eAAe,GAAG,YAAY,EAAG,YAAY,KAC9E,GAAG,yBAA0B,GAAG,iBAAiB,GAAG,YAAY,EAAG,YAAY,GAAI;AAEnF,eAAO;MAEvB;IAEA;AAEQ,WAAO;EAEf;AAEI,QAAM,WAAW,OAAO,2BAA2B,eAAe,GAAG,YAAY,SAAS;AAE1F,MAAI,YAAY,WAAW,cAAc,SAAY,WAAW,YAAY;AAC5E,QAAM,eAAe,gBAAiB,SAAS;AAE/C,MAAK,iBAAiB,WAAY;AAE9B,YAAQ,KAAM,wBAAwB,WAAW,wBAAwB,cAAc,UAAU;AACjG,gBAAY;EAEpB;AAEI,QAAM,cAAc,YAAY,WAAW,IAAK,oBAAoB;AAEpE,QAAM,yBAAyB,WAAW,2BAA2B;AAErE,QAAM,cAAc,GAAG,aAAc,GAAG,uBAAuB;AAC/D,QAAM,oBAAoB,GAAG,aAAc,GAAG,8BAA8B;AAC5E,QAAM,iBAAiB,GAAG,aAAc,GAAG,gBAAgB;AAC3D,QAAM,iBAAiB,GAAG,aAAc,GAAG,yBAAyB;AAEpE,QAAM,gBAAgB,GAAG,aAAc,GAAG,kBAAkB;AAC5D,QAAM,oBAAoB,GAAG,aAAc,GAAG,0BAA0B;AACxE,QAAM,cAAc,GAAG,aAAc,GAAG,mBAAmB;AAC3D,QAAM,sBAAsB,GAAG,aAAc,GAAG,4BAA4B;AAE5E,QAAM,iBAAiB,oBAAoB;AAC3C,QAAM,wBAAwB,YAAY,WAAW,IAAK,mBAAmB;AAC7E,QAAM,sBAAsB,kBAAkB;AAE9C,QAAM,aAAa,WAAW,GAAG,aAAc,GAAG,WAAW,IAAK;AAElE,SAAO;IAEH;IAEA;IAEA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;EAER;AAEA;ACpHY,IAAC,kBAAkB;EAC3B,SAAS;EACT,SAAS;EACT,SAAS;AACb;ACJY,IAAC,WAAW;EACpB,MAAM;EACN,OAAO;EACP,SAAS;EACT,MAAM;EACN,OAAO;AACX;ACKA,IAAM,gBAAgB,IAAU,eAAc;AAC9C,IAAM,gBAAgB,IAAU,kBAAiB;AAEjD,IAAM,iCAAiC;AACvC,IAAM,mCAAmC;AAEzC,IAAM,iCAAiC;AACvC,IAAM,mCAAmC;AACzC,IAAM,uCAAuC;AAE7C,IAAM,yBAAyB;AAC/B,IAAM,4BAA4B;AAElC,IAAM,iCAAiC;AAMhC,IAAM,YAAN,MAAM,mBAAwB,KAAK;EAEtC,YAAY,cAAc,MAAM,gCAAgC,OAAO,mBAAmB,GAC9E,kCAAkC,MAAM,mCAAmC,OAC3E,cAAc,OAAO,0BAA0B,MAAM,WAAW,SAAS,MAAM,2BAA2B,GAAG;AACrH,UAAM,eAAe,aAAa;AAksBrC;;;;;;;;;0CAAiB,SAAS,YAAY,CAAA,GAAI,0BAA0B,yBAAyB;AAC1F,aAAO,IAAI,QAAQ,CAAC,YAAY;AAC5B,aAAK,iBAAgB;AAGrB,aAAK,gBAAgB,IAAI,UAAU,GAAG,GAAI;AAC1C,cAAM,iBAAiB,YAAY,IAAG;AACtC,cAAM,aAAa,IAAU,QAAO;AACpC,aAAK,cAAc,iBAAiB,MAAM,CAAC,eAAe;AACtD,eAAK,cAAc,YAAY,UAAU;AACzC,gBAAM,aAAa,KAAK,sBAAsB,UAAU;AACxD,gBAAM,WAAW,UAAU,UAAU,KAAK;AAC1C,iBAAO,WAAW,KAAK;QACvC,GAAe,0BAA0B,uBAAuB,EACnD,KAAK,MAAM;AACR,gBAAM,YAAY,YAAY,IAAG,IAAK;AACtC,cAAI,KAAK,YAAY,SAAS;AAAM,oBAAQ,IAAI,sBAAsB,YAAY,KAAK;AACvF,cAAI,KAAK,UAAU;AACf,oBAAO;UAC3B,OAAuB;AAEH,iBAAK,YAAY,KAAK;AACtB,iBAAK,gBAAgB;AAErB,gBAAI,qBAAqB;AACzB,gBAAI,gBAAgB;AACpB,gBAAI,gBAAgB;AACpB,gBAAI,YAAY;AAEhB,iBAAK,UAAU,YAAY,CAAC,SAAS;AACjC,oBAAM,iBAAiB,KAAK,KAAK,QAAQ;AACzC,kBAAI,iBAAiB,GAAG;AACpB,iCAAiB;AACjB,gCAAgB,KAAK,IAAI,eAAe,cAAc;AACtD;AACA;cAC5B;YACA,CAAqB;AACD,gBAAI,KAAK,YAAY,SAAS,MAAM;AAChC,sBAAQ,IAAI,qBAAqB,KAAK,UAAU,YAAW,CAAE,EAAE;AAC/D,sBAAQ,IAAI,gCAAgC,kBAAkB,EAAE;AAChE,8BAAgB,gBAAgB;AAChC,sBAAQ,IAAI,6BAA6B,aAAa,EAAE;AACxD,sBAAQ,IAAI,sBAAsB,KAAK,cAAa,CAAE,EAAE;YAChF;AACoB,oBAAO;UAC3B;QACA,CAAa;MACb,CAAS;IACT;AAupBI,0CAAiB,WAAW;AAExB,YAAM,WAAW,IAAU,QAAO;AAElC,aAAO,SAAS,kBAAkB,oBAAoB,oBACtC,kBAAkB,kBAAkB,wBAAwB;AACxE,cAAM,aAAa,KAAK,cAAa;AACrC,YAAI,aAAa,GAAG;AAChB,mBAAS;YAAI,iBAAiB,IAAI,KAAK;YAC1B,iBAAiB,IAAI,KAAK;UAAgB;AACvD,eAAK,SAAS,SAAS,SAAS,MAAM,KAAK,QAAQ;AACnD,eAAK,SAAS,SAAS,cAAc,MAAM,IAAI,IAAM,SAAS,GAAG,IAAM,SAAS,CAAC;AACjF,eAAK,SAAS,SAAS,MAAM,MAAM,IAAI,oBAAoB,kBAAkB;AAC7E,eAAK,SAAS,SAAS,iBAAiB,QAAQ,mBAAmB,IAAI;AACvE,eAAK,SAAS,SAAS,UAAU,QAAQ;AACzC,eAAK,SAAS,SAAS,uBAAuB,QAAQ;AACtD,cAAI,KAAK,aAAa;AAClB,qBAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AACzC,mBAAK,SAAS,SAAS,WAAW,MAAM,CAAC,EAAE,KAAK,KAAK,SAAS,CAAC,EAAE,SAAS;YAClG;UACA;AACgB,eAAK,SAAS,qBAAqB;QACnD;MACA;IAEA,EAAK;AA2HD,sEAA6C,2BAAW;AAEpD,UAAI;AAEJ,aAAO,WAAW;AACd,cAAM,gBAAgB,KAAK,iBAAgB;AAE3C,YAAI,CAAC,KAAK;AAAU;AAEpB,cAAM,oBAAqB,KAAK,iBAAiB,KAAK;AACtD,cAAM,iBAAiB,yBAAyB;AAEhD,YAAI,CAAC,qBAAqB,CAAC;AAAgB;AAE3C,YAAI,mBAAmB;AACnB,eAAK,wCAAuC;QAC5D,WAAuB,gBAAgB;AACvB,eAAK,8CAA6C;QAClE;AAEY,cAAM,KAAK,KAAK,SAAS,WAAU;AAEnC,cAAM,eAAe,CAACC,KAAI,MAAM,WAAW;AACvC,gBAAM,SAASA,IAAG,aAAa,IAAI;AACnC,cAAI,CAAC,QAAQ;AACT,oBAAQ,MAAM,mDAAmD;AACjE,mBAAO;UAC3B;AAEgB,UAAAA,IAAG,aAAa,QAAQ,MAAM;AAC9B,UAAAA,IAAG,cAAc,MAAM;AAEvB,gBAAM,WAAWA,IAAG,mBAAmB,QAAQA,IAAG,cAAc;AAChE,cAAI,CAAC,UAAU;AACX,gBAAI,WAAW;AACf,gBAAI,SAASA,IAAG;AAAe,yBAAW;qBACjC,SAASA,IAAG;AAAiB,yBAAW;AACjD,kBAAM,SAASA,IAAG,iBAAiB,MAAM;AACzC,oBAAQ,MAAM,uBAAuB,WAAW,wBAAwB,MAAM;AAC9E,YAAAA,IAAG,aAAa,MAAM;AACtB,mBAAO;UAC3B;AAEgB,iBAAO;QACvB;AAEY,YAAI;AACJ,YAAI,KAAK,kCAAkC;AACvC,qBACA;;;AAGA,cAAI,KAAK,aAAa;AAClB,wBAAY;;mDAEmB,UAAU,SAAS;;;;;;UAMtE,OAAuB;AACH,wBAAY;;;;;;UAMhC;QACA,OAAmB;AACH,qBACA;;;AAGA,cAAI,KAAK,aAAa;AAClB,wBAAY;;kDAEkB,UAAU,SAAS;;;;;;UAMrE,OAAuB;AACH,wBAAY;;;;;;UAMhC;QACA;AAEY,cAAM,WACN;;;;;AAMA,cAAM,aAAa,GAAG,aAAa,GAAG,oBAAoB;AAC1D,cAAM,iBAAiB,GAAG,aAAa,GAAG,eAAe;AACzD,cAAM,wBAAwB,iBAAiB,GAAG,oBAAoB,gBAAgB,GAAG,aAAa,IAAI;AAE1G,YAAI,mBAAmB;AACnB,eAAK,2BAA2B,MAAM,GAAG,kBAAiB;QAC1E;AAEY,WAAG,gBAAgB,KAAK,2BAA2B,GAAG;AAEtD,YAAI,mBAAmB;AACnB,gBAAM,UAAU,GAAG,cAAa;AAChC,gBAAM,eAAe,aAAa,IAAI,GAAG,eAAe,QAAQ;AAChE,gBAAM,iBAAiB,aAAa,IAAI,GAAG,iBAAiB,QAAQ;AACpE,cAAI,CAAC,gBAAgB,CAAC,gBAAgB;AAClC,kBAAM,IAAI,MAAM,6DAA6D;UACjG;AACgB,aAAG,aAAa,SAAS,YAAY;AACrC,aAAG,aAAa,SAAS,cAAc;AACvC,aAAG,0BAA0B,SAAS,CAAC,UAAU,GAAG,GAAG,gBAAgB;AACvE,aAAG,YAAY,OAAO;AAEtB,gBAAM,SAAS,GAAG,oBAAoB,SAAS,GAAG,WAAW;AAC7D,cAAI,CAAC,QAAQ;AACT,kBAAM,QAAQ,GAAG,kBAAkB,OAAO;AAC1C,oBAAQ,MAAM,0CAA0C,KAAK;AAC7D,eAAG,cAAc,OAAO;AACxB,eAAG,aAAa,cAAc;AAC9B,eAAG,aAAa,YAAY;AAC5B,kBAAM,IAAI,MAAM,0DAA0D;UAC9F;AAEgB,eAAK,2BAA2B,UAAU;AAC1C,eAAK,2BAA2B,eAAe;AAC/C,eAAK,2BAA2B,eAAe;QAC/D;AAEY,WAAG,WAAW,KAAK,2BAA2B,OAAO;AAErD,aAAK,2BAA2B,aAC5B,GAAG,kBAAkB,KAAK,2BAA2B,SAAS,QAAQ;AAC1E,YAAI,KAAK,aAAa;AAClB,eAAK,2BAA2B,sBAC5B,GAAG,kBAAkB,KAAK,2BAA2B,SAAS,gBAAgB;AAClF,mBAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AACzC,iBAAK,2BAA2B,eAAe,CAAC,IAC5C,GAAG,mBAAmB,KAAK,2BAA2B,SAAS,cAAc,CAAC,GAAG;UACzG;QACA,OAAmB;AACH,eAAK,2BAA2B,mBAC5B,GAAG,mBAAmB,KAAK,2BAA2B,SAAS,eAAe;QAClG;AAEY,YAAI,qBAAqB,gBAAgB;AACrC,eAAK,2BAA2B,gBAAgB,GAAG,aAAY;AAC/D,aAAG,WAAW,GAAG,cAAc,KAAK,2BAA2B,aAAa;AAC5E,aAAG,wBAAwB,KAAK,2BAA2B,UAAU;AACrE,cAAI,KAAK,kCAAkC;AACvC,eAAG,qBAAqB,KAAK,2BAA2B,YAAY,GAAG,GAAG,KAAK,GAAG,CAAC;UACvG,OAAuB;AACH,eAAG,oBAAoB,KAAK,2BAA2B,YAAY,GAAG,GAAG,OAAO,OAAO,GAAG,CAAC;UAC/G;AAEgB,cAAI,KAAK,aAAa;AAClB,iBAAK,2BAA2B,yBAAyB,GAAG,aAAY;AACxE,eAAG,WAAW,GAAG,cAAc,KAAK,2BAA2B,sBAAsB;AACrF,eAAG,wBAAwB,KAAK,2BAA2B,mBAAmB;AAC9E,eAAG,qBAAqB,KAAK,2BAA2B,qBAAqB,GAAG,GAAG,cAAc,GAAG,CAAC;UACzH;QACA;AAEY,YAAI,qBAAqB,gBAAgB;AACrC,eAAK,2BAA2B,qBAAqB,GAAG,aAAY;QACpF;AACY,WAAG,WAAW,GAAG,cAAc,KAAK,2BAA2B,kBAAkB;AACjF,WAAG,WAAW,GAAG,cAAc,gBAAgB,GAAG,GAAG,WAAW;AAEhE,YAAI,mBAAmB;AACnB,eAAK,2BAA2B,KAAK,GAAG,wBAAuB;QAC/E;AACY,WAAG,sBAAsB,GAAG,oBAAoB,KAAK,2BAA2B,EAAE;AAClF,WAAG,eAAe,GAAG,2BAA2B,GAAG,KAAK,2BAA2B,kBAAkB;AAErG,YAAI,kBAAkB,0BAA0B;AAAM,aAAG,WAAW,cAAc;AAClF,YAAI;AAAY,aAAG,gBAAgB,UAAU;AAE7C,aAAK,eAAe,KAAK;AACzB,+BAAuB;MACnC;IAEA,EAAK;AAyFD;;;;+CAAsB,2BAAW;AAE7B,YAAM,YAAY,CAAA;AAElB,aAAO,SAAS,OAAO;AACnB,YAAI,UAAU,WAAW,MAAM;AAAQ,oBAAU,SAAS,MAAM;AAChE,iBAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AACzC,gBAAM,iBAAiB,KAAK,SAAS,CAAC,EAAE;AACxC,gBAAM,yBAAyB,eAAe;AAC9C,mBAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AACzB,sBAAU,IAAI,KAAK,CAAC,IAAI,uBAAuB,CAAC;UACpE;QACA;AACY,cAAM,IAAI,SAAS;MAC/B;IAEA,EAAK;AAED,iDAAwB,WAAW;AAE/B,YAAM,aAAa,IAAU,QAAO;AAEpC,aAAO,SAAS,qBAAqB,sBAAsB;AACvD,YAAI,CAAC,KAAK;AAAU;AAGpB,cAAM,KAAK,KAAK,SAAS,WAAU;AAEnC,cAAM,aAAa,GAAG,aAAa,GAAG,oBAAoB;AAC1D,cAAM,iBAAiB,GAAG,aAAa,GAAG,eAAe;AACzD,cAAM,wBAAwB,iBAAiB,GAAG,oBAAoB,gBAAgB,GAAG,aAAa,IAAI;AAE1G,WAAG,gBAAgB,KAAK,2BAA2B,GAAG;AACtD,WAAG,WAAW,KAAK,2BAA2B,OAAO;AAErD,WAAG,OAAO,GAAG,kBAAkB;AAE/B,YAAI,KAAK,aAAa;AAClB,mBAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AACzC,uBAAW,KAAK,KAAK,SAAS,CAAC,EAAE,SAAS;AAC1C,uBAAW,YAAY,mBAAmB;AAE1C,gBAAI,KAAK,kCAAkC;AACvC,oBAAM,cAAc,WAAU,sBAAsB,UAAU;AAC9D,oBAAM,aAAa,CAAC,YAAY,CAAC,GAAG,YAAY,CAAC,GAAG,YAAY,EAAE,GAAG,YAAY,EAAE,CAAC;AACpF,iBAAG;gBAAU,KAAK,2BAA2B,eAAe,CAAC;gBAAG,WAAW,CAAC;gBAAG,WAAW,CAAC;gBAC3B,WAAW,CAAC;gBAAG,WAAW,CAAC;cAAC;YACpH,OAA2B;AACH,iBAAG,iBAAiB,KAAK,2BAA2B,eAAe,CAAC,GAAG,OAAO,WAAW,QAAQ;YACzH;UACA;QACA,OAAmB;AACH,cAAI,KAAK,kCAAkC;AACvC,kBAAM,kBAAkB,WAAU,sBAAsB,mBAAmB;AAC3E,kBAAM,YAAY,CAAC,gBAAgB,CAAC,GAAG,gBAAgB,CAAC,GAAG,gBAAgB,EAAE,CAAC;AAC9E,eAAG,UAAU,KAAK,2BAA2B,kBAAkB,UAAU,CAAC,GAAG,UAAU,CAAC,GAAG,UAAU,CAAC,CAAC;UAC3H,OAAuB;AACH,kBAAM,WAAW,CAAC,oBAAoB,SAAS,CAAC,GAAG,oBAAoB,SAAS,CAAC,GAAG,oBAAoB,SAAS,EAAE,CAAC;AACpH,eAAG,UAAU,KAAK,2BAA2B,kBAAkB,SAAS,CAAC,GAAG,SAAS,CAAC,GAAG,SAAS,CAAC,CAAC;UACxH;QACA;AAEY,WAAG,WAAW,GAAG,cAAc,KAAK,2BAA2B,aAAa;AAC5E,WAAG,wBAAwB,KAAK,2BAA2B,UAAU;AACrE,YAAI,KAAK,kCAAkC;AACvC,aAAG,qBAAqB,KAAK,2BAA2B,YAAY,GAAG,GAAG,KAAK,GAAG,CAAC;QACnG,OAAmB;AACH,aAAG,oBAAoB,KAAK,2BAA2B,YAAY,GAAG,GAAG,OAAO,OAAO,GAAG,CAAC;QAC3G;AAEY,YAAI,KAAK,aAAa;AAClB,aAAG,WAAW,GAAG,cAAc,KAAK,2BAA2B,sBAAsB;AACrF,aAAG,wBAAwB,KAAK,2BAA2B,mBAAmB;AAC9E,aAAG,qBAAqB,KAAK,2BAA2B,qBAAqB,GAAG,GAAG,cAAc,GAAG,CAAC;QACrH;AAEY,WAAG,sBAAsB,GAAG,oBAAoB,KAAK,2BAA2B,EAAE;AAClF,WAAG,eAAe,GAAG,2BAA2B,GAAG,KAAK,2BAA2B,kBAAkB;AAErG,WAAG,uBAAuB,GAAG,MAAM;AACnC,WAAG,WAAW,GAAG,QAAQ,GAAG,KAAK,cAAa,CAAE;AAChD,WAAG,qBAAoB;AAEvB,WAAG,eAAe,GAAG,2BAA2B,GAAG,IAAI;AACvD,WAAG,sBAAsB,GAAG,oBAAoB,IAAI;AAEpD,WAAG,QAAQ,GAAG,kBAAkB;AAEhC,cAAM,OAAO,GAAG,UAAU,GAAG,4BAA4B,CAAC;AAC1D,WAAG,MAAK;AAER,cAAM,UAAU,IAAI,QAAQ,CAAC,YAAY;AACrC,gBAAM,YAAY,MAAM;AACpB,gBAAI,KAAK,UAAU;AACf,sBAAO;YAC/B,OAA2B;AACH,oBAAM,UAAU;AAChB,oBAAM,WAAW;AACjB,oBAAM,SAAS,GAAG,eAAe,MAAM,UAAU,OAAO;AACxD,sBAAQ,QAAM;gBACV,KAAK,GAAG;AACJ,uBAAK,mCAAmC,WAAW,SAAS;AAC5D,yBAAO,KAAK;gBAChB,KAAK,GAAG;AACJ,wBAAM,IAAI,MAAM,uBAAuB;gBAC3C;AACI,uBAAK,mCAAmC;AACxC,qBAAG,WAAW,IAAI;AAClB,wBAAMC,cAAa,GAAG,aAAa,GAAG,oBAAoB;AAC1D,qBAAG,gBAAgB,KAAK,2BAA2B,GAAG;AACtD,qBAAG,WAAW,GAAG,cAAc,KAAK,2BAA2B,kBAAkB;AACjF,qBAAG,iBAAiB,GAAG,cAAc,GAAG,oBAAoB;AAC5D,qBAAG,WAAW,GAAG,cAAc,IAAI;AAEnC,sBAAIA;AAAY,uBAAG,gBAAgBA,WAAU;AAI7C,0BAAO;cACvC;YACA;UACA;AACgB,eAAK,mCAAmC,WAAW,SAAS;QAC5E,CAAa;AAED,YAAI,kBAAkB,0BAA0B;AAAM,aAAG,WAAW,cAAc;AAClF,YAAI;AAAY,aAAG,gBAAgB,UAAU;AAE7C,eAAO;MACnB;IAEA,EAAK;AAqHD;;;;;;;;;0CAAiB,2BAAW;AAExB,YAAM,YAAY,CAAA;AAElB,aAAO,SAAS,aAAa,WAAW,qBAAqB;AACzD,aAAK,wBAAwB,aAAa,WAAW,mBAAmB;AACxE,kBAAU,YAAY,eAAe,UAAU,YAAY,WAAW,UAAU,cAAc;MAC1G;IAEA,EAAK;AAaD;;;;;;;;;;;oDAA2B,2BAAW;AAElC,YAAM,YAAY,CAAA;AAElB,aAAO,SAAS,aAAa,UAAU,aAAa,qBAAqB;AACrE,aAAK,wBAAwB,aAAa,WAAW,mBAAmB;AACxE,kBAAU,YAAY,yBAAyB,UAAU,YAAY,UAAU,aAAa,UAAU,cAAc;MAChI;IAEA,EAAK;AAOD;;;;;yCAAgB,2BAAW;AAEvB,YAAM,YAAY,CAAA;AAElB,aAAO,SAAS,aAAa,UAAU;AACnC,aAAK,wBAAwB,aAAa,SAAS;AACnD,kBAAU,YAAY,cAAc,UAAU,YAAY,QAAQ;MAC9E;IAEA,EAAK;AA1lEG,SAAK,WAAW;AAEhB,SAAK,gCAAgC;AAKrC,SAAK,cAAc;AAEnB,SAAK,mBAAmB;AAExB,SAAK,kCAAkC;AAEvC,SAAK,mCAAmC;AAMxC,SAAK,cAAc;AAEnB,SAAK,0BAA0B;AAE/B,SAAK,WAAW;AAEhB,SAAK,2BAA2B;AAChC,SAAK,8BAA8B;AAEnC,SAAK,SAAS,CAAA;AAEd,SAAK,YAAY;AACjB,SAAK,gBAAgB;AAErB,SAAK,oBAAoB,CAAA;AACzB,SAAK,6BAA6B;MAC9B,MAAM;MACN,gBAAgB;MAChB,kBAAkB;MAClB,WAAW;MACX,iBAAiB;MACjB,0BAA0B;MAC1B,sBAAsB;MACtB,cAAc;MACd,oBAAoB;MACpB,uBAAuB;MACvB,kBAAkB,CAAA;IAC9B;AACQ,SAAK,uCAAuC,CAAA;AAC5C,SAAK,kCAAkC,CAAA;AAEvC,SAAK,sBAAsB;AAC3B,SAAK,kBAAkB,CAAA;AACvB,SAAK,yBAAyB;AAC9B,SAAK,sBAAsB;AAC3B,SAAK,kBAAkB;AACvB,SAAK,aAAa;AAElB,SAAK,aAAa;AAElB,SAAK,cAAc,IAAU,KAAI;AACjC,SAAK,wBAAwB,IAAU,QAAO;AAC9C,SAAK,kCAAkC;AACvC,SAAK,4BAA4B;AACjC,SAAK,sBAAsB;AAC3B,SAAK,+BAA+B;AACpC,SAAK,wBAAwB;AAE7B,SAAK,aAAa;AAClB,SAAK,wBAAwB;AAE7B,SAAK,WAAW;AAChB,SAAK,eAAe;AACpB,SAAK,UAAU;EACvB;;;;;;;;;;;;;EAcI,OAAO,cAAc,cAAc,OAAO,cAAc,OAAO,0BAA0B,MACpE,aAAa,GAAK,wBAAwB,OAAO,8BAA8B,GAAG;AAInG,QAAI,qBAAqB;;;;;;;;;AAUzB,QAAI,aAAa;AACb,4BAAsB;;gDAEc,UAAU,SAAS;;;IAGnE;AAEQ,0BAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mEA0DqC,UAAU,uCAAuC,QAAQ,CAAC,CAAC;;;;;;;;;;;;;;AAelH,QAAI,aAAa;AACb,4BAAsB;;;;;IAKtC,OAAmB;AACH,4BAAsB;IACtC;AAEY,0BAAsB;;;;;;;;;;;;;;AAetB,QAAI,+BAA+B,GAAG;AAElC,4BAAsB;;;AAItB,UAAI,aAAa;AACb,8BAAsB;;;;MAI1C,OAAuB;AACH,8BAAsB;;;MAG1C;AAEgB,UAAI,+BAA+B,GAAG;AAClC,8BAAsB;;;;;;;;MAQ1C,OAAuB;AACH,8BAAsB;;;;;;;;;;;;MAY1C;AAEgB,4BAAsB;;;;;;;;;;;AAYtB,UAAI,+BAA+B,GAAG;AAElC,8BAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmC1C;AAEgB,4BAAsB;;;;;IAKtC;AAEY,0BAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CtB,QAAI,aAAa;AACb,4BAAsB;;;;;;;IAOtC,OAAmB;AACH,4BAAsB;;;;;IAKtC;AAEY,0BAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iGAgD+D,SAAS,uBAAuB,CAAC;iGACjC,SAAS,uBAAuB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;AA0B1H,UAAM,uBAAuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6B7B,UAAM,WAAW;MACb,eAAe;QACX,QAAQ;QACR,SAAS,IAAU,QAAO;MAC1C;MACY,kBAAkB;QACd,QAAQ;QACR,SAAS;MACzB;MACY,oBAAoB;QAChB,QAAQ;QACR,SAAS;MACzB;MACY,gCAAgC;QAC5B,QAAQ;QACR,SAAS;MACzB;MACY,uBAAuB;QACnB,QAAQ;QACR,SAAS;MACzB;MACY,eAAe;QACX,QAAQ;QACR,SAAS;MACzB;MACY,mBAAmB;QACf,QAAQ;QACR,SAAS;MACzB;MACY,sBAAsB;QAClB,QAAQ;QACR,SAAS;MACzB;MACY,wBAAwB;QACpB,QAAQ;QACR,SAAS;MACzB;MACY,6BAA6B;QACzB,QAAQ;QACR,SAAS;MACzB;MACY,SAAS;QACL,QAAQ;QACR,SAAS,IAAU,QAAO;MAC1C;MACY,aAAa;QACT,QAAQ;QACR,SAAS;MACzB;MACY,0BAA0B;QACtB,QAAQ;QACR,SAAS;MACzB;MACY,YAAY;QACR,QAAQ;QACR,SAAS,IAAU,QAAO;MAC1C;MACY,iBAAiB;QACb,QAAQ;QACR,SAAS,IAAU,QAAO;MAC1C;MACY,cAAc;QACV,QAAQ;QACR,SAAS,IAAU,MAAK;MACxC;MACY,0BAA0B;QACtB,QAAQ;QACR,SAAS,IAAU,QAAQ,MAAM,IAAI;MACrD;MACY,4BAA4B;QACxB,QAAQ;QACR,SAAS,IAAU,QAAQ,MAAM,IAAI;MACrD;MACY,4BAA4B;QACxB,QAAQ;QACR,SAAS;MACzB;MACY,iCAAiC;QAC7B,QAAQ;QACR,SAAS,IAAU,QAAQ,MAAM,IAAI;MACrD;MACY,8BAA8B;QAC1B,QAAQ;QACR,SAAS;MACzB;MACY,cAAc;QACV,QAAQ;QACR,SAAS;MACzB;MACY,yBAAyB;QACrB,QAAQ;QACR,SAAS,wBAAwB,IAAI;MACrD;IACA;AAEQ,QAAI,aAAa;AACb,eAAS,yBAAyB,IAAI;QAClC,QAAQ;QACR,SAAS;MACzB;AACY,YAAM,oBAAoB,CAAA;AAC1B,eAAS,IAAI,GAAG,IAAI,UAAU,WAAW,KAAK;AAC1C,0BAAkB,KAAK,IAAU,QAAO,CAAE;MAC1D;AACY,eAAS,YAAY,IAAI;QACrB,QAAQ;QACR,SAAS;MACzB;AACY,eAAS,6BAA6B,IAAI;QACtC,QAAQ;QACR,SAAS,IAAU,QAAQ,MAAM,IAAI;MACrD;IACA;AAEQ,UAAM,WAAW,IAAU,eAAe;MACtC;MACA,cAAc;MACd,gBAAgB;MAChB,aAAa;MACb,WAAW;MACX,UAAgB;MAChB,WAAW;MACX,YAAY;MACZ,MAAY;IACxB,CAAS;AAED,WAAO;EACf;;;;;;;EAQI,OAAO,cAAc,eAAe;AAEhC,UAAM,eAAe,IAAU,eAAc;AAC7C,iBAAa,SAAS,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAGxC,UAAM,iBAAiB,IAAI,aAAa,IAAI,CAAC;AAC7C,UAAM,YAAY,IAAU,gBAAgB,gBAAgB,CAAC;AAC7D,iBAAa,aAAa,YAAY,SAAS;AAC/C,cAAU,OAAO,GAAG,IAAM,IAAM,CAAG;AACnC,cAAU,OAAO,GAAG,IAAM,GAAK,CAAG;AAClC,cAAU,OAAO,GAAG,GAAK,GAAK,CAAG;AACjC,cAAU,OAAO,GAAG,GAAK,IAAM,CAAG;AAClC,cAAU,cAAc;AAExB,UAAM,WAAW,IAAU,wBAAuB,EAAG,KAAK,YAAY;AAGtE,UAAM,kBAAkB,IAAI,YAAY,aAAa;AACrD,UAAM,eAAe,IAAU,yBAAyB,iBAAiB,GAAG,KAAK;AACjF,iBAAa,SAAe,gBAAgB;AAC5C,aAAS,aAAa,cAAc,YAAY;AAEhD,aAAS,gBAAgB;AAEzB,WAAO;EACf;;;;;;;;;;;;;;;EAgBI,OAAO,YAAY,cAAc,cAAc;AAC3C,UAAM,SAAS,CAAA;AACf,WAAO,SAAS,aAAa;AAC7B,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC1C,YAAM,cAAc,aAAa,CAAC;AAClC,YAAMC,WAAU,aAAa,CAAC,KAAK,CAAA;AACnC,UAAI,gBAAgBA,SAAQ,UAAU,KAAK,CAAC,GAAG,GAAG,CAAC;AACnD,UAAI,gBAAgBA,SAAQ,UAAU,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC;AACtD,UAAI,aAAaA,SAAQ,OAAO,KAAK,CAAC,GAAG,GAAG,CAAC;AAC7C,YAAM,WAAW,IAAU,QAAO,EAAG,UAAU,aAAa;AAC5D,YAAM,WAAW,IAAU,WAAU,EAAG,UAAU,aAAa;AAC/D,YAAM,QAAQ,IAAU,QAAO,EAAG,UAAU,UAAU;AACtD,aAAO,CAAC,IAAI,WAAU,YAAY,aAAa,UAAU,UAAU,OAAOA,SAAQ,8BAA8B,CAAC;IAC7H;AACQ,WAAO;EACf;EAEI,OAAO,YAAY,aAAa,UAAU,UAAU,OAAO,cAAc;AACrE,WAAO,IAAI,WAAW,aAAa,UAAU,UAAU,OAAO,YAAY;EAClF;;;;;;;EAQI,OAAO,oBAAoB,cAAc;AACrC,UAAM,qBAAqB,CAAA;AAC3B,UAAM,gBAAgB,CAAA;AACtB,QAAI,kBAAkB;AACtB,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC1C,YAAM,cAAc,aAAa,CAAC;AAClC,YAAM,gBAAgB,YAAY,iBAAgB;AAClD,eAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AACpC,2BAAmB,eAAe,IAAI;AACtC,sBAAc,eAAe,IAAI;AACjC;MAChB;IACA;AACQ,WAAO;MACH;MACA;IACZ;EACA;;;;;;;;;;;;;;;;;;;;;;;;;EAsFI,MAAM,cAAc,cAAc,sBAAsB,MAAM,aAAa,OACrE,0BAA0B,yBAAyB;AAErD,SAAK,eAAe;AACpB,SAAK,aAAa;AAElB,UAAM,gBAAgB,WAAU,qCAAqC,YAAY;AAEjF,UAAM,YAAY,WAAU,YAAY,cAAc,YAAY;AAClE,QAAI,qBAAqB;AACrB,eAAS,IAAI,GAAG,IAAI,KAAK,OAAO,UAAU,IAAI,UAAU,QAAQ,KAAK;AACjE,cAAM,WAAW,UAAU,CAAC;AAC5B,cAAM,gBAAgB,KAAK,SAAS,CAAC;AACrC,iBAAS,kBAAkB,aAAa;MACxD;IACA;AACQ,SAAK,SAAS;AAEd,QAAI,8BAA8B;AAClC,aAAS,eAAe,cAAc;AAClC,YAAM,sCAAsC,YAAY,+BAA8B;AACtF,UAAI,sCAAsC,6BAA6B;AACnE,sCAA8B;MAC9C;IACA;AACQ,SAAK,8BAA8B,KAAK,IAAI,6BAA6B,KAAK,wBAAwB;AAEtG,QAAI,sBAAsB;AAC1B,QAAI,aAAa,WAAW,KAAK,gBAAgB,QAAQ;AACrD,4BAAsB;IAClC,OAAe;AACH,eAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC1C,cAAM,cAAc,aAAa,CAAC;AAClC,YAAI,gBAAgB,KAAK,gBAAgB,CAAC,EAAE,aAAa;AACrD,gCAAsB;AACtB;QACpB;MACA;IACA;AAEQ,QAAI,gBAAgB;AACpB,QAAI,KAAK,OAAO,WAAW,KACvB,KAAK,wBAAwB,KAAK,OAAO,UACzC,KAAK,2BAA2B,iBAChC,qBAAqB;AACjB,sBAAgB;IAChC;AAEO,QAAI,CAAC,eAAe;AACf,WAAK,cAAc,IAAU,KAAI;AACjC,WAAK,kCAAkC;AACvC,WAAK,4BAA4B;AACjC,WAAK,sBAAsB;AAC3B,WAAK,+BAA+B;AACpC,WAAK,kBAAkB;AACvB,WAAK,kBAAkB,CAAA;AACvB,WAAK,sBAAsB;AAC3B,WAAK,yBAAyB;AAC9B,WAAK,gBAAe;AACpB,WAAK,WAAW,WAAU,cAAc,aAAa;AACrD,WAAK,WAAW,WAAU;QAAc,KAAK;QAAa,KAAK;QAAa,KAAK;QACzC,KAAK;QAAY,KAAK;QAAuB,KAAK;MAA2B;AACrH,YAAM,YAAY,WAAU,oBAAoB,YAAY;AAC5D,WAAK,uCAAuC,UAAU;AACtD,WAAK,kCAAkC,UAAU;IAC7D;AAEQ,UAAM,aAAa,KAAK,cAAa;AACrC,QAAI,KAAK;AAAiC,WAAK,2CAA0C;AACzF,UAAM,oBAAoB,KAAK,+BAA+B,aAAa;AAE3E,aAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AACzC,WAAK,gBAAgB,CAAC,IAAI,KAAK,OAAO,CAAC;IACnD;AACQ,SAAK,sBAAsB;AAC3B,SAAK,yBAAyB,KAAK,iBAAgB;AACnD,SAAK,sBAAsB,KAAK,OAAO;AAEvC,QAAI,cAAc,KAAK,OAAO,SAAS,GAAG;AACtC,WAAK;QAAe,aAAa,IAAI,CAAAA,aAAWA,SAAQ,8BAA8B,CAAC;QACnE;QAA0B;MAAuB,EACpE,KAAK,MAAM;AACR,YAAI,KAAK;AAA0B,eAAK,yBAAyB,KAAK,SAAS;MAC/F,CAAa;IACb;AAEQ,SAAK,UAAW,KAAK,OAAO,SAAS;AAErC,WAAO;EACf;;;;EAKI,UAAU;AACN,SAAK,gBAAe;AACpB,SAAK,gBAAe;AACpB,SAAK,iBAAgB;AACrB,QAAI,KAAK,iCAAiC;AACtC,UAAI,KAAK,kCAAkC;AACvC,qBAAa,KAAK,gCAAgC;AAClD,aAAK,mCAAmC;MACxD;AACY,WAAK,wCAAuC;IACxD;AACQ,SAAK,SAAS,CAAA;AACd,SAAK,6BAA6B;MAC9B,MAAM;MACN,gBAAgB;MAChB,kBAAkB;MAClB,WAAW;MACX,iBAAiB;MACjB,0BAA0B;MAC1B,sBAAsB;MACtB,cAAc;MACd,oBAAoB;MACpB,uBAAuB;MACvB,kBAAkB,CAAA;IAC9B;AACQ,SAAK,WAAW;AAEhB,SAAK,uCAAuC,CAAA;AAC5C,SAAK,kCAAkC,CAAA;AAEvC,SAAK,sBAAsB;AAC3B,SAAK,kBAAkB,CAAA;AACvB,SAAK,yBAAyB;AAC9B,SAAK,sBAAsB;AAC3B,SAAK,kBAAkB;AACvB,SAAK,aAAa;AAElB,SAAK,aAAa;AAElB,SAAK,cAAc,IAAU,KAAI;AACjC,SAAK,wBAAwB,IAAU,QAAO;AAC9C,SAAK,kCAAkC;AACvC,SAAK,4BAA4B;AACjC,SAAK,sBAAsB;AAC3B,SAAK,+BAA+B;AACpC,SAAK,wBAAwB;AAE7B,SAAK,aAAa;AAClB,SAAK,wBAAwB;AAE7B,SAAK,WAAW;AAChB,SAAK,eAAe;AACpB,SAAK,UAAU;EACvB;;;;EAKI,kBAAkB;AACd,QAAI,KAAK,YAAY,KAAK,aAAa,eAAe;AAClD,WAAK,SAAS,QAAO;AACrB,WAAK,WAAW;IAC5B;AACQ,QAAI,KAAK,UAAU;AACf,WAAK,SAAS,QAAO;AACrB,WAAK,WAAW;IAC5B;EACA;EAEI,kBAAkB;AACd,aAAS,cAAc,KAAK,mBAAmB;AAC3C,UAAI,KAAK,kBAAkB,eAAe,UAAU,GAAG;AACnD,cAAM,mBAAmB,KAAK,kBAAkB,UAAU;AAC1D,YAAI,iBAAiB,SAAS;AAC1B,2BAAiB,QAAQ,QAAO;AAChC,2BAAiB,UAAU;QAC/C;MACA;IACA;AACQ,SAAK,oBAAoB;EACjC;EAEI,mBAAmB;AACf,QAAI,KAAK,WAAW;AAChB,WAAK,UAAU,QAAO;AACtB,WAAK,YAAY;IAC7B,WAAmB,KAAK,eAAe;AAC3B,WAAK,cAAc,QAAO;AAC1B,WAAK,gBAAgB;IACjC;EACA;EAEI,eAAe;AACX,WAAO,KAAK;EACpB;EAEI,iBAAiB,UAAU;AACvB,SAAK,2BAA2B;EACxC;;;;;;;;EASI,+BAA+B,OAAO,KAAK;AACvC,UAAML,WAAU,KAAK,mCACL,KAAK,kBAAkB,OAAO,KAAK,IAAI,IACvC,KAAK,gBAAgB,OAAO,KAAK,IAAI;AACrD,UAAM,eAAe,KAAK,gBAAgB,OAAO,GAAG;AACpD,WAAO;MACH,SAAAA;MACA;IACZ;EACA;;;;;;EAOI,+BAA+B,oBAAoB;AAC/C,UAAM,aAAa,KAAK,cAAa;AACrC,SAAK,oCAAoC,kBAAkB;AAC3D,UAAM,cAAc,qBAAqB,KAAK,sBAAsB;AACpE,UAAM,EAAE,SAAAA,UAAS,aAAY,IAAK,KAAK,+BAA+B,aAAa,aAAa,CAAC;AACjG,QAAI,KAAK,iCAAiC;AACtC,WAAK,yCAAyCA,UAAS,cAAc,kBAAkB;IACnG;AACQ,WAAO;MACH,QAAQ;MACR,MAAM,aAAa;MACnB,SAAS,aAAa;MACtB,WAAWA;MACX,gBAAgB;IAC5B;EACA;;;;;;;EAQI,yCAAyCA,UAAS,cAAc,qBAAqB,OAAO;AACxF,UAAM,SAAS,qBAAqB,KAAK,sBAAsB;AAC/D,SAAK,8CAA8C,oBAAoBA,UAAS,MAAM;AACtF,SAAK,uDAAuD,oBAAoB,cAAc,MAAM;EAC5G;;;;;EAMI,oCAAoC,oBAAoB;AACpD,QAAI,CAAC,oBAAoB;AACrB,WAAK,kBAAiB;IAClC,OAAe;AACH,WAAK,mBAAkB;IACnC;AACQ,SAAK,oBAAoB,kBAAkB;EACnD;EAEI,oBAAoB;AAChB,UAAM,gBAAgB,KAAK,iBAAgB;AAC3C,UAAM,aAAa,KAAK,cAAa;AAErC,SAAK,gBAAe;AAEpB,UAAM,yBAAyB,CAAC,kBAAkB,sBAAsB;AACpE,YAAM,UAAU,IAAU,QAAQ,MAAM,IAAI;AAC5C,aAAO,QAAQ,IAAI,QAAQ,IAAI,mBAAmB,gBAAgB;AAAmB,gBAAQ,KAAK;AAClG,aAAO;IACnB;AAEQ,UAAM,6BAA6B,KAAK,oCAAmC;AAC3E,UAAM,qCAAqC,KAAK,4CAA2C;AAE3F,UAAM,cAAc,IAAI,aAAa,gBAAgB,8BAA8B;AACnF,UAAMA,WAAU,IAAI,aAAa,gBAAgB,CAAC;AAClD,UAAM,SAAS,IAAI,WAAW,gBAAgB,CAAC;AAE/C,QAAI,8BAA8B;AAClC,QAAI,uCAAuC;AAAG,oCAA8B;aACnE,uCAAuC;AAAG,oCAA8B;AACjF,UAAM,mCAAmC,6CAA6C,KAAK,2BAA2B;AACtH,QAAI,yCAAyC;AAC7C,QAAI,yCAAyC,MAAM;AAAG;AACtD,UAAM,qBAAqB,KAAK,8BACL,IAAI,4BAA4B,gBAAgB,gCAAgC,IAAI;AAE/G,SAAK;MAAoB;MAAaA;MAAS;MAAQ;MAAoB;MAClD;MAA4B;IAAkC;AAGvF,UAAM,aAAa,uBAAuB,gCAAgC,CAAC;AAC3E,QAAI,sBAAsB,8BAA8B,IAAI,cAAc;AAC1E,QAAI,yBAAyB,8BAA8B,IAAU,gBAAsB;AAC3F,UAAM,oBAAoB,IAAI,oBAAoB,WAAW,IAAI,WAAW,IAAI,8BAA8B;AAC9G,sBAAkB,IAAI,WAAW;AAEjC,UAAM,SAAS,IAAU,YAAY,mBAAmB,WAAW,GAAG,WAAW,GAAS,YAAY,sBAAsB;AAC5H,WAAO,cAAc;AACrB,SAAK,SAAS,SAAS,mBAAmB,QAAQ;AAClD,SAAK,SAAS,SAAS,uBAAuB,MAAM,KAAK,UAAU;AAGnE,UAAM,qBAAqB,uBAAuB,kCAAkC,CAAC;AACrF,UAAM,oBAAoB,IAAI,YAAY,mBAAmB,IAAI,mBAAmB,IAAI,gCAAgC;AACxH,eAAU,6BAA6B,GAAG,YAAYA,UAAS,QAAQ,iBAAiB;AAExF,UAAM,iBAAiB,IAAU;MAAY;MAAmB,mBAAmB;MAAG,mBAAmB;MACtD;MAAyB;IAAe;AAC3F,mBAAe,iBAAiB;AAChC,mBAAe,cAAc;AAC7B,SAAK,SAAS,SAAS,qBAAqB,QAAQ;AACpD,SAAK,SAAS,SAAS,yBAAyB,MAAM,KAAK,kBAAkB;AAC7E,SAAK,SAAS,qBAAqB;AAEnC,SAAK,oBAAoB;MACrB,YAAY;QACR,eAAe;QACf,WAAWA;QACX,UAAU;QACV,sBAAsB;MACtC;MACY,eAAe;QACX,QAAQ;QACR,WAAW;QACX,QAAQ;QACR,oBAAoB;MACpC;MACY,gBAAgB;QACZ,QAAQ;QACR,WAAW;QACX,QAAQ;MACxB;IACA;AAEQ,QAAI,oBAAoB;AACpB,YAAM,qCAAqC;AAC3C,YAAM,4BAA4B;QAAuB;QACA;MAAsC;AAC/F,YAAM,oBAAoB,0BAA0B,IAAI,0BAA0B,IAAI;AACtF,YAAM,gBAAgB,IAAI,4BAA4B,iBAAiB;AACvE,eAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACjC,cAAM,UAAU,mCAAmC;AACnD,cAAM,WAAW,yCAAyC;AAC1D,iBAAS,IAAI,GAAG,IAAI,kCAAkC,KAAK;AACvD,wBAAc,WAAW,CAAC,IAAI,mBAAmB,UAAU,CAAC;QAChF;MACA;AAEY,YAAM,cAAc,uCAAuC,IAAU,mBAAyB;AAC9F,YAAM,wBAAwB,IAAU;QAAY;QAAe,0BAA0B;QACzC,0BAA0B;QAAS;QAAY;MAAW;AAC9G,4BAAsB,cAAc;AACpC,WAAK,SAAS,SAAS,0BAA0B,QAAQ;AACzD,WAAK,SAAS,SAAS,8BAA8B,MAAM,KAAK,yBAAyB;AACzF,UAAI,uCAAuC,GAAG;AAC1C,aAAK,SAAS,SAAS,2BAA2B,QAAQ;MAC1E;AACY,WAAK,SAAS,qBAAqB;AAEnC,WAAK,kBAAkB,oBAAoB,IAAI;QAC3C,kBAAkB;QAClB,wBAAwB;QACxB,QAAQ;QACR,WAAW;QACX,QAAQ;QACR,oBAAoB;MACpC;IACA;AAEQ,QAAI,KAAK,aAAa;AAClB,YAAM,0BAA0B,uBAAuB,sCAAsC,CAAC;AAC9F,YAAM,yBAAyB,IAAI,YAAY,wBAAwB,IACxB,wBAAwB,IAAI,oCAAoC;AAC/G,eAAS,IAAI,GAAG,IAAI,YAAY;AAAK,+BAAuB,CAAC,IAAI,KAAK,gCAAgC,CAAC;AACvG,YAAM,0BAA0B,IAAU;QAAY;QAAwB,wBAAwB;QAChD,wBAAwB;QAAS;QAC3B;MAAe;AAC3E,8BAAwB,iBAAiB;AACzC,8BAAwB,cAAc;AACtC,WAAK,SAAS,SAAS,wBAAwB,QAAQ;AACvD,WAAK,SAAS,SAAS,4BAA4B,MAAM,KAAK,uBAAuB;AACrF,WAAK,SAAS,qBAAqB;AACnC,WAAK,kBAAkB,iBAAiB,IAAI;QACxC,QAAQ;QACR,WAAW;QACX,QAAQ;MACxB;IACA;EACA;EAEI,qBAAqB;AACjB,UAAM,aAAa,KAAK,cAAa;AACrC,UAAM,6BAA6B,KAAK,kBAAkB,aAAa,EAAE;AAEzE,UAAM,gCAAgC,KAAK,kBAAkB,oBAAoB;AACjF,UAAM,qCAAqC,gCAAgC,8BAA8B,mBAAmB;AAE5H,SAAK;MAAoB,KAAK,kBAAkB,SAAS;MAChC,KAAK,kBAAkB,SAAS;MAAS,KAAK,kBAAkB,SAAS;MACzE,KAAK,kBAAkB,SAAS;MAAoB;MAAW;MAC/D;MAAoC,KAAK;MAAqB,aAAa;MAAG,KAAK;IAAmB;AAE/H,UAAM,+BAA+B,KAAK,kBAAkB,aAAa;AACzE,UAAM,oBAAoB,6BAA6B;AACvD,UAAM,qBAAqB,6BAA6B;AACxD,UAAM,uBAAuB,KAAK,sBAAsB;AACxD,UAAM,sBAAsB,aAAa;AACzC,aAAS,IAAI,sBAAsB,IAAI,qBAAqB,KAAK;AAC7D,YAAM,aAAa,KAAK,kBAAkB,SAAS,YAAY,CAAC;AAChE,wBAAkB,CAAC,IAAI;IACnC;AACQ,UAAM,0BAA0B,KAAK,WAAW,KAAK,SAAS,WAAW,IAAI,kBAAkB,IAAI;AACnG,QAAI,CAAC,2BAA2B,CAAC,wBAAwB,gBAAgB;AACrE,yBAAmB,cAAc;IAC7C,OAAe;AACH,YAAM,2BAA2B,6BAA6B,IAAI;AAClE,WAAK;QAAkB;QAAmB;QAA8B;QACjD;QAAgC;QAAgC;QAChE,KAAK;QAAqB,aAAa;MAAC;IAC3E;AAEQ,UAAM,gCAAgC,KAAK,kBAAkB,cAAc;AAC3E,UAAM,qBAAqB,8BAA8B;AACzD,UAAM,sBAAsB,8BAA8B;AAC1D,eAAU;MAA6B,KAAK;MAAqB;MAAY,KAAK,kBAAkB,SAAS;MACtE,KAAK,kBAAkB,SAAS;MAAQ;IAAkB;AACjG,UAAM,2BAA2B,KAAK,WAAW,KAAK,SAAS,WAAW,IAAI,mBAAmB,IAAI;AACrG,QAAI,CAAC,4BAA4B,CAAC,yBAAyB,gBAAgB;AACvE,0BAAoB,cAAc;IAC9C,OAAe;AACH,WAAK;QAAkB;QAAoB;QAA+B;QACnD;QAAkC;QAAkC;QACpE,KAAK;QAAqB,aAAa;MAAC;IAC3E;AAEQ,QAAI,KAAK,kBAAkB,SAAS,oBAAoB;AACpD,YAAM,mCAAmC,8BAA8B;AACvE,YAAM,yCAAyC,8BAA8B;AAC7E,YAAM,gBAAgB,8BAA8B;AACpD,eAAS,IAAI,KAAK,qBAAqB,IAAI,YAAY,KAAK;AACxD,cAAM,UAAU,mCAAmC;AACnD,cAAM,WAAW,yCAAyC;AAC1D,iBAAS,IAAI,GAAG,IAAI,kCAAkC,KAAK;AACvD,wBAAc,WAAW,CAAC,IAAI,KAAK,kBAAkB,SAAS,mBAAmB,UAAU,CAAC;QAChH;MACA;AAEY,YAAM,wBAAwB,8BAA8B;AAC5D,YAAM,iCAAiC,KAAK,WAAW,KAAK,SAAS,WAAW,IAAI,qBAAqB,IAAI;AAC7G,UAAI,CAAC,kCAAkC,CAAC,+BAA+B,gBAAgB;AACnF,8BAAsB,cAAc;MACpD,OAAmB;AACH,cAAM,qCAAqC;AAC3C,YAAI,oCAAoC;AACxC,YAAI,uCAAuC;AAAG,8CAAoC;iBACzE,uCAAuC;AAAG,8CAAoC;AACvF,aAAK;UAAkB;UAAe;UAA+B;UAC9C;UAAoC;UACpC;UAAmC,KAAK;UAAqB,aAAa;QAAC;MAClH;IACA;AAEQ,QAAI,KAAK,aAAa;AAClB,YAAM,0BAA0B,KAAK,kBAAkB,iBAAiB;AACxE,YAAM,yBAAyB,wBAAwB;AACvD,eAAS,IAAI,KAAK,qBAAqB,IAAI,YAAY,KAAK;AACxD,+BAAuB,CAAC,IAAI,KAAK,gCAAgC,CAAC;MAClF;AAEY,YAAM,0BAA0B,wBAAwB;AACxD,YAAM,+BAA+B,KAAK,WAAW,KAAK,SAAS,WAAW,IAAI,uBAAuB,IAAI;AAC7G,UAAI,CAAC,gCAAgC,CAAC,6BAA6B,gBAAgB;AAC/E,gCAAwB,cAAc;MACtD,OAAmB;AACH,aAAK;UAAkB;UAAwB;UAAyB;UAA8B;UAAG;UAAG;UACrF,KAAK;UAAqB,aAAa;QAAC;MAC/E;IACA;EACA;EAEI,sCAAsC;AAClC,WAAO,KAAK,gCAAgC,IAAI;EACxD;EAEI,8CAA8C;AAC1C,WAAO,KAAK,IAAI,GAAG,KAAK,sCAAqC,CAAE;EACvE;EAEI,wCAAwC;AACpC,QAAI;AACJ,aAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AACzC,YAAM,QAAQ,KAAK,SAAS,CAAC;AAC7B,YAAM,cAAc,MAAM;AAC1B,UAAI,MAAM,KAAK,YAAY,mBAAmB,qBAAqB;AAC/D,8BAAsB,YAAY;MAClD;IACA;AACQ,WAAO;EACf;EAEI,wCAAwC;AACpC,QAAI;AACJ,aAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AACzC,YAAM,QAAQ,KAAK,SAAS,CAAC;AAC7B,YAAM,cAAc,MAAM;AAC1B,UAAI,MAAM,KAAK,YAAY,mBAAmB,qBAAqB;AAC/D,8BAAsB,YAAY;MAClD;IACA;AACQ,WAAO;EACf;EAEI,OAAO,2BAA2B,YAAY,UAAU,cAAc,kBAAkB,kBAAkB;AACtG,UAAM,iBAAiB,mBAAmB;AAE1C,UAAM,mBAAmB,aAAa;AACtC,UAAM,WAAW,KAAK,MAAM,mBAAmB,YAAY;AAC3D,UAAM,kBAAkB,WAAW,eAAe;AAElD,UAAM,iBAAiB,WAAW;AAClC,UAAM,SAAS,KAAK,MAAM,iBAAiB,YAAY;AACvD,UAAM,mBAAmB,SAAS,eAAe,mBAAoB,eAAe;AAEpF,WAAO;MACH,aAAa;MACb,WAAW;MACX,YAAY;MACZ,UAAU;IACtB;EACA;EAEI,kBAAkB,YAAY,aAAa,cAAc,kBAAkB,kBAAkB,iBAAiB,MAAM,IAAI;AACpH,UAAM,KAAK,KAAK,SAAS,WAAU;AACnC,UAAM,eAAe,WAAU,2BAA2B,MAAM,IAAI,YAAY,KAAK,GAAG,kBAAkB,gBAAgB;AAC1H,UAAM,qBAAqB,aAAa,UAAU,aAAa;AAC/D,UAAM,iBAAiB,IAAI,WAAW;MAAY,WAAW;MACX,aAAa,YAAY;MAAiB;IAAkB;AAC9G,UAAM,eAAe,aAAa,SAAS,aAAa,WAAW;AACnE,UAAM,cAAc,YAAY;AAChC,UAAM,SAAS,KAAK,WAAW,QAAQ,YAAY,IAAI;AACvD,UAAM,WAAW,KAAK,WAAW,QAAQ,YAAY,QAAQ,YAAY,UAAU;AACnF,UAAM,iBAAiB,GAAG,aAAa,GAAG,kBAAkB;AAC5D,OAAG,YAAY,GAAG,YAAY,aAAa,cAAc;AACzD,OAAG;MAAc,GAAG;MAAY;MAAG;MAAG,aAAa;MAClC,YAAY,KAAK;MAAG;MAAc;MAAU;MAAQ;IAAc;AACnF,OAAG,YAAY,GAAG,YAAY,cAAc;EACpD;EAGI,OAAO,6BAA6B,IAAI,MAAMA,UAAS,QAAQ,oBAAoB;AAC/E,aAAS,IAAI,IAAI,IAAI,MAAM,KAAK;AAC5B,YAAM,aAAa,IAAI;AACvB,YAAM,cAAc,IAAI;AACxB,YAAM,mBAAmB,IAAI;AAC7B,yBAAmB,gBAAgB,IAAI,mBAAmB,QAAQ,UAAU;AAC5E,yBAAmB,mBAAmB,CAAC,IAAI,iBAAiBA,SAAQ,WAAW,CAAC;AAChF,yBAAmB,mBAAmB,CAAC,IAAI,iBAAiBA,SAAQ,cAAc,CAAC,CAAC;AACpF,yBAAmB,mBAAmB,CAAC,IAAI,iBAAiBA,SAAQ,cAAc,CAAC,CAAC;IAChG;EACA;EAEI,oBAAoB,oBAAoB;AACpC,UAAM,aAAa,KAAK,cAAa;AACrC,UAAM,aAAa,IAAU,QAAO;AACpC,QAAI,CAAC,oBAAoB;AACrB,YAAM,YAAY,IAAU,QAAO;AACnC,WAAK,OAAO,QAAQ,CAAC,UAAU;AAC3B,kBAAU,IAAI,MAAM,YAAY,WAAW;MAC3D,CAAa;AACD,gBAAU,eAAe,IAAM,KAAK,OAAO,MAAM;AACjD,WAAK,sBAAsB,KAAK,SAAS;AACzC,WAAK,SAAS,SAAS,YAAY,MAAM,KAAK,KAAK,qBAAqB;AACxE,WAAK,SAAS,qBAAqB;IAC/C;AAEQ,UAAM,gCAAgC,qBAAqB,KAAK,sBAAsB;AACtF,aAAS,IAAI,+BAA+B,IAAI,YAAY,KAAK;AAC7D,WAAK,eAAe,GAAG,YAAY,KAAK;AACxC,YAAM,uBAAuB,WAAW,IAAI,KAAK,qBAAqB,EAAE,OAAM;AAC9E,UAAI,uBAAuB,KAAK;AAAiC,aAAK,kCAAkC;IACpH;AAEQ,QAAI,KAAK,kCAAkC,KAAK,4BAA4B,gCAAgC;AACxG,WAAK,4BAA4B,KAAK;AACtC,WAAK,sBAAsB,KAAK,IAAI,KAAK,4BAA4B,gCAAgC,CAAG;IACpH;AACQ,QAAI,KAAK;AAAY,WAAK,sBAAsB,KAAK,4BAA4B,KAAK;AACtF,SAAK,gCAA+B;EAC5C;EAEI,gCAAgC,kBAAkB,gBAAgB,SAAS;AACvE,UAAM,eAAe;AACrB,UAAM,kBAAkB;AACxB,UAAM,oBAAoB,KAAK,aAAa,eAAe;AAC3D,UAAM,aAAa,oBAAoB,gBAAgB,UAAU,oBAAoB;AACrF,SAAK,gCAAgC,KAAK,sBAAsB,KAAK,gCAChC,aAAa,KAAK;AACvD,UAAM,mBAAoB,KAAK,4BAA4B,IACjC,KAAK,+BAA+B,KAAK,4BAA6B;AAChG,UAAM,iBAAiB,mBAAmB;AAC1C,UAAM,uBAAwB,kBAAkB,oBAAoB,gBAAgB,UAAW,IAAI;AAEnG,SAAK,SAAS,SAAS,6BAA6B,QAAQ,KAAK;AACjE,SAAK,SAAS,SAAS,oBAAoB,QAAQ,KAAK;AACxD,SAAK,SAAS,SAAS,gBAAgB,QAAQ,KAAK;AACpD,SAAK,SAAS,SAAS,YAAY,QAAQ,YAAY,IAAG;AAC1D,SAAK,SAAS,SAAS,eAAe,QAAQ;AAC9C,SAAK,SAAS,qBAAqB;AACnC,SAAK,wBAAwB,CAAC;EACtC;;;;;;;EAQI,oBAAoB,eAAe,kBAAkB;AACjD,UAAM,WAAW,KAAK;AACtB,aAAS,WAAW,WAAW,IAAI,aAAa;AAChD,aAAS,WAAW,WAAW,cAAc;AAC7C,QAAI,mBAAmB,KAAK,KAAK,oBAAoB;AAAI,WAAK,kBAAkB,YAAY,IAAG;AAC/F,aAAS,gBAAgB;EACjC;;;;;EAMI,mBAAmB;AACf,aAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AACzC,YAAM,QAAQ,KAAK,SAAS,CAAC;AAC7B,YAAM,gBAAe;IACjC;EACA;EA6BI,cAAc,aAAa,GAAG;AAC1B,SAAK,aAAa;AAClB,SAAK,SAAS,SAAS,WAAW,QAAQ;AAC1C,SAAK,SAAS,qBAAqB;EAC3C;EAEI,gBAAgB;AACZ,WAAO,KAAK;EACpB;EAEI,yBAAyB,SAAS;AAC9B,SAAK,wBAAwB;AAC7B,SAAK,SAAS,SAAS,sBAAsB,QAAQ,UAAU,IAAI;AACnE,SAAK,SAAS,qBAAqB;EAC3C;EAEI,2BAA2B;AACvB,WAAO,KAAK;EACpB;EAEI,uBAAuB;AACnB,WAAO,KAAK;EACpB;EAEI,gBAAgB;AACZ,WAAO,WAAU,4BAA4B,KAAK,MAAM;EAChE;EAEI,OAAO,4BAA4B,QAAQ;AACvC,QAAI,kBAAkB;AACtB,aAAS,SAAS,QAAQ;AACtB,UAAI,SAAS,MAAM;AAAa,2BAAmB,MAAM,YAAY,cAAa;IAC9F;AACQ,WAAO;EACf;EAEI,OAAO,kCAAkC,cAAc;AACnD,QAAI,kBAAkB;AACtB,aAAS,eAAe;AAAc,yBAAmB,YAAY,cAAa;AAClF,WAAO;EACf;EAEI,mBAAmB;AACf,WAAO,WAAU,+BAA+B,KAAK,MAAM;EACnE;EAEI,OAAO,+BAA+B,QAAQ;AAC1C,QAAI,kBAAkB;AACtB,aAAS,SAAS,QAAQ;AACtB,UAAI,SAAS,MAAM;AAAa,2BAAmB,MAAM,YAAY,iBAAgB;IACjG;AACQ,WAAO;EACf;EAEI,OAAO,qCAAqC,cAAc;AACtD,QAAI,kBAAkB;AACtB,aAAS,eAAe;AAAc,yBAAmB,YAAY,iBAAgB;AACrF,WAAO;EACf;EAEI,0CAA0C;AAEtC,QAAI,CAAC,KAAK;AAAU;AAEpB,UAAM,KAAK,KAAK,SAAS,WAAU;AAEnC,QAAI,KAAK,2BAA2B,KAAK;AACrC,SAAG,kBAAkB,KAAK,2BAA2B,GAAG;AACxD,WAAK,2BAA2B,MAAM;IAClD;AACQ,QAAI,KAAK,2BAA2B,SAAS;AACzC,SAAG,cAAc,KAAK,2BAA2B,OAAO;AACxD,SAAG,aAAa,KAAK,2BAA2B,YAAY;AAC5D,SAAG,aAAa,KAAK,2BAA2B,cAAc;AAC9D,WAAK,2BAA2B,UAAU;AAC1C,WAAK,2BAA2B,eAAe;AAC/C,WAAK,2BAA2B,iBAAiB;IAC7D;AACQ,SAAK,8CAA6C;AAClD,QAAI,KAAK,2BAA2B,IAAI;AACpC,SAAG,wBAAwB,KAAK,2BAA2B,EAAE;AAC7D,WAAK,2BAA2B,KAAK;IACjD;EACA;EAEI,gDAAgD;AAE5C,QAAI,CAAC,KAAK;AAAU;AAEpB,UAAM,KAAK,KAAK,SAAS,WAAU;AAEnC,QAAI,KAAK,2BAA2B,eAAe;AAC/C,WAAK,2BAA2B,gBAAgB;AAChD,SAAG,aAAa,KAAK,2BAA2B,aAAa;IACzE;AACQ,QAAI,KAAK,2BAA2B,oBAAoB;AACpD,SAAG,aAAa,KAAK,2BAA2B,kBAAkB;AAClE,WAAK,2BAA2B,qBAAqB;IACjE;EACA;;;;;EAMI,YAAY,UAAU;AAClB,QAAI,aAAa,KAAK,UAAU;AAC5B,WAAK,WAAW;AAChB,YAAM,KAAK,KAAK,SAAS,WAAU;AACnC,YAAM,aAAa,IAAI,gBAAgB,EAAE;AACzC,YAAM,eAAe,IAAI,kBAAkB,IAAI,YAAY,CAAA,CAAE;AAC7D,iBAAW,KAAK,YAAY;AAC5B,WAAK,aAAa,IAAU,WAAW,IAAI,YAAY,YAAY;AACnE,UAAI,KAAK,mCAAmC,KAAK,cAAa,IAAK,GAAG;AAClE,aAAK,2CAA0C;AAC/C,cAAM,EAAE,SAAAA,UAAS,aAAY,IAAK,KAAK,+BAA+B,GAAG,KAAK,cAAa,IAAK,CAAC;AACjG,aAAK,yCAAyCA,UAAS,YAAY;MACnF;IACA;EACA;;;;;;;EAwMI,8CAA8C,UAAUA,UAAS,cAAc;AAE3E,QAAI,CAAC,KAAK;AAAU;AAEpB,UAAM,KAAK,KAAK,SAAS,WAAU;AAEnC,UAAM,aAAa,GAAG,aAAa,GAAG,oBAAoB;AAC1D,OAAG,gBAAgB,KAAK,2BAA2B,GAAG;AAEtD,UAAM,YAAY,KAAK,mCAAmC,cAAc;AACxE,UAAM,0BAA0B;AAChC,UAAM,kBAAkB,eAAe;AAEvC,OAAG,WAAW,GAAG,cAAc,KAAK,2BAA2B,aAAa;AAE5E,QAAI,UAAU;AACV,SAAG,cAAc,GAAG,cAAc,iBAAiBA,QAAO;IACtE,OAAe;AACH,YAAM,WAAW,IAAI,UAAU,KAAK,iBAAgB,IAAK,uBAAuB;AAChF,eAAS,IAAIA,QAAO;AACpB,SAAG,WAAW,GAAG,cAAc,UAAU,GAAG,WAAW;IACnE;AAEQ,OAAG,WAAW,GAAG,cAAc,IAAI;AAEnC,QAAI;AAAY,SAAG,gBAAgB,UAAU;EACrD;;;;;;;EAQI,uDAAuD,UAAUM,mBAAkB,cAAc;AAE7F,QAAI,CAAC,KAAK,YAAY,CAAC,KAAK;AAAa;AAEzC,UAAM,KAAK,KAAK,SAAS,WAAU;AAEnC,UAAM,aAAa,GAAG,aAAa,GAAG,oBAAoB;AAC1D,OAAG,gBAAgB,KAAK,2BAA2B,GAAG;AAEtD,UAAM,kBAAkB,eAAe;AAEvC,OAAG,WAAW,GAAG,cAAc,KAAK,2BAA2B,sBAAsB;AAErF,QAAI,UAAU;AACV,SAAG,cAAc,GAAG,cAAc,iBAAiBA,iBAAgB;IAC/E,OAAe;AACH,YAAM,WAAW,IAAI,YAAY,KAAK,iBAAgB,IAAK,CAAC;AAC5D,eAAS,IAAIA,iBAAgB;AAC7B,SAAG,WAAW,GAAG,cAAc,UAAU,GAAG,WAAW;IACnE;AACQ,OAAG,WAAW,GAAG,cAAc,IAAI;AAEnC,QAAI;AAAY,SAAG,gBAAgB,UAAU;EACrD;;;;;;;EAQI,gBAAgB,OAAO,KAAK;AAExB,QAAI;AACJ,UAAM,YAAY,MAAM,QAAQ;AAChC,mBAAe,IAAI,YAAY,SAAS;AACxC,aAAS,IAAI,OAAO,KAAK,KAAK,KAAK;AAC/B,mBAAa,CAAC,IAAI,KAAK,gCAAgC,CAAC;IACpE;AAEQ,WAAO;EACf;;;;;;;;;;;;EAsJI,wBAAwB,aAAa,WAAW,sBAAsB;AAClE,QAAI,yBAAyB,UAAa,yBAAyB,MAAM;AACrE,6BAAuB,KAAK,cAAc,QAAQ;IAC9D;AACQ,cAAU,cAAc,KAAK,uBAAuB,WAAW;AAC/D,cAAU,aAAa,KAAK,mBAAmB,WAAW;AAC1D,cAAU,iBAAiB,uBAAuB,KAAK,0BAA0B,WAAW,IAAI;EACxG;;;;;;;;;;;;;;;;EAiBI,oBAAoB,aAAaN,UAAS,QAAQ,oBAAoB,qBAClD,6BAA6B,GAAG,qCAAqC,GAAG,UAAU,QAAQ,YAAY,GAAG;AAEzH,aAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AACzC,UAAI,wBAAwB,UAAa,wBAAwB,MAAM;AACnE,8BAAsB,KAAK,cAAc,QAAQ;MACjE;AAEY,YAAM,QAAQ,KAAK,SAAS,CAAC;AAC7B,YAAM,cAAc,MAAM;AAC1B,YAAM,iBAAiB,sBAAsB,MAAM,YAAY;AAC/D,UAAI,aAAa;AACb,oBAAY;UAAyB;UAAa;UACb;UAAU;UAAQ;UAAW;QAA0B;MAC5G;AACY,UAAIA;AAAS,oBAAY,qBAAqBA,UAAS,gBAAgB,UAAU,QAAQ,SAAS;AAClG,UAAI;AAAQ,oBAAY,oBAAoB,QAAQ,MAAM,cAAc,UAAU,QAAQ,SAAS;AACnG,UAAI,oBAAoB;AACpB,oBAAY;UAA4B;UAAoB,KAAK;UACzB;UAAgB;UAAU;UAAQ;UAAW;QAAkC;MACvI;AACY,mBAAa,YAAY,cAAa;IAClD;EACA;;;;;;;;;EAUI,kBAAkB,OAAO,KAAK,UAAU,OAAO;AAC3C,UAAM,aAAa,MAAM,QAAQ;AACjC,UAAM,eAAe,IAAI,aAAa,aAAa,CAAC;AACpD,SAAK,oBAAoB,MAAM,cAAc,MAAM,MAAM,QAAW,QAAW,QAAW,KAAK;AAC/F,QAAI;AACJ,QAAI,iBAAiB,UAAU,IAAI;AACnC,iBAAa,IAAI,WAAW,aAAa,cAAc;AACvD,aAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACjC,eAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,mBAAW,IAAI,iBAAiB,CAAC,IAAI,KAAK,MAAM,aAAa,IAAI,IAAI,CAAC,IAAI,GAAM;MAChG;AACY,UAAI;AAAS,mBAAW,IAAI,iBAAiB,CAAC,IAAI;IAC9D;AACQ,WAAO;EACf;;;;;;;;EASI,gBAAgB,OAAO,KAAK,UAAU,OAAO;AACzC,UAAM,aAAa,MAAM,QAAQ;AACjC,UAAM,eAAe,IAAI,aAAa,aAAa,CAAC;AACpD,SAAK,oBAAoB,MAAM,cAAc,MAAM,MAAM,QAAW,QAAW,QAAW,KAAK;AAC/F,QAAI,CAAC;AAAS,aAAO;AACrB,QAAI,qBAAqB,IAAI,aAAa,aAAa,CAAC;AACxD,aAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACjC,eAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,2BAAmB,IAAI,IAAI,CAAC,IAAI,aAAa,IAAI,IAAI,CAAC;MACtE;AACY,yBAAmB,IAAI,IAAI,CAAC,IAAI;IAC5C;AACQ,WAAO;EACf;;;;;;EAiEI,kBAAkB,YAAY,cAAc;AACxC,UAAM,QAAQ,KAAK,SAAS,UAAU;AACtC,UAAM,gBAAe;AACrB,iBAAa,KAAK,MAAM,SAAS;EACzC;;;;;;EAOI,SAAS,YAAY;AACjB,QAAI,aAAa,KAAK,cAAc,KAAK,OAAO,QAAQ;AACpD,YAAM,IAAI,MAAM,+CAA+C;IAC3E;AACQ,WAAO,KAAK,OAAO,UAAU;EACrC;EAEI,uBAAuB,aAAa;AAChC,WAAO,KAAK,SAAS,KAAK,gCAAgC,WAAW,CAAC,EAAE;EAChF;EAEI,sBAAsB,aAAa;AAC/B,WAAO,KAAK,gCAAgC,WAAW;EAC/D;EAEI,0BAA0B,aAAa;AACnC,WAAO,KAAK,SAAS,KAAK,gCAAgC,WAAW,CAAC,EAAE;EAChF;EAEI,mBAAmB,aAAa;AAC5B,WAAO,KAAK,qCAAqC,WAAW;EACpE;EAEI,OAAO,sBAAsB,QAAQ;AACjC,UAAM,iBAAiB,OAAO;AAC9B,UAAM,iBAAiB,CAAA;AACvB,aAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AACzB,qBAAe,CAAC,IAAI,KAAK,MAAM,eAAe,CAAC,IAAI,GAAM;IACrE;AACQ,WAAO;EACf;AACA;AChrEA,IAAA,aAAe;ACGf,SAAS,WAAW,MAAM;AAEtB,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,MAAIO;AAEJ,WAAS,KAAK,gBAAgB,kBAAkB,eAClC,yBAAyB,mBAAmB,0BAA0B,gBAAgB;AAChG,UAAM,gBAAgB,YAAY,IAAG;AAErC,QAAI,CAAC,iBAAiB;AAClB,YAAM,gBAAgB,IAAI,YAAY,YAAY,qBAAqB,kBAAkB,aAAaA,WAAU,WAAW;AAC3H,oBAAc,IAAI,iBAAiB;AACnC,YAAM,aAAa,IAAI,aAAa,YAAY,kBAAkB,eAAe,aAAaA,WAAU,aAAa;AACrH,iBAAW,IAAI,cAAc;AAC7B,UAAI,yBAAyB;AACzB,YAAI;AACJ,YAAI,kBAAkB;AAClB,iCAAuB,IAAI;YAAW;YAAY;YACZ,yBAAyB,aAAaA,WAAU;UAAW;QACrH,OAAuB;AACH,iCAAuB,IAAI;YAAa;YAAY;YACZ,yBAAyB,aAAaA,WAAU;UAAa;QACzH;AACgB,6BAAqB,IAAI,wBAAwB;MACjE;IACA;AAEQ,QAAI,CAAC;AAAY,mBAAa,IAAI,YAAYA,WAAU,aAAa;AACrE,QAAI,aAAa,YAAY,qBAAqB,EAAE,EAAE,IAAI,aAAa;AACvE,QAAI,YAAY,YAAY,mBAAmBA,WAAU,aAAa,EAAE,IAAI,UAAU;AACtF,iBAAa,QAAQ;MAAY;MAAqB;MAAe;MACpC;MAAuB;MAAmB;MAC1C;MAAqB;MAAwB;MAAkBA,WAAU;MACzE;MAAgB;MAAkB;MAAY;MAAyB;MACvE;IAAW;AAE5C,UAAM,cAAc;MAChB,YAAY;MACZ,kBAAkB;MAClB,oBAAoB;MACpB,YAAY;IACxB;AACQ,QAAI,CAAC,iBAAiB;AAClB,YAAM,gBAAgB,IAAI,YAAY,YAAY,qBAAqB,gBAAgB;AACvF,UAAI,CAAC,oBAAoB,iBAAiB,SAAS,kBAAkB;AACjE,2BAAmB,IAAI,YAAY,gBAAgB;MACnE;AACY,uBAAiB,IAAI,aAAa;AAClC,kBAAY,gBAAgB;IACxC;AACQ,UAAM,cAAc,YAAY,IAAG;AAEnC,gBAAY,WAAW,cAAc;AAErC,SAAK,YAAY,WAAW;EACpC;AAEI,OAAK,YAAY,CAAC,MAAM;AACpB,QAAI,EAAE,KAAK,SAAS;AAChB,gBAAU,EAAE,KAAK;AACjB,yBAAmB,EAAE,KAAK;AAC1B,UAAI,kBAAkB;AAClB,YAAI;UAAW;UAAY,gBAAgB,EAAE,KAAK,MAAM,OAAOA,WAAU,cAAc;UACxE,EAAE,KAAK,MAAM,QAAQ;QAAC,EAAE,IAAI,IAAI,WAAW,OAAO,CAAC;MAClF,OAAmB;AACH,YAAI;UAAa;UAAY,gBAAgB,EAAE,KAAK,MAAM,OAAOA,WAAU,gBAAgB;UAC1E,EAAE,KAAK,MAAM,QAAQ;QAAC,EAAE,IAAI,IAAI,aAAa,OAAO,CAAC;MACtF;AACY,UAAI,aAAa;AACb,YAAI;UAAY;UAAY,yBAAyB,EAAE,KAAK,MAAM,OAAO;UACzD,EAAE,KAAK,MAAM;QAAK,EAAE,IAAI,IAAI,YAAY,gBAAgB,CAAC;MACzF;AACY,WAAK,YAAY;QACb,iBAAiB;MACjC,CAAa;IACb,WAAmB,EAAE,KAAK,MAAM;AACpB,YAAM,cAAc,EAAE,KAAK,KAAK,oBAAoB;AACpD,YAAM,YAAY,EAAE,KAAK,KAAK,kBAAkB;AAChD,YAAM,0BAA0B,EAAE,KAAK,KAAK;AAE5C,UAAI;AACJ,UAAI;AACJ,UAAI;AACJ,UAAI,CAAC,iBAAiB;AAClB,4BAAoB,EAAE,KAAK,KAAK;AAChC,yBAAiB,EAAE,KAAK,KAAK;AAC7B,YAAI;AAAyB,qCAA2B,EAAE,KAAK,KAAK;MACpF;AACY;QAAK;QAAW;QAAa,EAAE,KAAK,KAAK;QAAe;QACnD;QAAmB;QAA0B;MAAc;IAC5E,WAAmB,EAAE,KAAK,MAAM;AAEpB,MAAAA,aAAY,EAAE,KAAK,KAAK;AAExB,mBAAa,EAAE,KAAK,KAAK;AACzB,wBAAkB,EAAE,KAAK,KAAK;AAC9B,yBAAmB,EAAE,KAAK,KAAK;AAC/B,oBAAc,EAAE,KAAK,KAAK;AAE1B,YAAM,0BAA0B,mBAAoBA,WAAU,cAAc,IAAMA,WAAU,gBAAgB;AAE5G,YAAM,kBAAkB,IAAI,WAAW,EAAE,KAAK,KAAK,eAAe;AAElE,YAAM,aAAa,KAAKA,WAAU;AAClC,YAAM,iCAAiC,aAAaA,WAAU;AAC9D,YAAM,2BAA2B,aAAa;AAC9C,YAAM,6CAA6C;AACnD,YAAM,wCAAwC,mBACC,aAAaA,WAAU,cAAgB,aAAaA,WAAU;AAC7G,YAAM,mCAAmC,aAAaA,WAAU;AAChE,YAAM,iCAAiC,aAAaA,WAAU;AAC9D,YAAM,2CAA2CA,WAAU,gBAAgBA,WAAU,cAAc;AACnG,YAAM,oCAAoC,cAAe,aAAaA,WAAU,cAAe;AAC/F,YAAM,8BAA8B,cAAeA,WAAU,YAAY,aAAc;AACvF,YAAM,cAAcA,WAAU,iBAAiB;AAE/C,YAAM,sBAAsB,iCACA,2BACA,6CACA,wCACA,mCACA,2CACA,iCACA,oCACA,8BACA;AAC5B,YAAM,qBAAqB,KAAK,MAAM,sBAAsBA,WAAU,cAAc,IAAK;AACzF,YAAM,mBAAmB;QACrB,QAAQ,CAAA;QACR,KAAK;UACD,QAAQ,IAAI,YAAY,OAAO;YAC3B,SAAS,qBAAqB;YAC9B,SAAS,qBAAqB;YAC9B,QAAQ;UAChC,CAAqB;QACrB;MACA;AACY,kBAAY,QAAQ,eAAe,EAClC,KAAK,CAAC,eAAe;AAClB,eAAO,YAAY,YAAY,YAAY,gBAAgB;MAC3E,CAAa,EACA,KAAK,CAAC,aAAa;AAChB,uBAAe;AACf,8BAAsB;AACtB,wBAAgB,sBAAsB;AACtC,8BAAsB,gBAAgB;AACtC,qCAA6B,sBAAsB;AACnD,gCAAwB,6BAA6B;AACrD,4BAAoB,wBAAwB;AAC5C,8BAAsB,oBAAoB;AAC1C,iCAAyB,sBAAsB;AAC/C,2BAAmB,yBAAyB;AAC5C,qBAAa,iBAAiB,IAAI,OAAO;AACzC,YAAI,iBAAiB;AACjB,eAAK,YAAY;YACb,2BAA2B;YAC3B,uBAAuB;YACvB,uBAAuB;YACvB,uBAAuB;YACvB,uBAAuB;YACvB,8BAA8B;YAC9B,8BAA8B;YAC9B,oBAAoB;YACpB,oBAAoB;UAC5C,CAAqB;QACrB,OAAuB;AACH,eAAK,YAAY;YACb,2BAA2B;UACnD,CAAqB;QACrB;MACA,CAAa;IACb;EACA;AACA;AAEO,SAAS,iBAAiB,YAAY,iBAAiB,kBAAkB,aAAa;AACzF,QAAM,SAAS,IAAI;IACf,IAAI;MACA,IAAI,KAAK,CAAC,KAAK,WAAW,SAAQ,GAAI,SAAS,GAAG;QAC9C,MAAM;MACtB,CAAa;IACb;EACA;AAEI,QAAM,yBAAyB,KAAK,UAAU;AAC9C,QAAM,kBAAkB,IAAI,WAAW,uBAAuB,MAAM;AACpE,WAAS,IAAI,GAAG,IAAI,uBAAuB,QAAQ,KAAK;AACpD,oBAAgB,CAAC,IAAI,uBAAuB,WAAW,CAAC;EAChE;AAEI,SAAO,YAAY;IACf,QAAQ;MACJ,mBAAmB,gBAAgB;MACnC,cAAc;MACd,mBAAmB;MACnB,oBAAoB;MACpB,eAAe;;MAEf,aAAa;QACT,iBAAiB,UAAU;QAC3B,eAAe,UAAU;QACzB,iBAAiB,UAAU;QAC3B,kBAAkB,UAAU;QAC5B,aAAa,UAAU;MACvC;IACA;EACA,CAAK;AACD,SAAO;AACX;ACpOY,IAAC,YAAY;EACrB,MAAM;EACN,IAAI;EACJ,IAAI;AACR;ACUO,IAAM,WAAN,MAAM,UAAS;EAElB,OAAO,aAAc,UAAW;AAE5B,UAAM,SAAS,SAAS,cAAe,QAAQ;AAE/C,aAAS,cAA4B;AAEjC,UAAI,iBAAiB;AAErB,qBAAe,iBAAkB,SAAU;AAEvC,gBAAQ,iBAAkB,OAAO,cAAc;AAE/C,cAAM,SAAS,GAAG,WAAY,OAAO;AACrC,eAAO,cAAc;AAErB,yBAAiB;MAEjC;AAEY,eAAS,iBAA8B;AAEnC,uBAAe,oBAAqB,OAAO,cAAc;AAEzD,eAAO,cAAc;AAErB,yBAAiB;MAEjC;AAIY,aAAO,MAAM,UAAU;AAEvB,aAAO,MAAM,SAAS;AACtB,aAAO,MAAM,OAAO;AACpB,aAAO,MAAM,QAAQ;AAErB,aAAO,cAAc;AASrB,YAAM,cAAc,EAAE,kBAAkB,CAAC,eAAe,iBAAiB,iBAAiB,QAAQ,EAAC;AAEnG,aAAO,eAAe,WAAW;AAE7B,eAAO,MAAM,UAAU;MAEvC;AAEY,aAAO,eAAe,WAAW;AAE7B,eAAO,MAAM,UAAU;MAEvC;AAEY,aAAO,UAAU,WAAW;AAExB,YAAK,mBAAmB,MAAO;AAE3B,oBAAU,GAAG,eAAgB,gBAAgB,WAAW,EAAG,KAAM,gBAAgB;QAErG,OAAuB;AAEH,yBAAe,IAAG;AAElB,cAAK,UAAU,GAAG,iBAAiB,QAAY;AAE3C,sBAAU,GAAG,aAAc,gBAAgB,WAAW,EACjD,KAAM,gBAAgB,EACtB,MAAO,CAAE,QAAS;AAEf,sBAAQ,KAAM,GAAG;YAEjD,CAA6B;UAE7B;QAEA;MAEA;AAEY,UAAK,UAAU,GAAG,iBAAiB,QAAY;AAE3C,kBAAU,GAAG,aAAc,gBAAgB,WAAW,EACjD,KAAM,gBAAgB,EACtB,MAAO,CAAE,QAAS;AAEf,kBAAQ,KAAM,GAAG;QAEzC,CAAqB;MAErB;IAEA;AAEQ,aAAS,gBAAgB;AAErB,aAAO,MAAM,UAAU;AAEvB,aAAO,MAAM,SAAS;AACtB,aAAO,MAAM,OAAO;AACpB,aAAO,MAAM,QAAQ;AAErB,aAAO,eAAe;AACtB,aAAO,eAAe;AAEtB,aAAO,UAAU;IAE7B;AAEQ,aAAS,oBAAoB;AAEzB,oBAAa;AAEb,aAAO,cAAc;IAEjC;AAEQ,aAAS,iBAAkB,WAAY;AAEnC,oBAAa;AAEb,cAAQ,KAAM,uDAAuD,SAAS;AAE9E,aAAO,cAAc;IAEjC;AAEQ,aAAS,eAAgB,SAAU;AAE/B,cAAQ,MAAM,WAAW;AACzB,cAAQ,MAAM,SAAS;AACvB,cAAQ,MAAM,UAAU;AACxB,cAAQ,MAAM,SAAS;AACvB,cAAQ,MAAM,eAAe;AAC7B,cAAQ,MAAM,aAAa;AAC3B,cAAQ,MAAM,QAAQ;AACtB,cAAQ,MAAM,OAAO;AACrB,cAAQ,MAAM,YAAY;AAC1B,cAAQ,MAAM,UAAU;AACxB,cAAQ,MAAM,UAAU;AACxB,cAAQ,MAAM,SAAS;IAEnC;AAEQ,QAAK,QAAQ,WAAY;AAErB,aAAO,KAAK;AACZ,aAAO,MAAM,UAAU;AAEvB,qBAAgB,MAAM;AAEtB,gBAAU,GAAG,mBAAoB,cAAc,EAAG,KAAM,SAAU,WAAY;AAE1E,oBAAY,YAAW,IAAK,kBAAiB;AAE7C,YAAK,aAAa,UAAS,oBAAqB;AAE5C,iBAAO,MAAK;QAEhC;MAEA,CAAa,EAAG,MAAO,gBAAgB;AAE3B,aAAO;IAEnB,OAAe;AAEH,YAAM,UAAU,SAAS,cAAe,GAAG;AAE3C,UAAK,OAAO,oBAAoB,OAAQ;AAEpC,gBAAQ,OAAO,SAAS,SAAS,KAAK,QAAS,UAAU,QAAQ;AACjE,gBAAQ,YAAY;MAEpC,OAAmB;AAEH,gBAAQ,OAAO;AACf,gBAAQ,YAAY;MAEpC;AAEY,cAAQ,MAAM,OAAO;AACrB,cAAQ,MAAM,QAAQ;AACtB,cAAQ,MAAM,iBAAiB;AAE/B,qBAAgB,OAAO;AAEvB,aAAO;IAEnB;EAEA;EAEI,OAAO,iCAAiC;AAEpC,QAAK,OAAO,cAAc,eAAe,QAAQ,WAAY;AAIzD,UAAK,iBAAiB,KAAM,UAAU,SAAS;AAAK;AAEpD,gBAAU,GAAG,iBAAkB,kBAAkB,MAAM;AAEnD,kBAAS,qBAAqB;MAE9C,CAAa;IAEb;EAEA;AAEA;AAEA,SAAS,qBAAqB;AAC9B,SAAS,+BAA8B;AC9NhC,IAAM,WAAN,MAAe;EAElB,OAAO,aAAc,UAAU,cAAc,CAAA,GAAK;AAE9C,UAAM,SAAS,SAAS,cAAe,QAAQ;AAE/C,aAAS,cAA4B;AAEjC,UAAK,YAAY,eAAe,QAAY;AAExC,cAAM,UAAU,SAAS,cAAe,KAAK;AAC7C,gBAAQ,MAAM,UAAU;AACxB,iBAAS,KAAK,YAAa,OAAO;AAElC,cAAM,MAAM,SAAS,gBAAiB,8BAA8B,KAAK;AACzE,YAAI,aAAc,SAAS,EAAE;AAC7B,YAAI,aAAc,UAAU,EAAE;AAC9B,YAAI,MAAM,WAAW;AACrB,YAAI,MAAM,QAAQ;AAClB,YAAI,MAAM,MAAM;AAChB,YAAI,iBAAkB,SAAS,WAAW;AAEtC,yBAAe,IAAG;QAEtC,CAAiB;AACD,gBAAQ,YAAa,GAAG;AAExB,cAAM,OAAO,SAAS,gBAAiB,8BAA8B,MAAM;AAC3E,aAAK,aAAc,KAAK,+BAA+B;AACvD,aAAK,aAAc,UAAU,MAAM;AACnC,aAAK,aAAc,gBAAgB,CAAC;AACpC,YAAI,YAAa,IAAI;AAErB,YAAK,YAAY,qBAAqB,QAAY;AAE9C,sBAAY,mBAAmB,CAAA;QAEnD;AAEgB,oBAAY,iBAAiB,KAAM,aAAa;AAChD,oBAAY,aAAa,EAAE,MAAM,QAAO;MAExD;AAIY,UAAI,iBAAiB;AAErB,qBAAe,iBAAkB,SAAU;AAEvC,gBAAQ,iBAAkB,OAAO,cAAc;AAE/C,iBAAS,GAAG,sBAAuB,OAAO;AAE1C,cAAM,SAAS,GAAG,WAAY,OAAO;AAErC,eAAO,cAAc;AACrB,oBAAY,WAAW,KAAK,MAAM,UAAU;AAE5C,yBAAiB;MAEjC;AAEY,eAAS,iBAA8B;AAEnC,uBAAe,oBAAqB,OAAO,cAAc;AAEzD,eAAO,cAAc;AACrB,oBAAY,WAAW,KAAK,MAAM,UAAU;AAE5C,yBAAiB;MAEjC;AAIY,aAAO,MAAM,UAAU;AAEvB,aAAO,MAAM,SAAS;AACtB,aAAO,MAAM,OAAO;AACpB,aAAO,MAAM,QAAQ;AAErB,aAAO,cAAc;AAErB,aAAO,eAAe,WAAW;AAE7B,eAAO,MAAM,UAAU;MAEvC;AAEY,aAAO,eAAe,WAAW;AAE7B,eAAO,MAAM,UAAU;MAEvC;AAEY,aAAO,UAAU,WAAW;AAExB,YAAK,mBAAmB,MAAO;AAE3B,oBAAU,GAAG,eAAgB,gBAAgB,WAAW,EAAG,KAAM,gBAAgB;QAErG,OAAuB;AAEH,yBAAe,IAAG;AAElB,cAAK,UAAU,GAAG,iBAAiB,QAAY;AAE3C,sBAAU,GAAG,aAAc,gBAAgB,WAAW,EACjD,KAAM,gBAAgB,EACtB,MAAO,CAAE,QAAS;AAEf,sBAAQ,KAAM,GAAG;YAEjD,CAA6B;UAE7B;QAEA;MAEA;AAEY,UAAK,UAAU,GAAG,iBAAiB,QAAY;AAE3C,kBAAU,GAAG,aAAc,gBAAgB,WAAW,EACjD,KAAM,gBAAgB,EACtB,MAAO,CAAE,QAAS;AAEf,kBAAQ,KAAM,GAAG;QAEzC,CAAqB;MAErB;IAEA;AAEQ,aAAS,gBAAgB;AAErB,aAAO,MAAM,UAAU;AAEvB,aAAO,MAAM,SAAS;AACtB,aAAO,MAAM,OAAO;AACpB,aAAO,MAAM,QAAQ;AAErB,aAAO,eAAe;AACtB,aAAO,eAAe;AAEtB,aAAO,UAAU;IAE7B;AAEQ,aAAS,qBAAqB;AAE1B,oBAAa;AAEb,aAAO,cAAc;IAEjC;AAEQ,aAAS,iBAAkB,WAAY;AAEnC,oBAAa;AAEb,cAAQ,KAAM,uDAAuD,SAAS;AAE9E,aAAO,cAAc;IAEjC;AAEQ,aAAS,eAAgB,SAAU;AAE/B,cAAQ,MAAM,WAAW;AACzB,cAAQ,MAAM,SAAS;AACvB,cAAQ,MAAM,UAAU;AACxB,cAAQ,MAAM,SAAS;AACvB,cAAQ,MAAM,eAAe;AAC7B,cAAQ,MAAM,aAAa;AAC3B,cAAQ,MAAM,QAAQ;AACtB,cAAQ,MAAM,OAAO;AACrB,cAAQ,MAAM,YAAY;AAC1B,cAAQ,MAAM,UAAU;AACxB,cAAQ,MAAM,UAAU;AACxB,cAAQ,MAAM,SAAS;IAEnC;AAEQ,QAAK,QAAQ,WAAY;AAErB,aAAO,KAAK;AACZ,aAAO,MAAM,UAAU;AAEvB,qBAAgB,MAAM;AAEtB,gBAAU,GAAG,mBAAoB,cAAc,EAAG,KAAM,SAAU,WAAY;AAE1E,oBAAY,YAAW,IAAK,mBAAkB;MAE9D,CAAa,EAAG,MAAO,gBAAgB;AAE3B,aAAO;IAEnB,OAAe;AAEH,YAAM,UAAU,SAAS,cAAe,GAAG;AAE3C,UAAK,OAAO,oBAAoB,OAAQ;AAEpC,gBAAQ,OAAO,SAAS,SAAS,KAAK,QAAS,UAAU,QAAQ;AACjE,gBAAQ,YAAY;MAEpC,OAAmB;AAEH,gBAAQ,OAAO;AACf,gBAAQ,YAAY;MAEpC;AAEY,cAAQ,MAAM,OAAO;AACrB,cAAQ,MAAM,QAAQ;AACtB,cAAQ,MAAM,iBAAiB;AAE/B,qBAAgB,OAAO;AAEvB,aAAO;IAEnB;EAEA;AAEA;ACnPY,IAAC,aAAa;EACtB,QAAQ;EACR,UAAU;EACV,OAAO;AACX;ACsBA,IAAM,mBAAmB;AACzB,IAAM,sCAAsC;AAC5C,IAAM,qDAAqD;AAC3D,IAAM,6BAA6B;AACnC,IAAM,8BAA8B;AACpC,IAAM,kDAAkD;AAMjD,IAAM,UAAN,MAAM,QAAO;EAEhB,YAAYF,WAAU,CAAA,GAAI;AAmV1B,qCAAY,WAAW;AAEnB,YAAM,UAAU,IAAU,QAAO;AACjC,YAAM,iBAAiB,IAAU,QAAO;AACxC,YAAM,kBAAkB,IAAU,QAAO;AAEzC,aAAO,SAAS,GAAG;AACf,gBAAQ,IAAI,GAAG,GAAG,EAAE;AACpB,gBAAQ,mBAAmB,KAAK,OAAO,WAAW;AAClD,uBAAe,iBAAiB,SAAS,KAAK,KAAK,GAAG;AACtD,wBAAgB,iBAAiB,SAAS,CAAC,KAAK,KAAK,GAAG;AACxD,gBAAQ,EAAE,MAAI;UACV,KAAK;AACD,iBAAK,mBAAmB;AACxB,iBAAK,qBAAoB;AAC7B;UACA,KAAK;AACD,iBAAK,mBAAmB;AACxB,iBAAK,qBAAoB;AAC7B;UACA,KAAK;AACD,iBAAK,OAAO,GAAG,mBAAmB,cAAc;AACpD;UACA,KAAK;AACD,iBAAK,OAAO,GAAG,mBAAmB,eAAe;AACrD;UACA,KAAK;AACD,iBAAK,iBAAiB,CAAC,KAAK;AAChC;UACA,KAAK;AACD,iBAAK,mBAAmB,CAAC,KAAK;AAClC;UACA,KAAK;AACD,iBAAK,WAAW,CAAC,KAAK;AACtB,gBAAI,KAAK,UAAU;AACf,mBAAK,UAAU,KAAI;YAC3C,OAA2B;AACH,mBAAK,UAAU,KAAI;YAC3C;AACgB;UACA,KAAK;AACD,gBAAI,CAAC,KAAK,qBAAqB;AAC3B,mBAAK,oBAAoB,CAAC,KAAK,OAAO,oBAAoB;YAClF;AACgB;UACA,KAAK;AACD,gBAAI,CAAC,KAAK,qBAAqB;AAC3B,mBAAK,UAAU,yBAAyB,CAAC,KAAK,UAAU,yBAAwB,CAAE;YAC1G;AACgB;UACA,KAAK;AACD,gBAAI,CAAC,KAAK,qBAAqB;AAC3B,mBAAK,UAAU,cAAc,KAAK,UAAU,cAAa,IAAK,IAAI;YAC1F;AACgB;UACA,KAAK;AACD,gBAAI,CAAC,KAAK,qBAAqB;AAC3B,mBAAK,UAAU,cAAc,KAAK,IAAI,KAAK,UAAU,cAAa,IAAK,MAAM,CAAG,CAAC;YACzG;AACgB;QAChB;MACA;IAEA,EAAK;AAWD,qCAAY,WAAW;AAEnB,YAAM,cAAc,IAAU,QAAO;AAErC,aAAO,SAAS,OAAO;AACnB,oBAAY,KAAK,KAAK,aAAa,EAAE,IAAI,KAAK,iBAAiB;AAC/D,cAAM,cAAc,eAAc;AAClC,cAAM,WAAW,cAAc,KAAK,gBAAgB,OAAO,YAAY,OAAM,IAAK;AAClF,YAAI,UAAU;AACV,eAAK,aAAa,KAAK;QACvC;MACA;IAEA,EAAK;AAOD,oDAA2B,WAAW;AAElC,YAAM,mBAAmB,IAAU,QAAO;AAC1C,YAAM,kBAAkB,IAAU,QAAO;AACzC,YAAM,UAAU,CAAA;AAEhB,aAAO,WAAW;AACd,YAAI,CAAC,KAAK,2BAA2B;AACjC,eAAK,oBAAoB,gBAAgB;AACzC,kBAAQ,SAAS;AACjB,eAAK,UAAU,+BAA+B,KAAK,QAAQ,KAAK,eAAe,gBAAgB;AAC/F,eAAK,UAAU,mBAAmB,KAAK,WAAW,OAAO;AACzD,cAAI,QAAQ,SAAS,GAAG;AACpB,kBAAM,MAAM,QAAQ,CAAC;AACrB,kBAAM,oBAAoB,IAAI;AAC9B,4BAAgB,KAAK,iBAAiB,EAAE,IAAI,KAAK,OAAO,QAAQ;AAChE,gBAAI,gBAAgB,OAAM,IAAK,qCAAqC;AAChE,mBAAK,qBAAqB,KAAK,KAAK,SAAS,MAAM;AACnD,mBAAK,iBAAiB,KAAK,iBAAiB;AAC5C,mBAAK,4BAA4B;AACjC,mBAAK,qCAAqC,eAAc;YAChF;UACA;QACA;MACA;IAEA,EAAK;AAsED,2CAAkB,WAAW;AAEzB,YAAM,mBAAmB,IAAU,QAAO;AAE1C,aAAO,WAAW;AACd,YAAI,CAAC,KAAK;AAAW;AACrB,cAAM,aAAa,KAAK,UAAU,cAAa;AAC/C,YAAI,aAAa,GAAG;AAChB,eAAK,UAAU,iBAAgB;AAC/B,eAAK,oBAAoB,gBAAgB;AACzC,gBAAM,eAAe,KAAK,OAAO,iBAAiB,SAAS,CAAC,IAAI,MAC3C,KAAK,mBAAmB,iBAAiB;AAC9D,gBAAM,eAAe,KAAK,OAAO,iBAAiB,SAAS,CAAC,IAAI,MAC3C,KAAK,mBAAmB,iBAAiB;AAE9D,gBAAM,kBAAkB,KAAK,OAAO,uBAAwB,IAAM,KAAK,mBAAoB;AAC3F,gBAAM,kBAAkB,KAAK,kBAAkB;AAC/C,gBAAM,yBAAyB,IAAM;AAErC,eAAK,qBAAqB,gBAAgB;AAC1C,eAAK,UAAU;YAAe;YAAkB,eAAe;YAAiB,eAAe;YACjE,KAAK,OAAO;YAAsB,KAAK,OAAO,QAAQ;YAAK;UAAsB;QAC/H;MACA;IAEA,EAAK;AA+YD;;;;2CAAkB,2BAAW;AAEzB,aAAO,SAAS,cAAc,qBAAqB,CAAA,GAAI,aAAa,MACpD,gBAAgB,MAAM,iCAAiC,MAAM;AAEzE,YAAI,KAAK,sBAAqB;AAAI,iBAAO,QAAQ,QAAO;AAExD,aAAK,mBAAmB;AACxB,YAAI,wBAAwB;AAE5B,cAAM,SAAS,CAAC,iBAAiB;AAC7B,cAAI,KAAK,sBAAqB;AAAI;AAElC,cAAI,0BAA0B,MAAM;AAChC,iBAAK,eAAe,WAAW,qBAAqB;AACpD,oCAAwB;UAC5C;AAIgB,cAAI,CAAC,KAAK,sBAAsB,KAAK,YAAY;AAC7C,iBAAK,WAAW,YAAY;cACxB,WAAW,aAAa,QAAQ;cAChC,oBAAoB,aAAa,aAAa;cAC9C,SAAS;gBACL,QAAQ,aAAa;gBACrB,MAAM,aAAa;gBACnB,SAAS,aAAa;cAClD;YACA,CAAqB;UACrB;AAEgB,eAAK,mBAAmB;AACxB,eAAK,2BAA2B;QAChD;AAEY,eAAO,IAAI,QAAQ,CAAC,YAAY;AAC5B,cAAI,eAAe;AACf,oCAAwB,KAAK,eAAe,QAAQ,sBAAsB;UAC9F;AACgB,yBAAe,MAAM;AACjB,gBAAI,KAAK,sBAAqB,GAAI;AAC9B,sBAAO;YAC/B,OAA2B;AACH,oBAAM,eAAe,KAAK;gBAAsB;gBAAc;gBACd;gBAAY;cAA8B;AAC1F,oBAAM,gBAAgB,KAAK,UAAU,iBAAgB;AACrD,kBAAI,KAAK,cAAc,KAAK,WAAW,kBAAkB;AAAe,qBAAK,kBAAiB;AAC9F,oBAAM,yBAA0B,CAAC,KAAK,cAAc,gBAAgB,IACnC,KAAK,gBAAgB,KAAK,SAAS,IAAI,QAAQ,QAAO;AACvF,qCAAuB,KAAK,MAAM;AAC9B,uBAAO,YAAY;AACnB,wBAAO;cACnC,CAAyB;YACzB;UACA,GAAmB,IAAI;QACvB,CAAa;MACb;IAEA,EAAK;AA2VD,wCAAe,WAAW;AAEtB,UAAI,cAAc;AAClB,YAAM,qBAAqB,IAAU,QAAO;AAC5C,YAAM,wBAAwB,IAAU,WAAU;AAClD,YAAM,gBAAgB;AAEtB,aAAO,WAAW;AACd,YAAI,eAAe;AACnB,YAAI,gBAAgB;AACpB,YAAI,KAAK,QAAQ;AACb,gBAAM,KAAK,KAAK,OAAO;AACvB,gBAAM,KAAK,KAAK,OAAO;AACvB,0BAAgB,KAAK,IAAI,GAAG,IAAI,mBAAmB,CAAC,IAAI,iBACxC,KAAK,IAAI,GAAG,IAAI,mBAAmB,CAAC,IAAI,iBACxC,KAAK,IAAI,GAAG,IAAI,mBAAmB,CAAC,IAAI,iBACxC,KAAK,IAAI,GAAG,IAAI,sBAAsB,CAAC,IAAI,iBAC3C,KAAK,IAAI,GAAG,IAAI,sBAAsB,CAAC,IAAI,iBAC3C,KAAK,IAAI,GAAG,IAAI,sBAAsB,CAAC,IAAI,iBAC3C,KAAK,IAAI,GAAG,IAAI,sBAAsB,CAAC,IAAI;QAC3E;AAEY,uBAAe,KAAK,eAAe,WAAW,UAAU,gBAAgB,KAAK,KAAK,UAAU,yBAC7E,iBAAiB,KAAK,eAAe,WAAW,UAAU,KAAK,gBAAgB,QAAQ,KAAK;AAE3G,YAAI,KAAK,QAAQ;AACb,6BAAmB,KAAK,KAAK,OAAO,QAAQ;AAC5C,gCAAsB,KAAK,KAAK,OAAO,UAAU;QACjE;AAEY;AACA,eAAO;MACnB;IAEA,EAAK;AAED,kCAAS,2BAAW;AAEhB,aAAO,WAAW;AACd,YAAI,CAAC,KAAK,eAAe,CAAC,KAAK;AAAkB;AAEjD,cAAM,iBAAiB,CAAC,eAAe;AACnC,mBAAS,SAAS,WAAW,UAAU;AACnC,gBAAI,MAAM;AAAS,qBAAO;UAC9C;AACgB,iBAAO;QACvB;AAEY,cAAM,gBAAgB,KAAK,SAAS;AACpC,YAAI,eAAe,KAAK,UAAU,GAAG;AACjC,eAAK,SAAS,OAAO,KAAK,YAAY,KAAK,MAAM;AACjD,eAAK,SAAS,YAAY;QAC1C;AACY,aAAK,SAAS,OAAO,KAAK,WAAW,KAAK,MAAM;AAChD,aAAK,SAAS,YAAY;AAC1B,YAAI,KAAK,YAAY,sBAAqB,IAAK;AAAK,eAAK,SAAS,OAAO,KAAK,YAAY,aAAa,KAAK,MAAM;AAClH,YAAI,KAAK;AAAkB,eAAK,SAAS,OAAO,KAAK,YAAY,cAAc,KAAK,MAAM;AAC1F,aAAK,SAAS,YAAY;MACtC;IAEA,EAAK;AA8BD,qCAAY,WAAW;AAEnB,UAAI,eAAe,eAAc;AACjC,UAAI,aAAa;AAEjB,aAAO,WAAW;AACd,YAAI,KAAK,0BAA0B,iDAAiD;AAChF,gBAAM,cAAc,eAAc;AAClC,gBAAM,YAAY,cAAc;AAChC,cAAI,aAAa,GAAK;AAClB,iBAAK,aAAa;AAClB,yBAAa;AACb,2BAAe;UACnC,OAAuB;AACH;UACpB;QACA,OAAmB;AACH,eAAK,aAAa;QAClC;MACA;IAEA,EAAK;AAED,wDAA+B,WAAW;AAEtC,YAAM,mBAAmB,IAAU,QAAO;AAC1C,YAAM,sBAAsB,IAAU,QAAO;AAC7C,UAAI;AAEJ,aAAO,WAAW;AACd,YAAI,CAAC,KAAK,qBAAqB;AAC3B,eAAK,SAAS,QAAQ,mBAAmB;AACzC,cAAI,2BAA2B,UAAa,2BAA2B,KAAK,OAAO,wBAC/E,oBAAoB,MAAM,iBAAiB,KAAK,oBAAoB,MAAM,iBAAiB,GAAG;AAC9F,gBAAI,KAAK,OAAO,sBAAsB;AAClC,mBAAK,OAAO,OAAO,CAAC,oBAAoB,IAAI;AAC5C,mBAAK,OAAO,QAAQ,oBAAoB,IAAI;AAC5C,mBAAK,OAAO,MAAM,oBAAoB,IAAI;AAC1C,mBAAK,OAAO,SAAS,CAAC,oBAAoB,IAAI;YACtE,OAA2B;AACH,mBAAK,OAAO,SAAS,oBAAoB,IAAI,oBAAoB;YACzF;AACoB,iBAAK,OAAO,uBAAsB;AAClC,6BAAiB,KAAK,mBAAmB;AACzC,qCAAyB,KAAK,OAAO;UACzD;QACA;MACA;IAEA,EAAK;AAED,kDAAyB,2BAAW;AAEhC,UAAI;AAEJ,aAAO,WAAW;AACd,cAAM,cAAc,eAAc;AAClC,YAAI,CAAC;AAAgB,2BAAiB;AACtC,cAAM,YAAY,cAAc;AAEhC,aAAK,uBAAuB,WAAW;AACvC,aAAK,kBAAkB,SAAS;AAEhC,yBAAiB;MAC7B;IAEA,EAAK;AAED,kDAAyB,WAAW;AAEhC,UAAI,mBAAmB,IAAU,QAAO;AACxC,UAAI,mBAAmB,IAAU,QAAO;AACxC,UAAI,eAAe,IAAU,QAAO;AAEpC,aAAO,SAAS,aAAa;AACzB,YAAI,KAAK,2BAA2B;AAChC,2BAAiB,KAAK,KAAK,oBAAoB,EAAE,IAAI,KAAK,OAAO,QAAQ,EAAE,UAAS;AACpF,uBAAa,KAAK,KAAK,gBAAgB,EAAE,IAAI,KAAK,OAAO,QAAQ,EAAE,UAAS;AAC5E,gBAAM,gBAAgB,KAAK,KAAK,iBAAiB,IAAI,YAAY,CAAC;AAClE,gBAAM,gBAAgB,iBAAiB,KAAK,KAAK,KAAK,OAAM;AAC5D,gBAAM,IAAK,gBAAgB,iBAAiB,cAAc,KAAK;AAC/D,2BAAiB,KAAK,KAAK,oBAAoB,EAAE,KAAK,KAAK,kBAAkB,CAAC;AAC9E,eAAK,OAAO,OAAO,gBAAgB;AACnC,eAAK,SAAS,OAAO,KAAK,gBAAgB;AAC1C,cAAI,KAAK,GAAK;AACV,iBAAK,4BAA4B;UACrD;QACA;MACA;IAEA,EAAK;AAED,6CAAoB,WAAW;AAE3B,YAAM,mBAAmB,IAAU,QAAO;AAC1C,UAAI,mBAAmB;AAEvB,aAAO,SAAS,WAAW;AACvB,aAAK,oBAAoB,gBAAgB;AACzC,YAAI,KAAK,2BAA2B;AAChC,eAAK,YAAY,yBAAyB,IAAI;AAC9C,gBAAM,4BAA4B,KAAK,IAAI,KAAK,YAAY,sBAAqB,GAAI,CAAG;AACxF,cAAI,wBAAwB,KAAK,IAAI,4BAA4B,6BAA6B,WAAW,CAAG;AAC5G,eAAK,YAAY,sBAAsB,qBAAqB;AAC5D,eAAK,YAAY,kBAAkB,KAAK,kBAAkB,KAAK,QAAQ,gBAAgB;AACvF,6BAAmB;AACnB,eAAK,qBAAoB;QACzC,OAAmB;AACH,cAAI;AACJ,cAAI;AAAkB,wCAA4B;;AAC7C,wCAA4B,KAAK,IAAI,KAAK,YAAY,sBAAqB,GAAI,CAAG;AACvF,cAAI,4BAA4B,GAAG;AAC/B,iBAAK,YAAY,kBAAkB,KAAK,kBAAkB,KAAK,QAAQ,gBAAgB;AACvF,gBAAI,wBAAwB,KAAK,IAAI,4BAA4B,8BAA8B,WAAW,CAAG;AAC7G,iBAAK,YAAY,sBAAsB,qBAAqB;AAC5D,gBAAI,0BAA0B;AAAK,mBAAK,YAAY,yBAAyB,KAAK;UACtG;AACgB,cAAI,4BAA4B;AAAK,iBAAK,qBAAoB;AAC9D,6BAAmB;QACnC;MACA;IAEA,EAAK;AAED,4CAAmB,WAAW;AAE1B,YAAM,UAAU,CAAA;AAChB,YAAM,mBAAmB,IAAU,QAAO;AAE1C,aAAO,WAAW;AACd,YAAI,KAAK,gBAAgB;AACrB,eAAK,qBAAoB;AACzB,eAAK,oBAAoB,gBAAgB;AACzC,kBAAQ,SAAS;AACjB,eAAK,UAAU,+BAA+B,KAAK,QAAQ,KAAK,eAAe,gBAAgB;AAC/F,eAAK,UAAU,mBAAmB,KAAK,WAAW,OAAO;AACzD,cAAI,QAAQ,SAAS,GAAG;AACpB,iBAAK,YAAY,wBAAwB,IAAI;AAC7C,iBAAK,YAAY,4BAA4B,QAAQ,CAAC,EAAE,QAAQ,KAAK,MAAM;UAC/F,OAAuB;AACH,iBAAK,YAAY,wBAAwB,KAAK;UAClE;QACA,OAAmB;AACH,cAAI,KAAK,YAAY,yBAAwB;AAAI,iBAAK,qBAAoB;AAC1E,eAAK,YAAY,wBAAwB,KAAK;QAC9D;MACA;IAEA,EAAK;AAED,2CAAkB,WAAW;AAEzB,YAAM,mBAAmB,IAAU,QAAO;AAE1C,aAAO,WAAW;AACd,YAAI,CAAC,KAAK;AAAU;AACpB,cAAM,aAAa,KAAK,UAAU,cAAa;AAC/C,aAAK,oBAAoB,gBAAgB;AACzC,cAAM,uBAAuB,KAAK,WAAW,KAAK,SAAS,SAAS;AACpE,cAAM,qBAAqB,KAAK,iBAAiB,KAAK,YAAY,WAAW,WAAW;AACxF,cAAM,sBAAsB,aAAa,IAAI,KAAK,mBAAmB,aAAa,MAAM;AACxF,aAAK,UAAU;UAAO;UAAkB,KAAK,OAAO;UAAU;UACxC,KAAK,OAAO;UAAI,KAAK,OAAO;UAAsB;UAClD,KAAK,cAAc;UAAO;UAAY,KAAK;UAAkB;UAC7D,KAAK;UAAc,KAAK;UAAiB,KAAK,UAAU,cAAa;UACrE,KAAK,UAAU,yBAAwB;QAAE;MAC3E;IAEA,EAAK;AAWD,2CAAkB,WAAW;AAEzB,YAAM,YAAY,IAAU,QAAO;AACnC,YAAM,sBAAsB,CAAA;AAC5B,YAAM,kBAAkB,IAAU,QAAQ,GAAG,GAAG,EAAE;AAClD,YAAM,cAAc,IAAU,QAAQ,GAAG,GAAG,EAAE;AAC9C,YAAM,kBAAkB,IAAU,QAAO;AACzC,YAAM,iBAAiB,IAAU,QAAO;AACxC,YAAM,cAAc,CAAA;AAEpB,YAAM,eAAe;QACjB;UACI,kBAAkB;UAClB,iBAAiB,CAAC,OAAO,SAAS,IAAI;QACtD;QACY;UACI,kBAAkB;UAClB,iBAAiB,CAAC,SAAS,OAAO;QAClD;QACY;UACI,kBAAkB;UAClB,iBAAiB,CAAC,GAAG;QACrC;MACA;AAEQ,aAAO,eAAe,QAAQ,OAAO;AACjC,YAAI,KAAK;AAAa;AACtB,YAAI,KAAK,UAAU,cAAa,KAAM;AAAG;AAEzC,YAAI,YAAY;AAChB,YAAI,eAAe;AACnB,YAAI,0BAA0B;AAC9B,YAAI,0BAA0B;AAE9B,oBAAY,IAAI,GAAG,GAAG,EAAE,EAAE,gBAAgB,KAAK,OAAO,UAAU;AAChE,oBAAY,YAAY,IAAI,eAAe;AAC3C,uBAAe,eAAe,KAAK,KAAK,OAAO,QAAQ,EAAE,IAAI,eAAe,EAAE,OAAM;AAEpF,YAAI,CAAC,OAAO;AACR,cAAI,CAAC,KAAK,4BAA4B,CAAC,KAAK,UAAU,eAAe,YAAY,WAAW,GAAG;AAC3F,gBAAI,aAAa;AAAM,wCAA0B;AACjD,gBAAI,gBAAgB;AAAK,wCAA0B;AACnD,gBAAI,CAAC,2BAA2B,CAAC;AAAyB;UAC9E;QACA;AAEY,aAAK,cAAc;AACnB,cAAM,EAAE,kBAAkB,cAAa,IAAK,KAAK,wBAAuB;AACxE,aAAK,mBAAmB;AAExB,kBAAU,KAAK,KAAK,OAAO,WAAW,EAAE,OAAM;AAC9C,cAAM,YAAY,KAAK,qBAAqB,KAAK;AACjD,kBAAU,YAAY,UAAU,gBAAgB;AAChD,kBAAU,SAAS,KAAK,UAAU,WAAW;AAE7C,YAAI,KAAK,uBAAuB,YAAY,UAAU,KAAK,YAAY,SAAS,MAAM,IAAI;AACtF,gBAAM,KAAK,UAAU,sBAAsB,WAAW,KAAK,8BAA8B;QACzG;AAEY,YAAI,KAAK,UAAU,eAAe,eAAe;AAC7C,sBAAY,KAAK,KAAK,gBAAgB;QACtD,OAAmB;AACH,cAAI,YAAY,WAAW,GAAG;AAC1B,qBAAS,eAAe,cAAc;AAClC,kBAAI,YAAY,YAAY,gBAAgB;AACxC,yBAAS,gBAAgB,YAAY,eAAe;AAChD,8BAAY,KAAK,KAAK,MAAM,KAAK,mBAAmB,YAAY,CAAC;gBACjG;AAC4B;cAC5B;YACA;AACoB,wBAAY,KAAK,KAAK,gBAAgB;UAC1D;QACA;AACY,YAAI,YAAY,KAAK,IAAI,YAAY,MAAK,GAAI,KAAK,gBAAgB;AAEnE,4BAAoB,CAAC,IAAI,KAAK,OAAO,SAAS;AAC9C,4BAAoB,CAAC,IAAI,KAAK,OAAO,SAAS;AAC9C,4BAAoB,CAAC,IAAI,KAAK,OAAO,SAAS;AAE9C,cAAM,cAAc;UAChB,iBAAiB,UAAU;UAC3B,kBAAkB;UAClB,oBAAoB,KAAK;UACzB,kBAAkB;UAClB,2BAA2B,KAAK;QAChD;AACY,YAAI,KAAK,UAAU,aAAa;AAC5B,eAAK,UAAU,oBAAoB,KAAK,oBAAoB;QAC5E;AACY,YAAI,CAAC,KAAK,wBAAwB;AAC9B,sBAAY,gBAAgB,KAAK;AACjC,sBAAY,aAAa,KAAK;AAC9B,cAAI,KAAK,oBAAoB;AACzB,wBAAY,uBAAuB,KAAK;UAC5D;QACA;AAEY,aAAK,cAAc,IAAI,QAAQ,CAAC,YAAY;AACxC,eAAK,sBAAsB;QAC3C,CAAa;AAED,aAAK,WAAW,YAAY;UACxB,QAAQ;QACxB,CAAa;AAED,YAAI,YAAY,WAAW,GAAG;AAC1B,0BAAgB,KAAK,KAAK,OAAO,QAAQ;AACzC,0BAAgB,KAAK,WAAW;QAChD;AAEY,aAAK,2BAA2B;MAC5C;IAEA,EAAK;AAKD;;;mDAA0B,WAAW;AAEjC,YAAM,iBAAiB,CAAA;AACvB,UAAI,sBAAsB;AAC1B,YAAM,eAAe,IAAU,QAAO;AACtC,YAAM,eAAe,IAAU,QAAO;AACtC,YAAM,aAAa,IAAU,QAAO;AACpC,YAAM,YAAY,IAAU,QAAO;AACnC,YAAM,gBAAgB,IAAU,QAAO;AACvC,YAAM,iBAAiB,IAAU,QAAO;AACxC,YAAM,mBAAmB,IAAU,QAAO;AAC1C,YAAM,UAAU,IAAU,QAAQ,GAAG,GAAG,EAAE;AAE1C,YAAM,UAAU,IAAU,QAAO;AACjC,YAAM,WAAW,CAAC,SAAS;AACvB,eAAO,QAAQ,KAAK,KAAK,GAAG,EAAE,IAAI,KAAK,GAAG,EAAE,OAAM;MAC9D;AAEQ,aAAO,SAAS,iBAAiB,OAAO;AAEpC,aAAK,oBAAoB,gBAAgB;AACzC,cAAM,oBAAqB,iBAAiB,IAAI,IAAO,KAAK,IAAI,KAAK,OAAO,MAAM,IAAY,UAAU,OAAO;AAC/G,cAAM,YAAY,KAAK,KAAK,iBAAiB,IAAI,IAAM,iBAAiB;AACxE,cAAM,YAAY,KAAK,KAAK,iBAAiB,IAAI,IAAM,iBAAiB;AACxE,cAAM,eAAe,KAAK,IAAI,SAAS;AACvC,cAAM,eAAe,KAAK,IAAI,SAAS;AAEvC,cAAM,YAAY,KAAK,UAAU,aAAY;AAE7C,YAAI,WAAW;AACX,wBAAc,KAAK,KAAK,OAAO,WAAW,EAAE,OAAM;AAClD,wBAAc,SAAS,KAAK,UAAU,WAAW;AAEjD,cAAI,kBAAkB;AACtB,cAAI,mBAAmB;AAEvB,mBAAS,IAAI,GAAG,IAAI,UAAU,SAAS,QAAQ,KAAK;AAChD,kBAAM,UAAU,UAAU,SAAS,CAAC;AACpC,sBAAU,KAAK,aAAa;AAC5B,gBAAI,KAAK,UAAU,aAAa;AAC5B,mBAAK,UAAU,kBAAkB,GAAG,cAAc;AAClD,wBAAU,SAAS,cAAc;YACzD;AACoB,kBAAM,YAAY,QAAQ,iBAAiB;AAC3C,qBAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAChC,oBAAM,OAAO,QAAQ,iBAAiB,CAAC;AACvC,kBAAI,CAAC,KAAK,QAAQ,CAAC,KAAK,KAAK,WAAW,KAAK,KAAK,QAAQ,WAAW;AAAG;AACxE,yBAAW,KAAK,KAAK,MAAM,EAAE,aAAa,SAAS;AAEnD,oBAAM,iBAAiB,WAAW,OAAM;AACxC,yBAAW,UAAS;AAEpB,2BAAa,KAAK,UAAU,EAAE,KAAK,CAAC,EAAE,UAAS;AAC/C,2BAAa,KAAK,UAAU,EAAE,KAAK,CAAC,EAAE,UAAS;AAE/C,oBAAM,mBAAmB,QAAQ,IAAI,YAAY;AACjD,oBAAM,mBAAmB,QAAQ,IAAI,YAAY;AAEjD,oBAAM,KAAK,SAAS,IAAI;AACxB,oBAAM,YAAY,mBAAoB,eAAe;AACrD,oBAAM,YAAY,mBAAoB,eAAe;AACrD,kBAAI,CAAC,oBAAoB,aAAa,cAAc,iBAAiB,KAAK;AACtE;cAC5B;AACwB,kCAAoB,KAAK,KAAK,QAAQ;AACtC,6BAAe,eAAe,IAAI;AAClC,mBAAK,KAAK,iBAAiB;AAC3B;YACxB;UACA;AAEgB,yBAAe,SAAS;AACxB,yBAAe,KAAK,CAAC,GAAG,MAAM;AAC1B,gBAAI,EAAE,KAAK,iBAAiB,EAAE,KAAK;AAAgB,qBAAO;;AACrD,qBAAO;UAChC,CAAiB;AAED,cAAI,oBAAoB,mBAAmB,UAAU;AACrD,mBAAS,IAAI,GAAG,IAAI,iBAAiB,KAAK;AACtC,kBAAM,OAAO,eAAe,CAAC;AAC7B,kBAAM,iBAAiB,KAAK,KAAK,QAAQ;AACzC,kBAAM,kBAAkB,iBAAiB,UAAU;AACnD,gBAAI,WAAW,IAAI;cAAY,KAAK,wBAAwB;cAC7B,oBAAoB;cAAiB;YAAc;AAClF,qBAAS,IAAI,KAAK,KAAK,OAAO;AAC9B,iCAAqB;UACzC;AAEgB,iBAAO;YACH,oBAAoB;YACpB,iBAAiB;UACrC;QACA,OAAmB;AACH,gBAAM,kBAAkB,KAAK,UAAU,cAAa;AACpD,cAAI,CAAC,uBAAuB,oBAAoB,WAAW,iBAAiB;AACxE,kCAAsB,IAAI,YAAY,eAAe;AACrD,qBAAS,IAAI,GAAG,IAAI,iBAAiB,KAAK;AACtC,kCAAoB,CAAC,IAAI;YACjD;UACA;AACgB,eAAK,wBAAwB,IAAI,mBAAmB;AACpD,iBAAO;YACH,oBAAoB;YACpB,iBAAiB;UACrC;QACA;MACA;IAEA,EAAK;AA3zDG,QAAI,CAACA,SAAQ;AAAU,MAAAA,SAAQ,WAAW,CAAC,GAAG,GAAG,CAAC;AAClD,SAAK,WAAW,IAAU,QAAO,EAAG,UAAUA,SAAQ,QAAQ;AAG9D,QAAI,CAACA,SAAQ;AAAuB,MAAAA,SAAQ,wBAAwB,CAAC,GAAG,IAAI,EAAE;AAC9E,SAAK,wBAAwB,IAAU,QAAO,EAAG,UAAUA,SAAQ,qBAAqB;AAGxF,QAAI,CAACA,SAAQ;AAAqB,MAAAA,SAAQ,sBAAsB,CAAC,GAAG,GAAG,CAAC;AACxE,SAAK,sBAAsB,IAAU,QAAO,EAAG,UAAUA,SAAQ,mBAAmB;AAGpF,SAAK,aAAaA,SAAQ,cAAc;AAGxC,QAAIA,SAAQ,mBAAmB,UAAaA,SAAQ,mBAAmB;AAAM,MAAAA,SAAQ,iBAAiB;AACtG,SAAK,iBAAiBA,SAAQ,kBAAkB,CAAC,KAAK;AACtD,SAAK,uBAAuB,KAAK,iBAAiB,KAAK,IAAI;AAG3D,QAAIA,SAAQ,uBAAuB;AAAW,MAAAA,SAAQ,qBAAqB;AAC3E,SAAK,qBAAqBA,SAAQ;AAGlC,SAAK,cAAcA,SAAQ;AAI3B,SAAK,yBAAyBA,SAAQ,0BAA0B;AAChE,SAAK,mBAAmB,KAAK,yBAAyB,IAAI,OAAO;AAGjE,SAAK,gCAAgCA,SAAQ,iCAAiC;AAG9E,SAAK,aAAaA,SAAQ;AAE1B,SAAK,WAAWA,SAAQ;AAExB,SAAK,SAASA,SAAQ;AAItB,SAAK,qBAAqBA,SAAQ,sBAAsB;AAKxD,QAAIA,SAAQ,qBAAqB,UAAaA,SAAQ,qBAAqB,MAAM;AAC7E,MAAAA,SAAQ,mBAAmB;IACvC;AACQ,SAAK,mBAAmBA,SAAQ;AAOhC,QAAIA,SAAQ,2BAA2B,UAAaA,SAAQ,2BAA2B;AAAM,MAAAA,SAAQ,yBAAyB;AAC9H,SAAK,yBAAyBA,SAAQ;AAMtC,SAAK,eAAe,CAAC,CAACA,SAAQ;AAO9B,SAAK,cAAcA,SAAQ,eAAe;AAE1C,SAAK,YAAYA,SAAQ,aAAa,UAAU;AAChD,QAAI,KAAK,cAAc,UAAU,MAAM;AACnC,WAAK,qBAAqB;IACtC;AACQ,SAAK,cAAc;AAInB,SAAK,aAAaA,SAAQ,cAAc,WAAW;AAMnD,SAAK,kBAAkBA,SAAQ,mBAAmB,gBAAgB;AAIlE,SAAK,kBAAkBA,SAAQ,mBAAmB;AAGlD,SAAK,0BAA0BA,SAAQ,2BAA2B;AAGlE,SAAK,WAAWA,SAAQ,YAAY,SAAS;AAI7C,SAAK,2BAA2BA,SAAQ,4BAA4B;AAEpE,SAAK,gBAAe;AAEpB,SAAK,WAAW;AAChB,SAAK,sBAAsB;AAC3B,SAAK,uBAAuB;AAE5B,SAAK,qBAAqB;AAC1B,SAAK,oBAAoB;AAEzB,SAAK,iBAAiB;AACtB,SAAK,mBAAmB;AACxB,SAAK,WAAW;AAEhB,SAAK,cAAc;AAEnB,SAAK,aAAa;AAClB,SAAK,cAAc;AACnB,SAAK,mBAAmB;AACxB,SAAK,0BAA0B;AAC/B,SAAK,0BAA0B;AAC/B,SAAK,iCAAiC;AACtC,SAAK,uBAAuB;AAC5B,SAAK,oBAAoB,CAAA;AAEzB,SAAK,wBAAwB;AAC7B,SAAK,mBAAmB;AAExB,SAAK,YAAY,IAAI,UAAS;AAE9B,SAAK,YAAY;AAEjB,SAAK,0BAA0B;AAE/B,SAAK,aAAa;AAClB,SAAK,eAAe;AACpB,SAAK,0BAA0B;AAE/B,SAAK,uBAAuB,IAAU,QAAO;AAC7C,SAAK,mBAAmB,IAAU,QAAO;AAEzC,SAAK,gBAAgB,IAAU,QAAO;AACtC,SAAK,oBAAoB,IAAU,QAAO;AAC1C,SAAK,gBAAgB;AAErB,SAAK,iBAAiB;AACtB,SAAK,oBAAoB;AACzB,SAAK,oBAAoB;AACzB,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AAEvB,SAAK,cAAc;AACnB,SAAK,sBAAsB;AAC3B,SAAK,6BAA6B,CAAA;AAClC,SAAK,oCAAoC;AACzC,SAAK,2BAA2B;AAEhC,SAAK,iBAAiB,IAAI,eAAe,MAAM,KAAK,eAAe,SAAS,IAAI;AAChF,SAAK,eAAe,KAAI;AACxB,SAAK,qBAAqB,IAAI,mBAAmB,KAAK,eAAe,SAAS,IAAI;AAClF,SAAK,mBAAmB,KAAI;AAC5B,SAAK,YAAY,IAAI,UAAU,KAAK,eAAe,SAAS,IAAI;AAChE,SAAK,UAAU,KAAI;AAEnB,SAAK,sBAAuB,KAAK,cAAc,KAAK,SAAU,OAAO;AACrE,SAAK,wBAAyB,KAAK,cAAc,KAAK,WAAY,OAAO;AAEzE,SAAK,cAAc;AACnB,SAAK,YAAY;AACjB,SAAK,WAAW;AAChB,QAAI,CAAC,KAAK;AAAY,WAAK,KAAI;EACvC;EAEI,kBAAkB;AACd,SAAK,YAAY,IAAI;MAAU,KAAK;MAAc,KAAK;MAA+B,KAAK;MAC5D,KAAK;MAAoB,KAAK;MAAkB,KAAK;MACrD,KAAK;MAAyB,KAAK;MAAU,KAAK;IAAwB;AACzG,SAAK,UAAU,gBAAgB;EACvC;EAEI,OAAO;AAEH,QAAI,KAAK;AAAa;AAEtB,QAAI,CAAC,KAAK,aAAa;AACnB,UAAI,CAAC,KAAK,uBAAuB;AAC7B,aAAK,cAAc,SAAS,cAAc,KAAK;AAC/C,aAAK,YAAY,MAAM,QAAQ;AAC/B,aAAK,YAAY,MAAM,SAAS;AAChC,aAAK,YAAY,MAAM,WAAW;AAClC,iBAAS,KAAK,YAAY,KAAK,WAAW;MAC1D,OAAmB;AACH,aAAK,cAAc,KAAK,SAAS,WAAW,iBAAiB,SAAS;MACtF;IACA;AAEQ,SAAK,YAAW;AAChB,SAAK,cAAa;AAClB,SAAK,WAAU;AACf,SAAK,cAAa;AAClB,SAAK,mBAAkB;AAEvB,SAAK,aAAa,KAAK,cAAc,IAAU,MAAK;AACpD,SAAK,cAAc,IAAI,YAAY,KAAK,UAAU;AAClD,SAAK,YAAY,gBAAe;AAChC,SAAK,YAAY,iBAAgB;AACjC,SAAK,YAAY,kBAAiB;AAElC,SAAK,mBAAmB,aAAa,KAAK,WAAW;AACrD,SAAK,eAAe,aAAa,KAAK,WAAW;AACjD,SAAK,UAAU,aAAa,KAAK,WAAW;AAE5C,SAAK,cAAc;EAC3B;EAEI,cAAc;AACV,QAAI,CAAC,KAAK,qBAAqB;AAC3B,YAAM,mBAAmB,IAAU,QAAO;AAC1C,WAAK,oBAAoB,gBAAgB;AAEzC,WAAK,oBAAoB,IAAU,kBAAkB,kBAAkB,iBAAiB,IAAI,iBAAiB,GAAG,KAAK,GAAI;AACzH,WAAK,qBAAqB,IAAU;QAAmB,iBAAiB,IAAI;QAAI,iBAAiB,IAAI;QAC9C,iBAAiB,IAAI;QAAG,iBAAiB,IAAI;QAAI;QAAK;MAAI;AACjH,WAAK,SAAS,KAAK,0BAA0B,KAAK,qBAAqB,KAAK;AAC5E,WAAK,OAAO,SAAS,KAAK,KAAK,qBAAqB;AACpD,WAAK,OAAO,GAAG,KAAK,KAAK,QAAQ,EAAE,UAAS;AAC5C,WAAK,OAAO,OAAO,KAAK,mBAAmB;IACvD;EACA;EAEI,gBAAgB;AACZ,QAAI,CAAC,KAAK,uBAAuB;AAC7B,YAAM,mBAAmB,IAAU,QAAO;AAC1C,WAAK,oBAAoB,gBAAgB;AAEzC,WAAK,WAAW,IAAU,cAAc;QACpC,WAAW;QACX,WAAW;MAC3B,CAAa;AACD,WAAK,SAAS,cAAc,KAAK,gBAAgB;AACjD,WAAK,SAAS,YAAY;AAC1B,WAAK,SAAS,cAAc,IAAU,MAAO,CAAQ,GAAI,CAAG;AAC5D,WAAK,SAAS,QAAQ,iBAAiB,GAAG,iBAAiB,CAAC;AAE5D,WAAK,iBAAiB,IAAI,eAAe,MAAM;AAC3C,aAAK,oBAAoB,gBAAgB;AACzC,aAAK,SAAS,QAAQ,iBAAiB,GAAG,iBAAiB,CAAC;AAC5D,aAAK,qBAAoB;MACzC,CAAa;AACD,WAAK,eAAe,QAAQ,KAAK,WAAW;AAC5C,WAAK,YAAY,YAAY,KAAK,SAAS,UAAU;IACjE;EAEA;EAEI,aAAa;AACT,QAAI,KAAK,WAAW;AAChB,UAAI,KAAK,cAAc,UAAU,IAAI;AACjC,aAAK,YAAY,YAAY,SAAS,aAAa,KAAK,QAAQ,CAAC;MACjF,WAAuB,KAAK,cAAc,UAAU,IAAI;AACxC,aAAK,YAAY,YAAY,SAAS,aAAa,KAAK,QAAQ,CAAC;MACjF;AACY,WAAK,SAAS,GAAG,iBAAiB,gBAAgB,CAAC,MAAM;AACrD,aAAK,cAAc;MACnC,CAAa;AACD,WAAK,SAAS,GAAG,iBAAiB,cAAc,CAAC,MAAM;AACnD,aAAK,cAAc;MACnC,CAAa;AACD,WAAK,SAAS,GAAG,UAAU;AAC3B,WAAK,OAAO,SAAS,KAAK,KAAK,qBAAqB;AACpD,WAAK,OAAO,GAAG,KAAK,KAAK,QAAQ,EAAE,UAAS;AAC5C,WAAK,OAAO,OAAO,KAAK,mBAAmB;IACvD;EACA;EAEI,gBAAgB;AACZ,QAAI,KAAK,sBAAsB,KAAK,cAAc,UAAU,MAAM;AAC9D,UAAI,CAAC,KAAK,qBAAqB;AAC3B,aAAK,sBAAsB,IAAI,cAAc,KAAK,mBAAmB,KAAK,SAAS,UAAU;AAC7F,aAAK,uBAAuB,IAAI,cAAc,KAAK,oBAAoB,KAAK,SAAS,UAAU;MAC/G,OAAmB;AACH,YAAI,KAAK,OAAO,sBAAsB;AAClC,eAAK,uBAAuB,IAAI,cAAc,KAAK,QAAQ,KAAK,SAAS,UAAU;QACvG,OAAuB;AACH,eAAK,sBAAsB,IAAI,cAAc,KAAK,QAAQ,KAAK,SAAS,UAAU;QACtG;MACA;AACY,eAAS,YAAY,CAAC,KAAK,qBAAqB,KAAK,oBAAoB,GAAG;AACxE,YAAI,UAAU;AACV,mBAAS,kBAAkB,MAAM;AACjC,mBAAS,cAAc;AACvB,mBAAS,gBAAgB,KAAK,KAAK;AACnC,mBAAS,gBAAgB;AACzB,mBAAS,gBAAgB;AACzB,mBAAS,gBAAgB;AACzB,mBAAS,OAAO,KAAK,KAAK,mBAAmB;QACjE;MACA;AACY,WAAK,WAAW,KAAK,OAAO,uBAAuB,KAAK,uBAAuB,KAAK;IAChG;EACA;EAEI,qBAAqB;AACjB,QAAI,KAAK,sBAAsB,KAAK,cAAc,UAAU,MAAM;AAC9D,WAAK,oBAAoB,KAAK,YAAY,KAAK,IAAI;AACnD,WAAK,SAAS,WAAW,iBAAiB,eAAe,KAAK,mBAAmB,KAAK;AACtF,WAAK,oBAAoB,KAAK,YAAY,KAAK,IAAI;AACnD,WAAK,SAAS,WAAW,iBAAiB,eAAe,KAAK,mBAAmB,KAAK;AACtF,WAAK,kBAAkB,KAAK,UAAU,KAAK,IAAI;AAC/C,WAAK,SAAS,WAAW,iBAAiB,aAAa,KAAK,iBAAiB,KAAK;AAClF,WAAK,kBAAkB,KAAK,UAAU,KAAK,IAAI;AAC/C,aAAO,iBAAiB,WAAW,KAAK,iBAAiB,KAAK;IAC1E;EACA;EAEI,sBAAsB;AAClB,QAAI,KAAK,oBAAoB;AACzB,WAAK,SAAS,WAAW,oBAAoB,eAAe,KAAK,iBAAiB;AAClF,WAAK,oBAAoB;AACzB,WAAK,SAAS,WAAW,oBAAoB,eAAe,KAAK,iBAAiB;AAClF,WAAK,oBAAoB;AACzB,WAAK,SAAS,WAAW,oBAAoB,aAAa,KAAK,eAAe;AAC9E,WAAK,kBAAkB;AACvB,aAAO,oBAAoB,WAAW,KAAK,eAAe;AAC1D,WAAK,kBAAkB;IACnC;EACA;EAEI,cAAc,YAAY;AACtB,SAAK,aAAa;EAC1B;EAmEI,YAAY,OAAO;AACf,SAAK,cAAc,IAAI,MAAM,SAAS,MAAM,OAAO;EAC3D;EAEI,cAAc;AACV,SAAK,kBAAkB,KAAK,KAAK,aAAa;AAC9C,SAAK,gBAAgB,eAAc;EAC3C;EAiBI,aAAa,OAAO;AAChB,SAAK,cAAc,IAAI,MAAM,SAAS,MAAM,OAAO;AACnD,SAAK,yBAAwB;EACrC;EA8BI,oBAAoB,eAAe;AAC/B,QAAI,KAAK,aAAa;AAClB,oBAAc,IAAI,KAAK,YAAY;AACnC,oBAAc,IAAI,KAAK,YAAY;IAC/C,OAAe;AACH,WAAK,SAAS,QAAQ,aAAa;IAC/C;EACA;EAEI,oBAAoB,kBAAkB;AAClC,QAAI,qBAAqB,KAAK,OAAO;AAAsB;AAC3D,UAAM,aAAa,KAAK;AACxB,UAAM,WAAW,mBAAmB,KAAK,qBAAqB,KAAK;AACnE,aAAS,SAAS,KAAK,WAAW,QAAQ;AAC1C,aAAS,GAAG,KAAK,WAAW,EAAE;AAC9B,aAAS,SAAS,KAAK,WAAW,QAAQ;AAC1C,aAAS,WAAW,KAAK,WAAW,UAAU;AAC9C,aAAS,OAAO,KAAK,WAAW,MAAM;AACtC,SAAK,SAAS;AAEd,QAAI,KAAK,UAAU;AAEf,YAAM,gBAAgB,CAAC,aAAa;AAChC,iBAAS,UAAS;AAClB,iBAAS,MAAK;MAC9B;AAEY,YAAM,eAAe,KAAK;AAC1B,YAAM,aAAa,mBAAmB,KAAK,uBAAuB,KAAK;AAEvE,oBAAc,UAAU;AACxB,oBAAc,YAAY;AAE1B,iBAAW,OAAO,KAAK,aAAa,MAAM;AAC1C,UAAI,kBAAkB;AAClB,gBAAO,0BAA0B,UAAU,YAAY,YAAY;MACnF,OAAmB;AACH,gBAAO,0BAA0B,UAAU,YAAY,UAAU;MACjF;AACY,WAAK,WAAW;AAChB,WAAK,OAAO,OAAO,KAAK,SAAS,MAAM;IACnD;EACA;EAqDI,qBAAqB,kBAAkB;AAEnC,QAAI,KAAK,UAAU,KAAK,aAAa;AACjC,YAAM,WAAW,KAAK,SAAS,GAAG,UAAS;AAC3C,YAAM,iBAAiB,SAAS,iBAAiB,SAAS,CAAC;AAC3D,YAAM,eAAe,KAAK,OAAO,iBAAiB,SAAS,CAAC;AAC5D,uBAAiB,KAAM,eAAe;IAClD;EACA;EAEI,uBAAuB;AACnB,WAAO,OAAO,KAAK,KAAK,0BAA0B,EAAE,SAAS,KAAK,KAAK,sCAAsC,QAC1F,KAAK,6BAA6B;EAC7D;EAEI,wBAAwB;AACpB,WAAO,KAAK,aAAa,KAAK;EACtC;EAEI,6BAA6B,SAAS;AAClC,SAAK,2BAA2B,QAAQ,EAAE,IAAI;EACtD;EAEI,gCAAgC,SAAS;AACrC,WAAO,KAAK,2BAA2B,QAAQ,EAAE;EACzD;EAEI,qCAAqC,SAAS;AAC1C,SAAK,oCAAoC;EACjD;EAEI,yCAAyC;AACrC,SAAK,oCAAoC;EACjD;;;;;;;;;;;;;;;;;;;;;;EAuBI,cAAc,MAAMA,WAAU,CAAA,GAAI;AAE9B,QAAI,KAAK,qBAAoB,GAAI;AAC7B,YAAM,IAAI,MAAM,6EAA6E;IACzG;AAEQ,QAAI,KAAK,sBAAqB,GAAI;AAC9B,YAAM,IAAI,MAAM,mDAAmD;IAC/E;AAEQ,UAAM,SAAUA,SAAQ,WAAW,UAAaA,SAAQ,WAAW,OAAQA,SAAQ,SAAS,oBAAoB,IAAI;AACpH,UAAM,sBAAsB,QAAO,aAAa,MAAM,KAAKA,SAAQ;AACnE,UAAM,gBAAiBA,SAAQ,kBAAkB,UAAaA,SAAQ,kBAAkB,OAAQA,SAAQ,gBAAgB;AAExH,QAAI,kBAAkB;AACtB,QAAI,eAAe;AACf,WAAK,eAAe,eAAc;AAClC,wBAAkB,KAAK,eAAe,QAAQ,gBAAgB;IAC1E;AACQ,UAAM,gBAAgB,MAAM;AACxB,WAAK,mBAAmB,KAAI;AAC5B,WAAK,eAAe,eAAc;IAC9C;AAEQ,UAAM,qBAAqB,CAAC,iBAAiB,sBAAsB,iBAAiB;AAChF,UAAI,eAAe;AACf,YAAI,iBAAiB,aAAa,aAAa;AAC3C,cAAI,mBAAmB,KAAK;AACxB,iBAAK,eAAe,kBAAkB,iBAAiB,oBAAoB;UACnG,OAA2B;AACH,gBAAI,qBAAqB;AACrB,mBAAK,eAAe,kBAAkB,iBAAiB,uBAAuB;YAC1G,OAA+B;AACH,oBAAM,SAAS,uBAAuB,KAAK,oBAAoB,KAAK;AACpE,mBAAK,eAAe,kBAAkB,iBAAiB,cAAc,MAAM,EAAE;YACzG;UACA;QACA,WAA2B,iBAAiB,aAAa,YAAY;AACjD,eAAK,eAAe,kBAAkB,iBAAiB,sBAAsB;QACjG,OAAuB;AACH,eAAK,eAAe,kBAAkB,iBAAiB,QAAQ;QACnF;MACA;IACA;AAEQ,QAAI,eAAe;AACnB,QAAI,uBAAuB;AAC3B,UAAM,4BAA4B,CAAC,YAAY,eAAe;AAC1D,UAAI,eAAe;AACf,YAAI,cAAc,uBAAuB,cAAc,CAAC,qBAAqB;AACzE,eAAK,kBAAkB,KAAK,MAAM;AAC9B,iBAAK,eAAe,WAAW,eAAe;AAC9C,gBAAI,CAAC,cAAc,CAAC;AAAc,mBAAK,mBAAmB,KAAI;UACtF,CAAqB;QACrB;AACgB,YAAI,qBAAqB;AACrB,cAAI,YAAY;AACZ,2BAAe;AACf,iBAAK,mBAAmB,KAAI;UACpD,OAA2B;AACH,iBAAK,mBAAmB,YAAY,oBAAoB;UAChF;QACA;MACA;IACA;AAEQ,UAAM,aAAa,CAAC,iBAAiB,sBAAsB,iBAAiB;AACxE,6BAAuB;AACvB,yBAAmB,iBAAiB,sBAAsB,YAAY;AACtE,UAAIA,SAAQ;AAAY,QAAAA,SAAQ,WAAW,iBAAiB,sBAAsB,YAAY;IAC1G;AAEQ,UAAM,eAAe,CAAC,aAAa,YAAY,eAAe;AAC1D,UAAI,CAAC,uBAAuBA,SAAQ;AAAY,QAAAA,SAAQ,WAAW,GAAG,MAAM,aAAa,UAAU;AACnG,YAAM,wBAAwB;QAC1B,YAAYA,SAAQ,YAAYA,SAAQ;QACxC,YAAYA,SAAQ;QACpB,SAASA,SAAQ;QACjB,8BAA8BA,SAAQ;MACtD;AACY,aAAO,KAAK;QAAgB,CAAC,WAAW;QAAG,CAAC,qBAAqB;QACpC;QAAY,cAAc;QAAe;MAAa,EAAE,KAAK,MAAM;AAC5F,YAAI,CAAC,uBAAuBA,SAAQ;AAAY,UAAAA,SAAQ,WAAW,KAAK,QAAQ,aAAa,UAAU;AACvG,kCAA0B,YAAY,UAAU;MAChE,CAAa;IACb;AAEQ,UAAM,WAAW,sBAAsB,KAAK,0CAA0C,KAAK,IAAI,IACxD,KAAK,6CAA6C,KAAK,IAAI;AAClG,WAAO,SAAS,MAAM,QAAQA,SAAQ,4BAA4B,aAAa,KAAK,IAAI,GAAG,YAAY,cAAc,KAAK,IAAI,CAAC;EACvI;;;;;;;;;;;;;EAcI,6CAA6C,MAAM,QAAQ,4BAA4B,WAAW,YAAY,aAAa;AACvH,UAAM,kBAAkB,KAAK,gCAAgC,MAAM,4BAA4B,YAAY,OAAO,QAAW,MAAM,EAClI,KAAK,CAAC,gBAAgB;AACnB,WAAK,gCAAgC,eAAe;AACpD,aAAO,UAAU,aAAa,MAAM,IAAI,EAAE,KAAK,MAAM;AACjD,aAAK,uCAAsC;MAC3D,CAAa;IACb,CAAS,EACA,MAAM,CAAC,MAAM;AACV,UAAI;AAAa,oBAAW;AAC5B,WAAK,uCAAsC;AAC3C,WAAK,gCAAgC,eAAe;AACpD,UAAI,EAAE,aAAa,sBAAsB;AACrC,cAAO,IAAI,MAAM,gDAAgD,IAAI,EAAE;MACvF;IACA,CAAS;AAED,SAAK,6BAA6B,eAAe;AACjD,SAAK,qCAAqC,eAAe;AAEzD,WAAO;EACf;;;;;;;;;;;;;EAcI,0CAA0C,MAAM,QAAQ,4BAA4B,WAC1C,oBAAoB,qBAAqB;AAC/E,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI,2BAA2B;AAC/B,QAAI,0BAA0B;AAC9B,UAAM,8BAA8B,CAAA;AAEpC,UAAM,gCAAgC,MAAM;AACxC,UAAI,4BAA4B,SAAS,KAAK,CAAC,2BAA2B,CAAC,KAAK,sBAAqB,GAAI;AACrG,kCAA0B;AAC1B,cAAM,cAAc,4BAA4B,MAAK;AACrD,kBAAU,YAAY,aAAa,YAAY,YAAY,YAAY,UAAU,EAChF,KAAK,MAAM;AACR,oCAA0B;AAC1B,cAAI,YAAY,YAAY;AACxB,2DAA+C;AAC/C,yDAA4C;UACpE,WAA+B,YAAY,YAAY;AAC/B,+CAAkC;AAClC,iBAAK,uCAAsC;UACnE;AACoB,cAAI,4BAA4B,SAAS;AAAG,2BAAe,MAAM,8BAA6B,CAAE;QACpH,CAAiB;MACjB;IACA;AAEQ,UAAM,4BAA4B,CAAC,aAAa,eAAe;AAC3D,UAAI,CAAC,KAAK,sBAAqB,GAAI;AAC/B,YAAI,cAAc,4BAA4B,WAAW,KACrD,YAAY,cAAa,IAAK,4BAA4B,CAAC,EAAE,YAAY,cAAa,GAAI;AAC1F,sCAA4B,KAAK;YAC7B;YACA,YAAY,6BAA6B;YACzC;UACxB,CAAqB;AACD;AACA,wCAA6B;QACjD;MACA;IACA;AAEQ,QAAI,4BAA4B,KAAK;MAAgC;MAAM;MACN;MAAoB;MAAM;MAA2B;IAAM;AAEhI,UAAM,mCAAmC,IAAI,iBAAiB,CAAC,UAAU,aAAa;AAClF,qDAA+C;AAC/C,qDAA+C;IAC3D,GAAW,0BAA0B,YAAY;AAEzC,UAAM,oCAAoC,IAAI,iBAAiB,CAAC,UAAU,aAAa;AACnF,2CAAqC;AACrC,2CAAqC;IACjD,CAAS;AAED,SAAK,6BAA6B,yBAAyB;AAC3D,SAAK,qCAAqC,iCAAiC;AAE3E,8BAA0B,KAAK,MAAM;AACjC,WAAK,gCAAgC,yBAAyB;IAC1E,CAAS,EACA,MAAM,CAAC,MAAM;AACV,WAAK,uCAAsC;AAC3C,WAAK,gCAAgC,yBAAyB;AAC9D,UAAI,EAAE,aAAa,sBAAsB;AACrC,2CAAmC,CAAC;AACpC,YAAI;AAA8C,uDAA6C,CAAC;AAChG,YAAI;AAAqB,8BAAoB,CAAC;MAC9D;IACA,CAAS;AAED,WAAO;EACf;;;;;;;;;;;;;;;;;;;;EAqBI,eAAe,cAAc,gBAAgB,MAAM,aAAa,QAAW;AAEvE,QAAI,KAAK,qBAAoB,GAAI;AAC7B,YAAM,IAAI,MAAM,6EAA6E;IACzG;AAEQ,QAAI,KAAK,sBAAqB,GAAI;AAC9B,YAAM,IAAI,MAAM,mDAAmD;IAC/E;AAEQ,UAAM,YAAY,aAAa;AAC/B,UAAM,kBAAkB,CAAA;AACxB,QAAI,eAAe;AACf,WAAK,eAAe,eAAc;AAClC,WAAK,eAAe,KAAI;IACpC;AACQ,UAAM,iBAAiB,CAAC,WAAW,SAAS,iBAAiB;AACzD,sBAAgB,SAAS,IAAI;AAC7B,UAAI,eAAe;AACnB,eAAS,IAAI,GAAG,IAAI,WAAW;AAAK,wBAAgB,gBAAgB,CAAC,KAAK;AAC1E,qBAAe,eAAe;AAC9B,qBAAe,GAAG,aAAa,QAAQ,CAAC,CAAC;AACzC,UAAI,eAAe;AACf,aAAK,eAAe,WAAW,gBAAgB,MAAM,uBAAuB,gBAAgB,YAAY,EAAE;MAC1H;AACY,UAAI;AAAY,mBAAW,cAAc,cAAc,aAAa,WAAW;IAC3F;AAEQ,UAAM,mBAAmB,CAAA;AACzB,UAAM,qBAAqB,CAAA;AAC3B,UAAM,gBAAgB,CAAA;AACtB,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC1C,YAAMA,WAAU,aAAa,CAAC;AAC9B,YAAM,SAAUA,SAAQ,WAAW,UAAaA,SAAQ,WAAW,OAAQA,SAAQ,SAAS,oBAAoBA,SAAQ,IAAI;AAC5H,YAAMG,mBAAkB,KAAK;QAAgCH,SAAQ;QAAMA,SAAQ;QACtB,eAAe,KAAK,MAAM,CAAC;QAAG;QAAO;QAAW;MAAM;AACnH,oBAAc,KAAKG,iBAAgB,YAAY;AAC/C,uBAAiB,KAAKA,gBAAe;AACrC,yBAAmB,KAAKA,iBAAgB,OAAO;AAC/C,WAAK,6BAA6BA,gBAAe;IAC7D;AAEQ,UAAM,kBAAkB,IAAI,iBAAiB,CAAC,SAAS,WAAW;AAC9D,cAAQ,IAAI,kBAAkB,EAC7B,KAAK,CAAC,iBAAiB;AACpB,YAAI;AAAe,eAAK,eAAe,KAAI;AAC3C,YAAI;AAAY,kBAAQ,WAAW,GAAG,MAAM,aAAa,UAAU;AACnE,aAAK,gBAAgB,cAAc,cAAc,MAAM,eAAe,aAAa,EAAE,KAAK,MAAM;AAC5F,cAAI;AAAY,uBAAW,KAAK,QAAQ,aAAa,UAAU;AAC/D,eAAK,uCAAsC;AAC3C,kBAAO;QAC3B,CAAiB;MACjB,CAAa,EACA,MAAM,CAAC,MAAM;AACV,YAAI;AAAe,eAAK,eAAe,KAAI;AAC3C,aAAK,uCAAsC;AAC3C,YAAI,EAAE,aAAa,sBAAsB;AACrC,iBAAO,IAAI,MAAM,oEAAoE,CAAC;QAC1G,OAAuB;AACH,kBAAO;QAC3B;MACA,CAAa,EACA,QAAQ,MAAM;AACX,iBAASA,oBAAmB,kBAAkB;AAC1C,eAAK,gCAAgCA,gBAAe;QACxE;MACA,CAAa;IACb,GAAW,MAAM;AACL,eAAS,gBAAgB;AAAe,qBAAY;IAChE,CAAS;AACD,SAAK,qCAAqC,eAAe;AACzD,WAAO;EACf;;;;;;;;;;;;;EAcI,gCAAgC,MAAM,6BAA6B,GAAG,aAAa,QACnD,sBAAsB,OAAO,iBAAiB,QAAW,QAAQ;AAC7F,QAAI,WAAW,YAAY,OAAO;AAC9B,aAAO,YAAY,YAAY,MAAM,YAAY,qBAAqB,gBAAgB,4BAA4B,GAAG,KAAK;IACtI,WAAmB,WAAW,YAAY,QAAQ;AACtC,aAAO,aAAa,YAAY,MAAM,YAAY,qBAAqB,cAAc;IACjG,WAAmB,WAAW,YAAY,KAAK;AACnC,aAAO,UAAU;QAAY;QAAM;QAAY;QAAqB;QACvC;QAA4B;QAAG,KAAK;MAAwB;IACrG;AACQ,WAAO,iBAAiB,OAAO,IAAI,MAAM,yEAAyE,IAAI,EAAE,CAAC;EACjI;EAEI,OAAO,aAAa,QAAQ;AACxB,WAAO,WAAW,YAAY,SAAS,WAAW,YAAY,UAAU,WAAW,YAAY;EACvG;;;;;;;;;;;;;;;;;;;;EAsFI,sBAAsB,cAAc,oBAAoB,aAAa,MAAM,iCAAiC,OAAO;AAC/G,QAAI,KAAK,sBAAqB;AAAI;AAClC,UAAM,kBAAkB,KAAK,UAAU,gBAAgB,CAAA;AACvD,UAAM,wBAAwB,KAAK,UAAU,sBAAsB,CAAA;AACnE,oBAAgB,KAAK,GAAG,YAAY;AACpC,0BAAsB,KAAK,GAAG,kBAAkB;AAChD,QAAI,KAAK;AAAU,WAAK,UAAU,YAAY,KAAK,QAAQ;AAC3D,QAAI;AACJ,UAAM,2BAA2B,CAAC,aAAa;AAC3C,UAAI,KAAK,sBAAqB;AAAI;AAClC,YAAM,aAAa,KAAK,UAAU,cAAa;AAC/C,UAAI,kCAAkC,cAAc,oDAAoD;AACpG,YAAI,CAAC,YAAY,CAAC,uBAAuB;AACrC,eAAK,eAAe,aAAa,MAAM,IAAI;AAC3C,kCAAwB,KAAK,eAAe,QAAQ,sBAAsB;QAC9F;MACA;IACA;AACQ,UAAM,mBAAmB,CAAC,aAAa;AACnC,UAAI,KAAK,sBAAqB;AAAI;AAClC,UAAI,YAAY,uBAAuB;AACnC,aAAK,eAAe,WAAW,qBAAqB;MACpE;IACA;AACQ,WAAO,KAAK,UAAU,MAAM,iBAAiB,uBAAuB,MAAM,YAAY,0BAA0B,gBAAgB;EACxI;;;;;;EAOI,gBAAgB,WAAW;AACvB,QAAI,KAAK,sBAAqB;AAAI;AAClC,WAAO,IAAI,QAAQ,CAAC,YAAY;AAC5B,YAAM,qBAAqB,KAAK,mBAAmB,aAAa;AAChE,YAAM,aAAa,UAAU,cAAa;AAC1C,YAAM,gBAAgB,UAAU,iBAAgB;AAChD,WAAK,aAAa;QAAiB;QAAe,KAAK;QACpB,KAAK;QAAkB,KAAK,UAAU;MAAW;AACpF,UAAI,YAAY;AAChB,WAAK,WAAW,YAAY,CAAC,MAAM;AAC/B,YAAI,EAAE,KAAK,UAAU;AACjB,eAAK,cAAc;AACnB,cAAI,KAAK,wBAAwB;AAC7B,iBAAK,UAAU,oBAAoB,KAAK,yBAAyB,EAAE,KAAK,gBAAgB;UAChH,OAA2B;AACH,kBAAM,gBAAgB,IAAI,YAAY,EAAE,KAAK,cAAc,QAAQ,GAAG,EAAE,KAAK,gBAAgB;AAC7F,iBAAK,UAAU,oBAAoB,eAAe,EAAE,KAAK,gBAAgB;UACjG;AACoB,eAAK,eAAe,EAAE,KAAK;AAC3B,eAAK,oBAAmB;AACxB,eAAK,sBAAsB;AAC3B,eAAK,qBAAoB;AACzB,cAAI,cAAc,GAAG;AACjB,iBAAK,kBAAkB,QAAQ,CAAC,SAAS;AACrC,mBAAI;YAChC,CAAyB;AACD,iBAAK,kBAAkB,SAAS;UACxD;AACoB;QACpB,WAA2B,EAAE,KAAK,cAAc;AAC5B,eAAK,cAAc;QACvC,WAA2B,EAAE,KAAK,yBAAyB;AACvC,cAAI,KAAK,YAAY,SAAS;AAAM,oBAAQ,IAAI,yCAAyC;AACzF,cAAI,KAAK,wBAAwB;AAC7B,iBAAK,0BAA0B,IAAI;cAAY,EAAE,KAAK;cACP,EAAE,KAAK;cAAqB;YAAa;AACxF,iBAAK,0BAA0B,IAAI;cAAY,EAAE,KAAK;cACP,EAAE,KAAK;cAAqB;YAAa;AACxF,iBAAK,iCAAiC,IAAI;cAAmB,EAAE,KAAK;cACP,EAAE,KAAK;cACP;YAAa;AACzE,iBAAK,uBAAuB,IAAI;cAAa,EAAE,KAAK;cACP,EAAE,KAAK;cAAkB,UAAU,YAAY;YAAE;UACvH,OAA2B;AACH,iBAAK,0BAA0B,IAAI,YAAY,aAAa;AAC5D,iBAAK,iCAAiC,IAAI,mBAAmB,aAAa;AAC1E,iBAAK,uBAAuB,IAAI,aAAa,UAAU,YAAY,EAAE;UAC7F;AACoB,mBAAS,IAAI,GAAG,IAAI,YAAY;AAAK,iBAAK,wBAAwB,CAAC,IAAI;AACvE,eAAK,WAAW,gBAAgB;AAEhC,cAAI,KAAK,YAAY,SAAS,MAAM;AAChC,oBAAQ,IAAI,2BAA2B;AACvC,kBAAM,oBAAoB,KAAK,UAAU,qBAAoB;AAC7D,kBAAM,yBAAyB,kBAAkB,YAAY;AAC7D,kBAAM,2BAA2B,kBAAkB,aAAa;AAChE,oBAAQ,IAAI,+BAA+B,uBAAuB,IAAI,QAAQ,uBAAuB,CAAC;AACtG,oBAAQ,IAAI,kCAAkC,yBAAyB,IAAI,QAAQ,yBAAyB,CAAC;UACrI;AAEoB,kBAAO;QAC3B;MACA;IACA,CAAS;EACT;EAEI,oBAAoB;AAChB,QAAI,KAAK;AAAY,WAAK,WAAW,UAAS;AAC9C,SAAK,aAAa;AAClB,SAAK,cAAc;AACnB,QAAI,KAAK,qBAAqB;AAC1B,WAAK,oBAAmB;AACxB,WAAK,sBAAsB;IACvC;AACQ,SAAK,cAAc;EAC3B;EAEI,iBAAiB,OAAO,gBAAgB,MAAM;AAC1C,QAAI,KAAK,qBAAoB,GAAI;AAC7B,YAAM,IAAI,MAAM,gFAAgF;IAC5G;AAEQ,QAAI,KAAK,sBAAqB,GAAI;AAC9B,YAAM,IAAI,MAAM,sDAAsD;IAClF;AAEQ,QAAI;AAEJ,SAAK,2BAA2B,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC7D,UAAI;AAEJ,UAAI,eAAe;AACf,aAAK,eAAe,eAAc;AAClC,aAAK,eAAe,KAAI;AACxB,yBAAiB,KAAK,eAAe,QAAQ,yBAAyB;MACtF;AAEY,YAAM,wBAAwB,MAAM;AAChC,YAAI,eAAe;AACf,eAAK,eAAe,KAAI;AACxB,eAAK,eAAe,WAAW,cAAc;QACjE;MACA;AAEY,YAAM,SAAS,CAAC,UAAU;AACtB,8BAAqB;AACrB,aAAK,2BAA2B;AAChC,YAAI,CAAC;AAAO,kBAAO;;AACd,iBAAO,KAAK;MACjC;AAEY,YAAM,oBAAoB,MAAM;AAC5B,YAAI,KAAK,sBAAqB,GAAI;AAC9B,iBAAM;AACN,iBAAO;QAC3B;AACgB,eAAO;MACvB;AAEY,oBAAc,KAAK,eAAe,QAAQ,QAAO;AACjD,kBAAY,KAAK,MAAM;AACnB,YAAI,kBAAiB;AAAI;AACzB,cAAM,oBAAoB,CAAA;AAC1B,cAAM,oBAAoB,CAAA;AAC1B,cAAM,gCAAgC,CAAA;AACtC,cAAM,oCAAoC,KAAK,UAAU;AACzD,iBAAS,IAAI,GAAG,IAAI,KAAK,UAAU,OAAO,QAAQ,KAAK;AACnD,cAAI,MAAM,OAAO;AACb,kBAAM,QAAQ,KAAK,UAAU,OAAO,CAAC;AACrC,8BAAkB,KAAK,MAAM,WAAW;AACxC,8BAAkB,KAAK,KAAK,UAAU,aAAa,CAAC,CAAC;AACrD,0CAA8B,KAAK;cAC/B,YAAY,MAAM,SAAS,MAAK;cAChC,cAAc,MAAM,WAAW,MAAK;cACpC,SAAS,MAAM,MAAM,MAAK;YACtD,CAAyB;UACzB;QACA;AACgB,aAAK,kBAAiB;AACtB,aAAK,UAAU,QAAO;AACtB,aAAK,gBAAe;AACpB,aAAK,gBAAgB,mBAAmB,mBAAmB,MAAM,OAAO,IAAI,EAC3E,KAAK,MAAM;AACR,cAAI,kBAAiB;AAAI;AACzB,gCAAqB;AACrB,eAAK,UAAU,+BAA+B;AAC9C,eAAK,UAAU,OAAO,QAAQ,CAAC,OAAOC,WAAU;AAC5C,kBAAM,SAAS,KAAK,8BAA8BA,MAAK,EAAE,QAAQ;AACjE,kBAAM,WAAW,KAAK,8BAA8BA,MAAK,EAAE,UAAU;AACrE,kBAAM,MAAM,KAAK,8BAA8BA,MAAK,EAAE,KAAK;UACnF,CAAqB;AACD,eAAK,UAAU,iBAAgB;AAC/B,eAAK,mBAAmB;AACxB,eAAK,gBAAgB,IAAI,EACxB,KAAK,MAAM;AACR,gBAAI,kBAAiB,GAAI;AACrB,mBAAK,mBAAmB;AACxB;YAC5B;AACwB,0BAAc,KAAK,eAAe,QAAQ,QAAO;AACjD,wBAAY,KAAK,MAAM;AACnB,mBAAK,mBAAmB;AACxB,qBAAM;YAClC,CAAyB;UACzB,CAAqB;QACrB,CAAiB,EACA,MAAM,CAAC,MAAM;AACV,iBAAO,CAAC;QAC5B,CAAiB;MACjB,CAAa;IACb,CAAS;AAED,WAAO,KAAK;EACpB;;;;EAKI,QAAQ;AACJ,QAAI,KAAK,gBAAgB;AACrB,UAAI,KAAK,WAAW;AAChB,aAAK,SAAS,iBAAiB,KAAK,oBAAoB;MACxE,OAAmB;AACH,aAAK,iBAAiB,sBAAsB,KAAK,oBAAoB;MACrF;AACY,WAAK,wBAAwB;IACzC,OAAe;AACH,YAAM,IAAI,MAAM,uDAAuD;IACnF;EACA;;;;EAKI,OAAO;AACH,QAAI,KAAK,kBAAkB,KAAK,uBAAuB;AACnD,UAAI,CAAC,KAAK,WAAW;AACjB,6BAAqB,KAAK,cAAc;MACxD;AACY,WAAK,wBAAwB;IACzC;EACA;;;;EAKI,MAAM,UAAU;AACZ,SAAK,YAAY;AACjB,QAAI,eAAe,CAAA;AACnB,QAAI,kBAAkB,CAAA;AACtB,aAAS,cAAc,KAAK,4BAA4B;AACpD,UAAI,KAAK,2BAA2B,eAAe,UAAU,GAAG;AAC5D,cAAM,yBAAyB,KAAK,2BAA2B,UAAU;AACzE,wBAAgB,KAAK,sBAAsB;AAC3C,qBAAa,KAAK,uBAAuB,OAAO;MAChE;IACA;AACQ,QAAI,KAAK,aAAa;AAClB,mBAAa,KAAK,KAAK,WAAW;IAC9C;AACQ,UAAM,iBAAiB,QAAQ,IAAI,YAAY,EAAE,QAAQ,MAAM;AAC3D,WAAK,KAAI;AACT,UAAI,KAAK,UAAU;AACf,aAAK,SAAS,QAAO;AACrB,aAAK,WAAW;MAChC;AACY,UAAI,KAAK,WAAW;AAChB,aAAK,UAAU,QAAO;AACtB,aAAK,YAAY;MACjC;AACY,UAAI,KAAK,aAAa;AAClB,aAAK,YAAY,QAAO;AACxB,aAAK,cAAc;MACnC;AACY,UAAI,KAAK,gBAAgB;AACrB,aAAK,eAAe,UAAU,KAAK,WAAW;AAC9C,aAAK,iBAAiB;MACtC;AACY,WAAK,kBAAiB;AACtB,WAAK,oBAAmB;AAExB,WAAK,eAAe,eAAc;AAClC,WAAK,eAAe,aAAa,IAAI;AACrC,WAAK,mBAAmB,KAAI;AAC5B,WAAK,mBAAmB,aAAa,IAAI;AACzC,WAAK,UAAU,aAAa,IAAI;AAEhC,WAAK,SAAS;AACd,WAAK,aAAa;AAClB,WAAK,mBAAmB;AACxB,WAAK,cAAc;AACnB,UAAI,KAAK,UAAU;AACf,YAAI,CAAC,KAAK,uBAAuB;AAC7B,eAAK,YAAY,YAAY,KAAK,SAAS,UAAU;AACrD,eAAK,SAAS,QAAO;QACzC;AACgB,aAAK,WAAW;MAChC;AAEY,UAAI,CAAC,KAAK,uBAAuB;AAC7B,iBAAS,KAAK,YAAY,KAAK,WAAW;MAC1D;AAEY,WAAK,0BAA0B;AAC/B,WAAK,0BAA0B;AAC/B,WAAK,iCAAiC;AACtC,WAAK,uBAAuB;AAC5B,WAAK,WAAW;AAChB,WAAK,YAAY;IAC7B,CAAS;AACD,oBAAgB,QAAQ,CAAC,YAAY;AACjC,cAAQ,MAAK;IACzB,CAAS;AACD,WAAO;EACf;EAEI,mBAAmB;AACf,QAAI,KAAK,kBAAkB,CAAC,KAAK,WAAW;AACxC,WAAK,iBAAiB,sBAAsB,KAAK,oBAAoB;IACjF;AACQ,SAAK,OAAM;AACX,QAAI,KAAK,aAAY,GAAI;AACrB,WAAK,OAAM;AACX,WAAK;IACjB,OAAe;AACH,WAAK,0BAA0B;IAC3C;AACQ,SAAK,kBAAkB;EAC/B;EAEI,uBAAuB;AACnB,SAAK,kBAAkB;EAC/B;EAgEI,OAAO,UAAU,QAAQ;AACrB,QAAI,KAAK;AAAY,WAAK,oBAAoB,UAAU,MAAM;AAC9D,QAAI,CAAC,KAAK,eAAe,CAAC,KAAK;AAAkB;AACjD,QAAI,KAAK,UAAU;AACf,WAAK,SAAS,OAAM;AACpB,UAAI,KAAK,OAAO,wBAAwB,CAAC,KAAK,qBAAqB;AAC/D,gBAAO,0BAA0B,KAAK,QAAQ,KAAK,QAAQ,KAAK,QAAQ;MACxF;IACA;AACQ,SAAK,UAAU,gCAAgC,KAAK,eAAe;AACnE,SAAK,gBAAe;AACpB,SAAK,6BAA4B;AACjC,SAAK,gBAAe;AACpB,SAAK,iBAAgB;AACrB,SAAK,UAAS;AACd,SAAK,uBAAsB;AAC3B,SAAK,gBAAe;AACpB,SAAK,mBAAkB;EAC/B;EAEI,oBAAoB,UAAU,QAAQ;AAClC,SAAK,WAAW;AAChB,QAAI,KAAK;AAAW,WAAK,UAAU,YAAY,KAAK,QAAQ;AAC5D,SAAK,SAAS;AACd,QAAI,KAAK;AAAU,WAAK,SAAS,SAAS;AAC1C,SAAK,KAAI;EACjB;EA4KI,qBAAqB;AACjB,QAAI,KAAK,kBAAkB;AACvB,WAAK,YAAY,0BAA0B,IAAI;AAC/C,WAAK,YAAY,8BAA8B,KAAK,SAAS,QAAQ,KAAK,OAAO,EAAE;IAC/F,OAAe;AACH,WAAK,YAAY,0BAA0B,KAAK;IAC5D;EACA;EAuOI,eAAe;AACX,WAAO,KAAK;EACpB;;;;;;EAOI,cAAc,YAAY;AACtB,WAAO,KAAK,UAAU,SAAS,UAAU;EACjD;EAEI,WAAW;AACP,WAAO,UAAU,UAAU,SAAS,MAAM;EAClD;AACA;AAx1CI,cA3fS,SA2fF,6BAA4B,WAAW;AAE1C,QAAM,aAAa,IAAU,QAAO;AAEpC,SAAO,SAAS,gBAAgB,cAAc,UAAU;AACpD,UAAM,mBAAmB,KAAK,aAAa,OAAO;AAClD,eAAW,KAAK,SAAS,MAAM,EAAE,IAAI,eAAe,QAAQ,EAAE,UAAS,EAAG,eAAe,gBAAgB,EAAE,OAAM;AACjH,mBAAe,SAAS,KAAK,SAAS,MAAM,EAAE,IAAI,UAAU;EACxE;AAEA,EAAK;AAGD,cAxgBS,SAwgBF,6BAA4B,WAAW;AAE1C,QAAM,aAAa,IAAU,QAAO;AAEpC,SAAO,SAAS,YAAY,gBAAgB,UAAU;AAClD,UAAM,mBAAmB,WAAW,KAAK,SAAS,MAAM,EAAE,IAAI,eAAe,QAAQ,EAAE,OAAM;AAC7F,eAAW,OAAO,KAAK,mBAAmB;EACtD;AAEA,EAAK;AAjhBE,IAAM,SAAN;AC9BA,IAAM,eAAN,MAAM,sBAA2B,MAAM;EAE1C,YAAYJ,WAAU,CAAA,GAAI;AACtB,UAAK;AAEL,IAAAA,SAAQ,iBAAiB;AACzB,IAAAA,SAAQ,qBAAqB;AAC7B,IAAAA,SAAQ,cAAc;AACtB,IAAAA,SAAQ,yBAAyB;AACjC,IAAAA,SAAQ,aAAa;AACrB,IAAAA,SAAQ,SAAS;AACjB,IAAAA,SAAQ,WAAW;AAEnB,SAAK,SAAS,IAAI,OAAOA,QAAO;AAChC,SAAK,YAAY;AAEjB,SAAK,eAAe,cAAa,mBAAkB;AACnD,SAAK,IAAI,KAAK,YAAY;AAC1B,SAAK,aAAa,iBAAiB,cAAa,eAAe,KAAK,MAAM,KAAK,MAAM;EAE7F;;;;;;;;;;;;;;;;;;;;;;EAuBI,cAAc,MAAMA,WAAU,CAAA,GAAI;AAC9B,QAAIA,SAAQ,kBAAkB;AAAO,MAAAA,SAAQ,gBAAgB;AAC7D,WAAO,KAAK,OAAO,cAAc,MAAMA,QAAO;EACtD;;;;;;;;;;;;;;;;;;;EAoBI,eAAe,cAAc,eAAe;AACxC,QAAI,kBAAkB;AAAO,sBAAgB;AAC7C,WAAO,KAAK,OAAO,eAAe,cAAc,aAAa;EACrE;;;;;;EAOI,cAAc,YAAY;AACtB,WAAO,KAAK,OAAO,cAAc,UAAU;EACnD;EAEI,iBAAiB,OAAO;AACpB,WAAO,KAAK,OAAO,iBAAiB,KAAK;EACjD;EAEI,UAAU;AACN,WAAO,KAAK,OAAO,QAAO;EAClC;EAEI,OAAO,eAAe,QAAQ,UAAU,YAAY,QAAQ;AACxD,QAAI,KAAK,cAAc,KAAK,OAAO,WAAW;AAC1C,UAAI,KAAK,WAAW;AAChB,aAAK,OAAO,KAAK,SAAS;MAC1C;AACY,WAAK,YAAY,KAAK,OAAO;AAC7B,WAAK,IAAI,KAAK,OAAO,SAAS;IAC1C;AACQ,WAAO,OAAO,UAAU,MAAM;EACtC;EAEI,OAAO,qBAAqB;AACxB,UAAM,WAAW,IAAU,eAAe,GAAG,GAAG,CAAC;AACjD,UAAM,WAAW,IAAU,kBAAiB;AAC5C,aAAS,aAAa;AACtB,aAAS,aAAa;AACtB,UAAM,OAAO,IAAU,KAAK,UAAU,QAAQ;AAC9C,SAAK,gBAAgB;AACrB,WAAO;EACf;AAEA;",
  "names": ["resolve", "reject", "options", "buf", "i", "Ray", "domElement", "panLeft", "panUp", "pan", "instant", "Ray", "centers", "visitFunc", "precision", "gl", "currentVao", "options", "transformIndexes", "Constants", "downloadPromise", "index"]
}
