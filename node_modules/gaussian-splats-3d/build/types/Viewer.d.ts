export class Viewer {
    constructor(params?: {});
    requestAnimationFrameID: any;
    rootElement: any;
    usingExternalCamera: boolean;
    usingExternalRenderer: boolean;
    cameraUp: any;
    initialCameraPosition: any;
    initialCameraLookAt: any;
    scene: any;
    renderer: any;
    camera: any;
    useBuiltInControls: any;
    controls: OrbitControls;
    ignoreDevicePixelRatio: any;
    devicePixelRatio: number;
    selfDrivenMode: any;
    selfDrivenUpdateFunc: any;
    showMeshCursor: boolean;
    showControlPlane: boolean;
    showInfo: boolean;
    sceneHelper: SceneHelper;
    sortWorker: Worker;
    splatRenderCount: number;
    splatSortCount: number;
    inIndexArray: Uint32Array;
    splatMesh: SplatMesh;
    sortRunning: boolean;
    selfDrivenModeRunning: boolean;
    splatRenderingInitialized: boolean;
    raycaster: Raycaster;
    infoPanel: HTMLDivElement;
    infoPanelCells: {};
    currentFPS: number;
    lastSortTime: number;
    previousCameraTarget: any;
    nextCameraTarget: any;
    mousePosition: any;
    mouseDownPosition: any;
    mouseDownTime: number;
    initialized: boolean;
    onKeyDown(e: any): void;
    onMouseUp(mouse: any): void;
    updateSplatMeshUniforms(): void;
    gatherSceneNodes(gatherAllNodes: any): void;
    updateFPS(): void;
    timingSensitiveUpdates(): void;
    updateCameraTransition(currentTime: any): void;
    updateMeshCursor(): void;
    updateForRendererSizeChanges(): void;
    updateInfo(): void;
    updateFocusMarker(timeDelta: any): void;
    render(): void;
    updateView(force?: boolean, gatherAllNodes?: boolean): void;
    init(): void;
    loadingSpinner: LoadingSpinner;
    onMouseMove(mouse: any): void;
    onMouseDown(): void;
    getRenderDimensions(outDimensions: any): void;
    setupInfoPanel(): void;
    loadFile(fileURL: any, options?: {}): Promise<any>;
    loadSplatBuffer(splatBuffer: any, options: any): Promise<any>;
    setupSplatMesh(splatBuffer: any, splatAlphaRemovalThreshold?: number, position?: any, quaternion?: any, halfPrecisionCovariancesOnGPU?: boolean, devicePixelRatio?: number): void;
    setupSortWorker(splatBuffer: any): Promise<any>;
    outIndexArray: Uint32Array;
    start(): void;
    stop(): void;
    selfDrivenUpdate(): void;
    update(): void;
    updateControlPlane(): void;
    getSplatMesh(): SplatMesh;
}
import { OrbitControls } from "./OrbitControls.js";
import { SceneHelper } from "./SceneHelper.js";
import { SplatMesh } from "./SplatMesh.js";
import { Raycaster } from "./raycaster/Raycaster.js";
import { LoadingSpinner } from "./LoadingSpinner.js";
