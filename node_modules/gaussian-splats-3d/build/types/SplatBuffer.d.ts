export class SplatBuffer {
    static PositionComponentCount: number;
    static ScaleComponentCount: number;
    static RotationComponentCount: number;
    static ColorComponentCount: number;
    static CompressionLevels: {
        0: {
            BytesPerPosition: number;
            BytesPerScale: number;
            BytesPerColor: number;
            BytesPerRotation: number;
            ScaleRange: number;
        };
        1: {
            BytesPerPosition: number;
            BytesPerScale: number;
            BytesPerColor: number;
            BytesPerRotation: number;
            ScaleRange: number;
        };
    };
    static CovarianceSizeFloats: number;
    static CovarianceSizeBytes: number;
    static HeaderSizeBytes: number;
    constructor(bufferData: any);
    headerBufferData: ArrayBuffer;
    headerArrayUint8: Uint8Array;
    headerArrayUint32: Uint32Array;
    headerArrayFloat32: Float32Array;
    versionMajor: number;
    versionMinor: number;
    headerExtraK: number;
    compressionLevel: number;
    splatCount: number;
    bucketSize: number;
    bucketCount: number;
    bucketBlockSize: number;
    halfBucketBlockSize: number;
    bytesPerBucket: number;
    compressionScaleRange: any;
    compressionScaleFactor: number;
    splatBufferData: ArrayBuffer;
    bytesPerPosition: any;
    bytesPerScale: any;
    bytesPerColor: any;
    bytesPerRotation: any;
    bytesPerSplat: any;
    linkBufferArrays(): void;
    positionArray: Uint16Array | Float32Array;
    scaleArray: Uint16Array | Float32Array;
    colorArray: Uint8Array;
    rotationArray: Uint16Array | Float32Array;
    bucketsBase: number;
    fbf(f: any): any;
    tbf(f: any): any;
    getHeaderBufferData(): ArrayBuffer;
    getSplatBufferData(): ArrayBuffer;
    getPosition(index: any, outPosition?: any): any;
    setPosition(index: any, position: any): void;
    getScale(index: any, outScale?: any): any;
    setScale(index: any, scale: any): void;
    getRotation(index: any, outRotation?: any): any;
    setRotation(index: any, rotation: any): void;
    getColor(index: any, outColor?: any): any;
    setColor(index: any, color: any): void;
    getSplatCount(): number;
    fillCovarianceArray(covarianceArray: any): void;
    fillPositionArray(outPositionArray: any): void;
    fillScaleArray(outScaleArray: any): void;
    fillRotationArray(outRotationArray: any): void;
    fillColorArray(outColorArray: any): void;
    swapVertices(indexA: any, indexB: any): void;
}
